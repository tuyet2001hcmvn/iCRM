@model ProfileViewModel
@using ISD.Core
@{
    //ViewBag.Title = LanguageResource.Information + " " + ViewBag.Title;
    ViewBag.Title = LanguageResource.Customer;
    string CurrentArea = ConstArea.Customer;
    string CurrentController = ConstController.Profile;
    string currentUserName = CurrentUser.UserName;
    string CurrentUrl = HtmlExtensions.GetCurrentUrl(CurrentArea, CurrentController);

    bool isHasPermissionExport = HtmlExtensions.GetPermission(CurrentUrl, ConstFunction.Export, "?Type=" + ViewBag.Type);
    bool isHasPermissionSync = HtmlExtensions.GetPermission(CurrentUrl, ConstFunction.SYNC, "?Type=" + ViewBag.Type);
    bool isHasPermissionEdit = HtmlExtensions.GetPermission(CurrentUrl, ConstFunction.Edit, "?Type=" + ViewBag.Type);
    bool isHasPermissionRestore = HtmlExtensions.GetPermission(CurrentUrl, ConstFunction.Restore, "?Type=" + ViewBag.Type);
    bool isHasPermissionMerge = HtmlExtensions.GetPermission(CurrentUrl, ConstFunction.MERGE, "?Type=" + ViewBag.Type);
    bool isHasPermissionPrintProfile = HtmlExtensions.GetPermission(CurrentUrl, ConstFunction.PRINTPROFILE, "?Type=" + ViewBag.Type);

    //Ẩn nếu là Account: Ẩn cột khách hàng
    var cssClass = string.Empty;
    if (ViewBag.Type == ConstProfileType.Account)
    {
        cssClass = "display-none";
    }

    var cssNotAccountClass = string.Empty;
    if (ViewBag.Type != ConstProfileType.Account)
    {
        cssNotAccountClass = "display-none";
    }

    var cssOpportunityClass = string.Empty;
    if (ViewBag.Type == ConstProfileType.Opportunity)
    {
        cssOpportunityClass = "display-none";
    }

    var cssCompetitorClass = string.Empty;
    if (ViewBag.Type == ConstProfileType.Competitor)
    {
        cssCompetitorClass = "display-none";
    }

    var cssContactClass = string.Empty;
    if (ViewBag.Type == ConstProfileType.Contact)
    {
        cssContactClass = "display-none";
    }
    var cssPermisRestore = "display-none";
    if (isHasPermissionRestore)
    {
        cssPermisRestore = "";
    }
}
@if (ViewBag.Type == ConstController.Appointment)
{
    @Html.Action("_Index", "Appointment");
}
else
{
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @LanguageResource.Profile_CustomerId
        </h1>
        <div class="pull-right">
            @HtmlExtensions.CreateButton(CurrentArea, CurrentController, "Type", ViewBag.Type)
            @if (ViewBag.Type == ConstProfileType.Account)
            {
                if (isHasPermissionExport)
                {
                    <a class="btn btn-export btn-success" style="margin-right: 8px;">
                        <i class="fa fa-download"></i> @LanguageResource.Btn_ExportCreate
                    </a>
                    <a id="btn-export-email" class="btn btn-export-email btn-success" style="margin-right: 8px;">
                        <i class="fa fa-download"></i> @LanguageResource.Btn_ExportEmail
                    </a>
                    <a id="btn-export-profile-product-promotion" class="btn btn-export-profile-product-promotion btn-success" style="margin-right: 8px;">
                        <i class="fa fa-download"></i> @LanguageResource.Btn_ExportCustomer4Campaign
                    </a>
                    <a id="btn-export-customer" class="btn btn-export-customer btn-success" style="margin-right: 8px;">
                        <i class="fa fa-download"></i> @LanguageResource.ExportProfileHeader
                    </a>
                    @*@HtmlExtensions.ImportButton(CurrentArea, CurrentController)*@
                    <button class="btn bg-olive" data-target="#importexcel-window" data-toggle="modal" id="btn-import"><i class="fa fa-upload"></i> @LanguageResource.Btn_Import</button>
                }
                if (isHasPermissionSync)
                {
                    <a class="btn btn-info btn-sync">
                        <i class="fa fa-refresh"></i> @LanguageResource.SyncCustomer
                    </a>
                }
                if (isHasPermissionMerge)
                {
                    <a class="btn btn-warning" id="btn-merge-profile">
                        <i class="fa fa-database"></i> @LanguageResource.Btn_Merge_Code
                    </a>
                }
            }
            else if (ViewBag.Type == ConstProfileType.Competitor)
            {
                <a class="btn btn-info" id="btn-extend-account">
                    <i class="fa fa-refresh"></i> Lấy từ khách hàng
                </a>
                <div class="btn-group" style="margin-left: 5px;">
                    <button class="btn btn-success dropdown-toggle">
                        <i class="fa fa-download"></i> Export
                    </button>
                    <button class="btn btn-success dropdown-toggle" data-toggle="dropdown">
                        <span class="caret"></span><span class="sr-only">&nbsp;</span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li>
                            <span>
                                <a class="btn btn-export btn-export-competitor" data-type="@ConstCatalogType.VatLieu">
                                    <i class="fa fa-file-excel-o"></i> <span>Danh sách đối thủ mảng vật liệu</span>
                                </a>
                            </span>
                        </li>
                        <li>
                            <span>
                                <a class="btn btn-export btn-export-competitor" data-type="@ConstCatalogType.SanGo">
                                    <i class="fa fa-file-excel-o"></i> <span>Danh sách đối thủ mảng sàn gỗ</span>
                                </a>
                            </span>
                        </li>
                        <li>
                            <span>
                                <a class="btn btn-export btn-export-competitor" data-type="@ConstCatalogType.PhuKien">
                                    <i class="fa fa-file-excel-o"></i> <span>Danh sách đối thủ mảng phụ kiện</span>
                                </a>
                            </span>
                        </li>
                        <li>
                            <span>
                                <a class="btn btn-export btn-export-competitor" data-type="@ConstCatalogType.ThietBi">
                                    <i class="fa fa-file-excel-o"></i> <span>Danh sách đối thủ mảng thiết bị bếp</span>
                                </a>
                            </span>
                        </li>
                        <li>
                            <span>
                                <a class="btn btn-export btn-export-competitor" data-type="@ConstCatalogType.SmartHome">
                                    <i class="fa fa-file-excel-o"></i> <span>Danh sách đối thủ mảng smarthome</span>
                                </a>
                            </span>
                        </li>
                        <li>
                            <span>
                                <a class="btn btn-export btn-export-competitor" data-type="@ConstCatalogType.ThiCong">
                                    <i class="fa fa-file-excel-o"></i> <span>Danh sách đối thủ mảng thi công</span>
                                </a>
                            </span>
                        </li>
                        @*<li>
                                <span>
                                    <a class="btn btn-export btn-export-competitor" data-type="@ConstCatalogType.ConLai">
                                        <i class="fa fa-file-excel-o"></i> <span>Danh sách đối thủ các mảng còn lại</span>
                                    </a>
                                </span>
                            </li>*@
                    </ul>
                </div>
            }
            else if (ViewBag.Type == ConstProfileType.Opportunity)
            {
                <a class="btn btn-success" id="btn-export-spec"><i class="fa fa-download"></i> Export Spec</a>
            }
            else if (ViewBag.Type == ConstProfileType.Lead)
            {
                <a class="btn btn-success" id="btn-export-lead">
                    <i class="fa fa-download"></i> Export
                </a>
            }

        </div>
    </div>
    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <form id="fakeform" name="fakeform">
                        <input name="Addresss" type="text" style="height:0;width:0;opacity:0;border:0;padding:0">
                    </form>
                    @using (Html.BeginForm("_Search", null, FormMethod.Post, new { @id = "frmSearch", @class = "isd-form-search" }))
                    {
                        @Html.Hidden("Type", (string)ViewBag.Type)
                        @Html.Hidden("CreateRequestAll")
                        @Html.Hidden("CustomerAccountGroupAll")
                        @Html.Hidden("SearchCompetitorType")
                        @Html.Hidden("FileName")
                        <div class="panel-body">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <div class="col-md-12 select-filter multi input-group">
                                        <span class="input-group-addon"><i class="fa fa-play" aria-hidden="true"></i></span>
                                        <select class="Filters" name="Filters" multiple="multiple">
                                            @foreach (var item in (List<DropdownlistFilter>)ViewBag.Filters)
                                            {
                                                <option value="@item.FilterCode">@item.FilterName</option>
                                            }
                                        </select>
                                        <label class="input-group-addon filter-hidden">
                                            <input type="checkbox" name="CheckAll" id="CheckAll" />
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            @if (ViewBag.Type == ConstProfileType.Competitor)
                            {
                                <div class="col-md-5 hidden hidden_ProfileCode">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.ProfileCode)
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.TextBoxFor(p => p.ProfileCode, new { @id = "SearchProfileCode", @class = "form-control text-box single-line" })
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.ProfileCode)
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.TextBoxFor(p => p.ProfileCode, new { @id = "SearchProfileCode", @class = "form-control text-box single-line" })
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (ViewBag.Type == ConstProfileType.Account)
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.SearchProfileForeignCode)
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.TextBoxFor(p => p.SearchProfileForeignCode, new { @class = "form-control text-box single-line" })
                                            @Html.HiddenFor(p => p.SearchProfileForeignCodeIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('SearchProfileForeignCodeIsNull','@LanguageResource.Profile_ProfileForeignCode')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @if (ViewBag.Type == ConstProfileType.Opportunity || ViewBag.Type == ConstProfileType.Lead)
                                        {
                                            <div class="label-wrapper">
                                                <label class="control-label" for="ProfileName">Tên dự án</label>
                                            </div>
                                        }
                                        else if (ViewBag.Type == ConstProfileType.Competitor)
                                        {
                                            <div class="label-wrapper">
                                                <label class="control-label" for="ProfileName">Tên công ty</label>
                                            </div>
                                        }
                                        else
                                        {
                                            @Html.TooltipLabelFor(p => p.ProfileName)
                                        }
                                    </div>
                                    <div class="col-md-8 pl-0">
                                        @Html.TextBoxFor(p => p.ProfileName, new { @id = "ProfileSearchName", @class = "form-control text-box single-line" })
                                    </div>
                                </div>
                            </div>
                            @if (ViewBag.Type != ConstProfileType.Opportunity && ViewBag.Type != ConstProfileType.Lead)
                            {
                                if (ViewBag.Type == ConstProfileType.Competitor)
                                {
                                    <div class="col-md-5 hidden hidden_Phone">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <div class="label-wrapper">
                                                    <label class="control-label" for="Phone">@LanguageResource.Profile_Phone</label>
                                                </div>
                                            </div>
                                            <div class="col-md-8 pl-0">
                                                @Html.TextBoxFor(p => p.Phone, new { @class = "form-control text-box single-line", @Value = ViewBag.Phone, @Role = "presentation", @autocomplete = "off" })
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <div class="label-wrapper">
                                                    <label class="control-label" for="Phone">@LanguageResource.Profile_Phone</label>
                                                </div>
                                            </div>
                                            <div class="col-md-8 pl-0">
                                                @Html.TextBoxFor(p => p.Phone, new { @class = "form-control text-box single-line", @Value = ViewBag.Phone, @Role = "presentation", @autocomplete = "off" })
                                            </div>
                                        </div>
                                    </div>
                                }

                            }
                            @if (ViewBag.Type == ConstProfileType.Competitor)
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label" for="CompetitorType">Nhóm hàng</label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.DropDownList("CompetitorType", null, LanguageResource.Dropdownlist_All, new { @id = "CompetitorType", @class = "form-control with-search" })
                                        </div>
                                    </div>
                                </div>

                            }
                            @if (ViewBag.Type == ConstProfileType.Account)
                            {
                                <div class="col-md-5 hidden hidden_IsTopInvestor">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label" for="IsTopInvestor">
                                                    @LanguageResource.Profile_IsTopInvestor
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.DropDownListFor(x => x.IsTopInvestor, new List<SelectListItem>()
                                            {
                                               new SelectListItem(){Text = LanguageResource.Dropdownlist_All, Value = ""},
                                               new SelectListItem(){Text = LanguageResource.Yes, Value = "true"},
                                               new SelectListItem(){Text = LanguageResource.No, Value = "false"}
                                            }, new { @class = "font-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5 hidden hidden_IsInvestor">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label" for="IsInvestor">
                                                    @LanguageResource.Profile_IsInvestor
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.DropDownListFor(x => x.IsInvestor, new List<SelectListItem>()
                                            {
                                               new SelectListItem(){Text = LanguageResource.Dropdownlist_All, Value = ""},
                                               new SelectListItem(){Text = LanguageResource.Yes, Value = "true"},
                                               new SelectListItem(){Text = LanguageResource.No, Value = "false"}
                                            }, new { @class = "font-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5 hidden hidden_IsDesigner">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label" for="IsDesigner">
                                                    @LanguageResource.Profile_IsDesigner
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.DropDownListFor(x => x.IsDesigner, new List<SelectListItem>()
                                            {
                                               new SelectListItem(){Text = LanguageResource.Dropdownlist_All, Value = ""},
                                               new SelectListItem(){Text = LanguageResource.Yes, Value = "true"},
                                               new SelectListItem(){Text = LanguageResource.No, Value = "false"}
                                            }, new { @class = "font-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5 hidden hidden_IsContractor">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label" for="IsContractor">
                                                    @LanguageResource.Profile_IsContractor
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.DropDownListFor(x => x.IsContractor, new List<SelectListItem>()
                                            {
                                               new SelectListItem(){Text = LanguageResource.Dropdownlist_All, Value = ""},
                                               new SelectListItem(){Text = LanguageResource.Yes, Value = "true"},
                                               new SelectListItem(){Text = LanguageResource.No, Value = "false"}
                                            }, new { @class = "font-control" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5 hidden hidden_CustomerTypeCode">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.CustomerTypeCode)
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.DropDownList("CustomerTypeCode", null, LanguageResource.Dropdownlist_All, new { @id = "CustomerTypeCode", @class = "form-control with-search" })
                                            @Html.HiddenFor(p => p.CustomerTypeCodeIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('CustomerTypeCodeIsNull', '@LanguageResource.Profile_CustomerTypeCode')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5 hidden hidden_CustomerSourceCode">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.CustomerSourceCode)
                                        </div>
                                        <div class="col-md-8 multi input-group">
                                            @Html.DropDownList("CustomerSourceCode", (IEnumerable<SelectListItem>)ViewBag.CustomerSourceCode, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                            @Html.HiddenFor(p => p.CustomerSourceCodeIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('CustomerSourceCodeIsNull','@LanguageResource.Profile_CustomerSourceCode')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-5 hidden hidden_CompanyId">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.CompanyId)
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.DropDownListFor(p => p.CompanyId, null, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-5 hidden hidden_StoreId">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.StoreId)
                                        </div>
                                        <div class="col-md-8 multi pl-0">
                                            @Html.DropDownListFor(p => p.StoreId, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-5 hidden hidden_CustomerAccountGroupCode">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.CustomerAccountGroupCode)
                                        </div>
                                        <div class="col-md-8 multi pl-0  select-filter select-customer-account-group-code input-group">
                                            @Html.DropDownListFor(p => p.CustomerAccountGroupCode, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                            <label class="input-group-addon filter-customer-account-group-code">
                                                <input type="checkbox" id="CustomerAccountGroupCodeAll" />
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="row"></div>
                            }
                            else if (ViewBag.Type == ConstProfileType.Contact)
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label" for="ProfileId">@LanguageResource.Profile_CustomerId</label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 position-relative dropdown-absolute pl-0">
                                            @Html.HiddenFor(p => p.ProfileId)
                                            <div class="input-group">
                                                @Html.RequiredTextboxFor(p => p.SearchProfileName, new { @class = " form-control text-box single-line", @id = "ProfileName", @readonly = "readonly" })
                                                <a class="input-group-addon btn btn-danger btn-del-profile">
                                                    <i class="fa fa-close"></i>
                                                </a>
                                                <a class="input-group-addon btn btn-default btn-get-profile" data-toggle="modal">
                                                    <i class="fa fa-ellipsis-h"></i>
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }


                            @if (ViewBag.Type == ConstProfileType.Lead)
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.SaleOfficeCode)
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.DropDownList("SaleOfficeCode", null, LanguageResource.Dropdownlist_All, new { @class = " form-control" })
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-md-5  hidden hidden_SaleOfficeCode">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.SaleOfficeCode)
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.DropDownList("SaleOfficeCode", null, LanguageResource.Dropdownlist_All, new { @class = " form-control" })
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (ViewBag.Type == ConstProfileType.Competitor)
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.ProvinceId)
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.DropDownListFor(p => p.ProvinceId, (SelectList)ViewBag.ProvinceIdList, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                            @Html.HiddenFor(p => p.ProvinceIdIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('ProvinceIdIsNull','@LanguageResource.Profile_ProvinceId')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.ProvinceId)
                                        </div>
                                        <div class="col-md-8 multi input-group">
                                            @Html.DropDownListFor(p => p.ProvinceId, (MultiSelectList)ViewBag.ProvinceIdList, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                            @Html.HiddenFor(p => p.ProvinceIdIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('ProvinceIdIsNull','@LanguageResource.Profile_ProvinceId')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }


                            <div class="col-md-5 hidden hidden_DistrictId">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.DistrictId)
                                    </div>
                                    <div class="col-md-8 input-group">
                                        <select id="DistrictId" name="DistrictId" class="form-control with-search" multiple>
                                            <option value="">@LanguageResource.Dropdownlist_All</option>
                                        </select>
                                        @Html.HiddenFor(p => p.DistrictIdIsNull)
                                        <span class="input-group-btn">
                                            <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('DistrictIdIsNull','@LanguageResource.Profile_DistrictId')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-5 hidden hidden_WardId">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.WardId)
                                    </div>
                                    <div class="col-md-8 multi input-group">
                                        <select id="WardId" name="WardId" class="form-control with-search">
                                            <option value="">@LanguageResource.Dropdownlist_All</option>
                                        </select>
                                        @Html.HiddenFor(p => p.WardIdIsNull)
                                        <span class="input-group-btn">
                                            <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('WardIdIsNull','@LanguageResource.WardId')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            @if (ViewBag.Type == ConstProfileType.Competitor)
                            {
                                <div class="col-md-5 hidden hidden_Address">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.Address)
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.TextBoxFor(p => p.Address, new { @class = "form-control", @Role = "presentation", @autocomplete = "off" })
                                            @Html.HiddenFor(p => p.AddressIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('AddressIsNull','@LanguageResource.Profile_Address')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (ViewBag.Type == ConstProfileType.Account)
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.Address)
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.TextBoxFor(p => p.Address, new { @class = "form-control", @Role = "presentation", @autocomplete = "off" })
                                            @Html.HiddenFor(p => p.AddressIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('AddressIsNull','@LanguageResource.Profile_Address')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-md-5 hidden hidden_Address">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @if (ViewBag.Type == ConstProfileType.Opportunity)
                                            {
                                                <div class="label-wrapper">
                                                    <label class="control-label" for="Address">Địa điểm dự án</label>
                                                </div>
                                            }
                                            else
                                            {
                                                @Html.TooltipLabelFor(p => p.Address)
                                            }
                                        </div>
                                        <div class="col-md-8 input-group">
                                            @Html.TextBoxFor(p => p.Address, new { @class = "form-control", @Role = "presentation", @autocomplete = "off" })
                                            @Html.HiddenFor(p => p.AddressIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('AddressIsNull','@LanguageResource.Profile_Address')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>

                            }

                            @if (ViewBag.Type == ConstProfileType.Competitor)
                            {
                                decimal? Number1 = null;
                                string Number1ValueDisplay = string.Empty;
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label" for="Number1">
                                                    Vốn pháp định (Tỷ)
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 input-group">
                                            <input type="number" class="form-control Number1" style="text-align:left!important" id="Number1" value="@Number1ValueDisplay" name="Number1" />
                                            <div class="text-right">
                                                @if (Number1.HasValue)
                                                {
                                                    <span id="Number1ValueDisplay">@Number1.FormatCurrency() VNĐ</span>
                                                }
                                                else
                                                {
                                                    <span id="Number1ValueDisplay"></span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (ViewBag.Type == ConstProfileType.Competitor)
                            {

                                decimal? Number2 = null;
                                string Number2ValueDisplay = string.Empty;
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label" for="Number2">
                                                    Độ phủ thị trường (%)
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 input-group">
                                            <input type="number" class="form-control Number2" style="text-align:left!important" id="Number2" value="@Number2ValueDisplay" name="Number2" />
                                            <div class="text-right">
                                                @if (Number2.HasValue)
                                                {
                                                    <span id="Number2ValueDisplay">@Number2.FormatCurrency() VNĐ</span>
                                                }
                                                else
                                                {
                                                    <span id="Number2ValueDisplay"></span>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }


                            <div class="col-md-5 hidden hidden_CustomerGroupCode">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.CustomerGroupCode)
                                    </div>
                                    <div class="col-md-8 multi pl-0  select-filter select-customer-group-code input-group">
                                        @Html.DropDownListFor(p => p.CustomerGroupCode, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                        @Html.HiddenFor(p => p.CustomerGroupCodeIsNull)
                                        <label class="input-group-addon filter-customer-group-code">
                                            <input type="checkbox" id="CustomerGroupCodeAll" />
                                        </label>
                                        <span class="input-group-btn">
                                            <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('CustomerGroupCodeIsNull','@LanguageResource.Profile_CustomerCategoryCode')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5 hidden hidden_CustomerCareerCode">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.CustomerCareerCode)
                                    </div>
                                    <div class="col-md-8 multi input-group">
                                        @Html.DropDownListFor(p => p.CustomerCareerCode, null, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                        @Html.HiddenFor(p => p.CustomerCareerCodeIsNull)
                                        <span class="input-group-btn">
                                            <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('CustomerCareerCodeIsNull','@LanguageResource.Profile_CustomerCareerCode')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                        </span>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-5 hidden hidden_SalesEmployeeCode">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.SalesEmployeeCode)
                                    </div>
                                    <div class="col-md-8 multi input-group">
                                        @Html.DropDownListFor(p => p.SalesEmployeeCode, null, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                        @Html.HiddenFor(p => p.SalesEmployeeCodeIsNull)
                                        <span class="input-group-btn">
                                            <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('SalesEmployeeCodeIsNull','@LanguageResource.PersonInCharge')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-5 hidden hidden_RolesCode">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.RolesCode)
                                    </div>
                                    <div class="col-md-8 multi pl-0">
                                        @Html.DropDownListFor(p => p.RolesCode, null, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                    </div>
                                </div>
                            </div>


                            @if (ViewBag.Type == ConstProfileType.Account)
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.TaxNo)
                                        </div>
                                        <div class="col-md-8 multi input-group">
                                            @Html.TextBoxFor(p => p.TaxNo, new { @class = "form-control text-box single-line" })
                                            @Html.HiddenFor(p => p.TaxNoIsNull)
                                            <span class="input-group-btn">
                                                <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('TaxNoIsNull','@LanguageResource.Profile_TaxNo')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            }
                            else if (ViewBag.Type == ConstProfileType.Contact)
                            {
                                <div class="col-md-5 hidden hidden_Age">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper">
                                                <label class="control-label">@LanguageResource.Profile_Age</label>
                                            </div>
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.DropDownList("Age", null, LanguageResource.Dropdownlist_Choose, new { @class = " form-control" })
                                        </div>
                                    </div>
                                </div>
                            }

                            <div class="col-md-5 hidden hidden_Actived">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.Actived)
                                    </div>
                                    <div class="col-md-8 pl-0">
                                        @Html.DropDownList("Actived", new List<SelectListItem>()
                                        {
                                           new SelectListItem(){Text = LanguageResource.Dropdownlist_All, Value = ""},
                                           new SelectListItem(){Text = LanguageResource.Actived_True, Value = "true"},
                                           new SelectListItem(){Text = LanguageResource.Actived_False, Value = "false"}
                                        }, new { @class = "font-control" })
                                    </div>
                                </div>
                            </div>
                            <div class="row hidden hidden_Create Create">
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            @Html.TooltipLabelFor(p => p.CreateByCode)
                                        </div>
                                        <div class="col-md-8 multi pl-0">
                                            @Html.DropDownList("CreateByCode", (IEnumerable<SelectListItem>)ViewBag.SalesEmployeeCode, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                <div class="label-wrapper">
                                                    <label class="control-label">@LanguageResource.CreatedDate</label>
                                                </div>
                                            </div>
                                            <div class="col-md-8 pl-0">
                                                @Html.DropDownList("CommonDate", null, new { @class = "form-control with-search ddl-common-date", @data_id = "Create", @id = "receive-date", Name = "CreateCommonDate" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                @Html.TooltipLabelFor(p => p.CreateFromDate)
                                            </div>
                                            <div class="col-md-8 pl-0">
                                                @Html.RequiredTextboxFor(p => p.CreateFromDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                @Html.TooltipLabelFor(p => p.CreateToDate)
                                            </div>
                                            <div class="col-md-8 pl-0">
                                                @Html.RequiredTextboxFor(p => p.CreateToDate, "{0:yyyy-MM-dd}", new { type = "date" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-5 hidden hidden_Email">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.TooltipLabelFor(p => p.Email)
                                    </div>
                                    <div class="col-md-8 input-group">
                                        @Html.TextBoxFor(p => p.Email, new { @class = "form-control text-box single-line", @Role = "presentation", @autocomplete = "off" })
                                        @Html.HiddenFor(p => p.EmailIsNull)
                                        <span class="input-group-btn">
                                            <a class="btn btn-more-option" title="@LanguageResource.MoreOption" onclick="OptionSearchNull('EmailIsNull','Email')"><i class="fa fa-external-link" aria-hidden="true"></i></a>
                                        </span>
                                        @*@Html.DropDownList("Email", new List<SelectListItem>()
                                            {
                                               new SelectListItem(){Text = "- Tất cả -", Value = ""},
                                               new SelectListItem(){Text = "Có email", Value = "true"},
                                               new SelectListItem(){Text = "Không có email", Value = "false"}
                                            }, new { @class = "font-control" })*@
                                    </div>
                                </div>
                            </div>

                            <div class="row hidden hidden_isCreateRequest">
                                <div class="row">
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                @Html.TooltipLabelFor(p => p.isCreateRequest)
                                            </div>
                                            <div class="col-md-8 pl-0">
                                                @Html.DropDownList("isCreateRequest", null, null, new { @class = "form-control with-search" })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row createRequestTime">
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                @Html.TooltipLabelFor(p => p.CreateRequestTimeFrom)
                                            </div>
                                            <div class="col-md-8 pl-0">
                                                @Html.RequiredTextboxFor(p => p.CreateRequestTimeFrom, "{0:yyyy-MM-dd}", new { type = "date", @Value = ViewBag.CreateRequestTimeFrom.ToString("yyyy-MM-dd") })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                                @Html.TooltipLabelFor(p => p.CreateRequestTimeTo)
                                            </div>
                                            <div class="col-md-8 pl-0">
                                                @Html.RequiredTextboxFor(p => p.CreateRequestTimeTo, "{0:yyyy-MM-dd}", new { type = "date", @Value = ViewBag.CreateRequestTimeTo.ToString("yyyy-MM-dd") })
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            @if (ViewBag.Type == ConstProfileType.Contact)
                            {
                                <div class="col-md-5">
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <div class="label-wrapper"><label class="control-label">Tình trạng</label></div>
                                        </div>
                                        <div class="col-md-8 pl-0">
                                            @Html.DropDownList("isDeleted", new List<SelectListItem>()
                                            {
                                               new SelectListItem(){Text = "Hoạt động", Value = "false"},
                                               new SelectListItem(){Text = "Đã xoá", Value = "true"}
                                            }, new { @class = "font-control" })
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="row">
                                <div class="form-group col-md-12 ">
                                    <div class="col-md-8 col-md-offset-4 input-group">
                                        <select class="form-control" id="SearchTemplateId" name="SearchTemplateId">
                                            <option value="">@LanguageResource.Dropdownlist_Default</option>
                                        </select>
                                        <span class="input-group-btn" style="padding-right:25px;padding-left: 10px;">
                                            <a class="btn btn-delete-frmSearch display-none" style="color: coral;" title="Xoá mẫu tìm kiếm"><i class="fa fa-trash-o fa-lg" aria-hidden="true"></i></a>
                                            <a class="btn btn-save-frmSearch" title="Lưu mẫu tìm kiếm"><i class="fa fa-thumb-tack fa-lg" aria-hidden="true"></i></a>
                                        </span>
                                        @HtmlExtensions.SearchButton()

                                        &nbsp;<a id="btn-sendEmailPopup" class="btn btn-primary" style="display:none" data-email="@ViewBag.CurrentUserEmail"><i class="fa fa-envelope"></i> Gửi mail yêu cầu tạo mã ECC tới phòng IT</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="panel panel-default panel-search-result" style="display:none;">
                    <div class="panel-body">
                        <div id="divSearchResult">
                            @if (ViewBag.Type == ConstProfileType.Opportunity)
                            {
                                <table class="table table-bordered table-striped table-hover no-footer dataTableServerSide">
                                    <thead class="isd-table-header">
                                        <tr>
                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                            <th>@LanguageResource.CRM_ID</th>
                                            <th>Tên dự án</th>
                                            <th>@LanguageResource.TabInvestor</th>
                                            <th class="text-right">@(LanguageResource.ProjectValue) (Tỷ)</th>
                                            <th class="text-right">Quy mô</th>
                                            <th>Tình trạng dự án</th>
                                            <th>ĐVT</th>
                                            <th>@LanguageResource.PersonInCharge</th>
                                            <th>@LanguageResource.MasterData_Province</th>
                                            <th>@LanguageResource.Note</th>
                                            <th>Thời gian kết thúc</th>
                                        </tr>
                                    </thead>
                                </table>
                            }
                            else if (ViewBag.Type == ConstProfileType.Lead)
                            {
                                <table class="table table-bordered table-striped table-hover no-footer dataTableServerSide">
                                    <thead class="isd-table-header">
                                        <tr>
                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                            <th>@LanguageResource.CRM_ID</th>
                                            <th>Tên dự án</th>
                                            <th>@LanguageResource.TabInvestor</th>
                                            <th>@LanguageResource.TabConsultingDesign</th>
                                            <th>@LanguageResource.Profile_SaleOfficeCode</th>
                                            <th>@LanguageResource.MasterData_Province</th>
                                            <th>Loại hình</th>
                                            <th class="text-right">Quy mô</th>
                                            <th>ĐVT</th>
                                            <th>Thời gian bắt đầu</th>
                                            <th>@LanguageResource.ImageUrl</th>
                                            <th>NV cập nhật</th>
                                            <th>@LanguageResource.Note</th>
                                            @*<th class="text-center" id="th-action">@LanguageResource.Actions</th>*@
                                        </tr>
                                    </thead>
                                </table>
                            }
                            else if (ViewBag.Type == ConstProfileType.Competitor)
                            {
                                <table class="table table-bordered table-striped table-hover no-footer dataTableServerSide">
                                    <thead class="isd-table-header">
                                        <tr>
                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                            <th>@LanguageResource.CRM_ID</th>
                                            <th>@LanguageResource.Company_CompanyName</th>
                                            <th>@LanguageResource.LegalRepresentation</th>
                                            <th>@LanguageResource.Profile_TaxNo</th>
                                            <th>@LanguageResource.LegalCapital</th>
                                            <th>@LanguageResource.MarketCoverage</th>
                                            <th>Web</th>
                                            <th>@Html.DisplayNameFor(p => p.Email)</th>
                                            <th>@LanguageResource.DeskTel</th>
                                            <th>@Html.DisplayNameFor(p => p.Address)</th>
                                        </tr>
                                    </thead>
                                </table>
                            }
                            else
                            {
                                <table class="table table-bordered table-striped table-hover no-footer dataTableServerSide">
                                    <thead class="isd-table-header">
                                        <tr>
                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                            <th>@LanguageResource.CRM_ID</th>
                                            <th>@Html.DisplayNameFor(p => p.ProfileForeignCode)</th>
                                            @*<th>@Html.DisplayNameFor(p => p.Title)</th>*@
                                            <th>@Html.DisplayNameFor(p => p.ProfileName)</th>
                                            <th>@Html.DisplayNameFor(p => p.isForeignCustomer)</th>
                                            <th>@LanguageResource.Profile_CustomerId</th>
                                            <th>@LanguageResource.Profile_CustomerTypeCode</th>
                                            <th>@LanguageResource.Configuration_Phone</th>
                                            @*<th>@LanguageResource.Profile_Contact</th>
                                                <th>@LanguageResource.Profile_ContactNumber</th>*@
                                            <th>@Html.DisplayNameFor(p => p.Email)</th>
                                            <th>@Html.DisplayNameFor(p => p.Address)</th>
                                            <th>@Html.DisplayNameFor(p => p.CustomerSourceCode)</th>
                                            <th>@Html.DisplayNameFor(p => p.StoreId)</th>
                                            <th>@Html.DisplayNameFor(p => p.Age)</th>
                                            <th>@Html.DisplayNameFor(p => p.TaxNo)</th>
                                            <th>@Html.DisplayNameFor(p => p.CustomerGroupCode)</th>
                                            <th>@Html.DisplayNameFor(p => p.CustomerCareerCode)</th>
                                            <th>@Html.DisplayNameFor(p => p.SaleOfficeCode)</th>
                                            <th>@Html.DisplayNameFor(p => p.Note)</th>
                                            <th>@LanguageResource.PersonInCharge</th>
                                            <th>@LanguageResource.RoleInCharge</th>
                                            <th>@Html.DisplayNameFor(p => p.CreateUser)</th>
                                            <th class="text-center">@Html.DisplayNameFor(p => p.CreateTime)</th>
                                            <th class="text-center" id="th-actived">@Html.DisplayNameFor(p => p.Actived)</th>
                                            <th class="text-center" id="th-action">@LanguageResource.Actions</th>
                                        </tr>
                                    </thead>
                                </table>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div class="delete-confirm"></div>
<div class="loading-modal"></div>

@section components {

    <div class="divProfilePopup"></div>
    @*KÉO THÔNG TIN KHÁCH HÀNG QUA ĐỐI THỦ*@
    <div class="divExtendAccount">
        <div id="divExtendAccount" class="modal fade" role="dialog">
            <div class="modal-dialog modal-dialog-sm">
                <div class="modal-content">
                    <div class="modal-header bg-primary">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="btn-cancel-delete"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">@LanguageResource.GetInfo</h4>
                    </div>
                    <form class="frmExtendAccount">
                        <div class="form-horizontal">
                            <div class="modal-body">
                                <div id="divAlertPopupExtendAccountWarning" class="alert alert-warning alert-dismissable" style="display: none">
                                    <button type="button" class="alert-close close" aria-hidden="true" data-div="divAlertPopupExtendAccountWarning">×</button>
                                    <div class="alert-message">
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="label-wrapper"><label class="control-label" for="ProfileCode">@LanguageResource.CRM_ID</label></div>
                                    </div>
                                    <div class="col-md-8">
                                        <input type="text" name="ExtendAccountProfileCode" class="form-control text-box single-line" />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <span class="btn btn-default" data-dismiss="modal" id="btn-cancel-delete">@LanguageResource.Btn_Cancel</span>
                                <a class="btn btn-primary pull-right" id="btn-confirm-extend-account">
                                    @LanguageResource.Btn_Save
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @*ĐỒNG BỘ THÔNG TIN KHÁCH HÀNG TỪ SAP*@
    <div class="divSyncProfile">
        <div id="divSyncProfile" class="modal fade" role="dialog">
            <div class="modal-dialog modal-dialog-sm">
                <div class="modal-content">
                    <div class="modal-header bg-primary">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="btn-cancel-delete"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">@LanguageResource.GetCustomerDataFromSAP</h4>
                    </div>
                    <form class="frmSyncProfile">
                        <div class="form-horizontal">
                            <div class="modal-body">
                                <div id="divAlertPopupWarning" class="alert alert-warning alert-dismissable" style="display: none">
                                    <button type="button" class="alert-close close" aria-hidden="true" data-div="divAlertPopupWarning">×</button>
                                    <div class="alert-message">
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        @Html.TooltipLabelFor(p => p.ProfileForeignCode)
                                    </div>
                                    <div class="col-md-8">
                                        <input type="text" name="SyncProfileForeignCode" class="form-control text-box single-line" />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <span class="btn btn-default" data-dismiss="modal" id="btn-cancel-delete">@LanguageResource.Btn_Cancel</span>
                                <a class="btn btn-primary pull-right" id="btn-confirm-sync">
                                    @LanguageResource.Btn_Sync
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    @*GỘP MÃ CRM*@
    <div class="divMergeProfile">
        <div id="divMergeProfile" class="modal fade" role="dialog">
            <div class="modal-dialog modal-dialog-md">
                <div class="modal-content">
                    <div class="modal-header bg-primary">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="btn-cancel-delete"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title" style="text-transform:uppercase">@LanguageResource.Btn_Merge_Code</h4>
                    </div>
                    <form id="frmMergeProfile">
                        <div class="form-horizontal">
                            <div class="modal-body">
                                <div id="divAlertPopup" class="alert alert-warning alert-dismissable" style="display: none">
                                    <button type="button" class="alert-close close" aria-hidden="true" data-div="divAlertPopup">×</button>
                                    <div class="modal-alert-message">
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="form-group">
                                        <div class="col-md-5">
                                            <div class="label-wrapper"><label class="control-label">@LanguageResource.CRMNeedMerge</label></div>
                                        </div>
                                        <div class="col-md-5">
                                            <input type="text" name="ProfileCodeNeedToMerge" class="form-control text-box single-line" />
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="profileCodeControls">
                                        <div class="profileCode">
                                            <div class="form-group">
                                                <div class="col-md-5">
                                                    <div class="label-wrapper"><label class="control-label">@LanguageResource.DuplicateCRM</label></div>
                                                </div>
                                                <div class="col-md-5">
                                                    <div class="input-group">
                                                        <input type="text" name="MergeList[0]" class="form-control text-box single-line profile-code-duplicate" />
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-default btn-add-profile-code" type="button">
                                                                <span class="glyphicon glyphicon-plus"></span>
                                                            </button>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div id="profile-information" style="margin-top: 10px;">

                                </div>
                            </div>

                            <div class="modal-footer">
                                <div class="pull-right">
                                    <a class="btn btn-default" data-dismiss="modal">@LanguageResource.Btn_Cancel</a>
                                    <a class="btn btn-info " id="btn-check-information">
                                        @LanguageResource.Btn_Check_Information
                                    </a>
                                    <a class="btn btn-primary" id="btn-confirm-merge">
                                        @LanguageResource.Btn_Merge_Code
                                    </a>
                                </div>
                            </div>

                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!--Modal cài đặt tìm kiếm trường không có dữ liệu-->
    <div class="divFindFieldIsNull">
        <div id="divFindFieldIsNull" class="modal fade" role="dialog">
            <div class="modal-dialog modal-dialog-sm">
                <div class="modal-content">
                    <div class="modal-header bg-primary">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="btn-cancel-delete"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title text-center"></h4>
                    </div>
                    <form class="frmFindFieldIsNull">
                        <div class="form-horizontal">
                            <div class="modal-body">
                                <div id="divAlertPopupWarning" class="alert alert-warning alert-dismissable" style="display: none">
                                    <button type="button" class="alert-close close" aria-hidden="true" data-div="divAlertPopupWarning">×</button>
                                    <div class="alert-message">
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="label-wrapper"><label class="control-label">@LanguageResource.Data</label></div>
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("OptionFieldIsNull", new List<SelectListItem>() {
                                                                new SelectListItem {  Text=LanguageResource.Custom,Value=""},
                                                                new SelectListItem {  Text=LanguageResource.NotNull,Value="false"},
                                                                new SelectListItem {  Text=LanguageResource.NULL,Value="true"}
                                                      }, new { @class = "from-control" })
                                        <input type="hidden" id="NameFieldSearchNull" name="NameFileSearchNull" value="" />
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <span class="btn btn-default" data-dismiss="modal" id="btn-cancel-delete">@LanguageResource.Btn_Cancel</span>
                                <a class="btn btn-primary pull-right" id="btn-confirm-field-option">
                                    @LanguageResource.Confirm_Received
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="sendEmailPopup" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                @Html.Partial("_SendEmailPopup")
            </div>
        </div>
    </div>
    <!-- Profile -->
    <div id="divPrintProfilePopup">
        @Html.Partial("_PrintProfilePopup")
    </div>
}
@section jquery {
    <link href="~/Content/jquery-ui.css" rel="stylesheet" />
    <script src="~/Content/jquery-ui.js"></script>
}

@section scripts {
    <script src="~/Scripts/Common/ISD.SearchTemplate.js"></script>
    <script src="~/Scripts/Common/ISD.CacheInputData.js"></script>
    <script src="~/Content/Plugin/ckeditor/ckeditor.js"></script>
    <script>
        //Define it
        var currentUserId = "@CurrentUser.AccountId";
        var currentPageId = "@ViewBag.PageId";
    </script>
    <script>
        var cssClass = "@cssClass";

        //load default and set event
        $(document).ready(function () {
            selectCustomerAccountGroup();
            $("#isCreateRequest").trigger("change");

            //Set lại thông tin search gần đây khi là back lại
            var modeTemplateSearch = ISD.GetQueryString("ModeSearch", window.location.href);

            if (modeTemplateSearch == "Recently") {
                LoadTemplateSearch(currentUserId, currentPageId, "Recently");
                var recentSearch = JSON.parse(localStorage.getItem('pageId-' + currentPageId));
                if (recentSearch) {
                    FillToInput(recentSearch);
                }
            } else {
                LoadTemplateSearch(currentUserId, currentPageId);
                localStorage.removeItem('pageId-' + currentPageId)
            }
            //PaggingServerSide_Profile("@CurrentUrl");


            @*let Type = '@ViewBag.Type';
            if (Type == 'Account') {
                recentSearch = JSON.parse(localStorage.getItem('ProfileAccount-frmSearch'));
            } else if (Type== 'Contact') {
                recentSearch = JSON.parse(localStorage.getItem('ProfileContact-frmSearch'));
            }*@
            ISD.ShowMessage(window.location.href);
            ISD.UploadFile("@CurrentUrl");

            //hide tooltip
            $(".ico-help").hide();
            $(".Filters").select2({
                multiple: true,
                placeholder: "Thêm các trường tìm kiếm..."
            });
            $(".select-filter .select2 .select2-search__field").css("width", "200px");
            //$("#Email").select2({
            //    tags: true,
            //    // options
            //    searchInputPlaceholder: 'Nhập email...'
            //});
            ISDCacheInput.Init(currentPageId);
            //var recentSearch = JSON.parse(localStorage.getItem('pageId-' + currentPageId));
            //FillToInputTest(recentSearch, "#frmSearch");
            if ("@ViewBag.Type" === "Opportunity") {
                 PaggingServerSide_Profile_Opportunity("@CurrentUrl");
            }
            else if ("@ViewBag.Type" === "Lead") {
                 PaggingServerSide_Profile_Lead("@CurrentUrl");
            }
            else if ("@ViewBag.Type" === "Competitor") {
                 PaggingServerSide_Profile_Competitor("@CurrentUrl");
            }
        });


        $(document).on("change", ".Filters", function () {
            var arr = $(this).val();
            $("div[class*='hidden_']").addClass("hidden");
            $.each(arr, function (index, value) {
                //console.log(value);
                $(".hidden_" + value).removeClass("hidden");
            });
            if (!$(".hidden_CustomerAccountGroupCode").is(':visible')) {
                $("#CustomerAccountGroupAll").val(true);
            }
            else {
                $("#CustomerAccountGroupAll").val("");
            }
        });
        $("#CheckAll").click(function () {
            if ($("#CheckAll").is(':checked')) {
                $(".Filters > option").prop("selected", "selected");
                $(".Filters").trigger("change");
            } else {
                $(".Filters > option").removeAttr("selected");
                $(".Filters").trigger("change");
            }
        });
        $(document).on("click", ".btn-export", function () {
            var form_data = $("#frmSearch").serializeArray();
            ISD.Download("/Customer/Profile/ExportExcel", form_data);
        });



        $(document).on("click", ".btn-export-competitor", function () {
            var competitorType = $(this).data('type');
            var fileName = $(this).find("span").text();
            $("#SearchCompetitorType").val(competitorType);
            $("#FileName").val(fileName);
            var data = $("#frmSearch").serializeArray();
            var arr = {};
            $.each(data, function (index, val) {
                var obj = {};
                obj[val.name] = val.value;
                $.extend(true, arr, obj)
            });
            ISD.Download("/Customer/Profile/ExportCompetitor", arr);
        });

        function selectCustomerAccountGroup() {
            var selectedValues = new Array();
            //selectedValues[0] = "Z001";
            //selectedValues[1] = "Z002";
            //selectedValues[2] = "Z003";
            //selectedValues[3] = "Z004";
            //selectedValues[4] = "Z005";
            //selectedValues[5] = "Z006";
            //selectedValues[6] = "Z007";
            //selectedValues[7] = "Z008";
            //selectedValues[8] = "Z009";
            //selectedValues[9] = "Z010";
            //selectedValues[10] = "Z011";
            //selectedValues[11] = "Z012";
            //selectedValues[12] = "Z013";
            //selectedValues[13] = "Z014";
            //selectedValues[14] = "Z018";
            //selectedValues[15] = "Z999";

            //selectedValues[0] = "";
            //selectedValues[1] = "Z002";
            //selectedValues[2] = "Z003";
            //selectedValues[3] = "Z009";

            //$("#CustomerAccountGroupCode").select2({
            //    multiple: true,
            //});
            //$('#CustomerAccountGroupCode').val(selectedValues).trigger('change');
        }

        $(document).on("click", ".btn-export-email", function () {
            var $btn = $("#btn-export-email");
            $btn.button("loading");
            var arr = {};
            var form_data = $("#frmSearch").serializeArray();
            $.each(form_data, function (index, val) {
                var obj = {};
                obj[val.name] = val.value;
                $.extend(true, arr, obj)
            });
            //Phân nhóm khách hàng
            var CustomerAccountGroupCodeList = $('#CustomerAccountGroupCode').val();
            if (CustomerAccountGroupCodeList != null && CustomerAccountGroupCodeList.length > 0) {
                var customerAccountGroupCode = {};

                customerAccountGroupCode['CustomerAccountGroupCode'] = CustomerAccountGroupCodeList;
                $.extend(true, arr, customerAccountGroupCode);
            }

            //Nhóm kháchh hàng
            var CustomerGroupCodeList = $('#CustomerGroupCode').val();
            if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                var CustomerGroupCode = {};

                CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                $.extend(true, arr, CustomerGroupCode);
            }
            ISD.Download("/Customer/Profile/ExportEmail", arr);
            $btn.button('reset');
        });


        $(document).on("click", ".btn-export-profile-product-promotion", function () {
            var $btn = $("#btn-export-profile-product-promotion");
            $btn.button("loading");
            var arr = {};
            var form_data = $("#frmSearch").serializeArray();
            $.each(form_data, function (index, val) {
                var obj = {};
                obj[val.name] = val.value;
                $.extend(true, arr, obj)
            });
            //Phân nhóm khách hàng
            var CustomerAccountGroupCodeList = $('#CustomerAccountGroupCode').val();
            if (CustomerAccountGroupCodeList != null && CustomerAccountGroupCodeList.length > 0) {
                var customerAccountGroupCode = {};

                customerAccountGroupCode['CustomerAccountGroupCode'] = CustomerAccountGroupCodeList;
                $.extend(true, arr, customerAccountGroupCode);
            }

            //Nhóm kháchh hàng
            var CustomerGroupCodeList = $('#CustomerGroupCode').val();
            if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                var CustomerGroupCode = {};

                CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                $.extend(true, arr, CustomerGroupCode);
            }
            ISD.Download("/Customer/Profile/ExportProfileForProductPromotion", arr);
            $btn.button('reset');
        });
        $(document).on("click", ".btn-export-customer", function () {
            var isCreateRequest = $('#isCreateRequest').val();
            if (isCreateRequest == undefined || isCreateRequest == "" || isCreateRequest == null) {
                alertPopup(false, 'Vui lòng chọn tham số: "Yêu cầu tạo khách ở ECC"');
            }
            else {
                var $btn = $("#btn-export-customer");
                $btn.button("loading");
                var arr = {};
                var form_data = $("#frmSearch").serializeArray();
                $.each(form_data, function (index, val) {
                    var obj = {};
                    obj[val.name] = val.value;
                    $.extend(true, arr, obj)
                });
                var CustomerAccountGroupCodeList = $('#CustomerAccountGroupCode').val();
                if (CustomerAccountGroupCodeList != null && CustomerAccountGroupCodeList.length > 0) {
                    var customerAccountGroupCode = {};

                    customerAccountGroupCode['CustomerAccountGroupCode'] = CustomerAccountGroupCodeList;
                    $.extend(true, arr, customerAccountGroupCode);
                }
                //Nhóm kháchh hàng
                var CustomerGroupCodeList = $('#CustomerGroupCode').val();
                if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                    var CustomerGroupCode = {};

                    CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                    $.extend(true, arr, CustomerGroupCode);
                }
                ISD.Download("/Customer/Profile/ExportCustomer", arr);
                $btn.button('reset');
            }

        });

        //đồng bộ
        $(document).on("click", ".btn-sync", function () {
            $(".divSyncProfile input[name='SyncProfileForeignCode']").val("");
            $(".divSyncProfile #divSyncProfile").modal("show");
        });

        function alertModalSyncPopup(message) {
            $("#divAlertPopupWarning .alert-message").html("");
            setMessage("#divAlertPopupWarning", message);
            $('#divAlertPopupWarning').show();
        }

        $(document).on("click", "#btn-confirm-sync", function () {
            var $btn = $(this);
            var ProfileForeignCode = $(".divSyncProfile input[name='SyncProfileForeignCode']").val();
            if (ProfileForeignCode == null || ProfileForeignCode == "") {
                alertModalSyncPopup("Vui lòng nhập mã SAP cần đồng bộ!");
            }
            else {
                $btn.button("loading");
                $.ajax({
                    type: "POST",
                    url: '/Customer/Profile/SyncProfile',
                    data: {
                        ProfileForeignCode: ProfileForeignCode
                    },
                    success: function (html) {
                        if (html.Success == true) {
                            $(".divSyncProfile #divSyncProfile").modal("hide");
                            if (html.Message != null && html.Message != "") {
                                alertPopup(false, html.Message);
                            }
                            else {
                                alertPopup(true, "Đã đồng bộ thành công khách hàng có mã SAP \"" + ProfileForeignCode + "\".");
                                PaggingServerSide_Profile("@CurrentUrl");
                            }
                        }
                        else {
                            alertModalSyncPopup("Đã có lỗi xảy ra: " + html.Message);
                        }
                        $btn.button("reset");
                    }
                });
            }
        });

        //lấy thông tin từ khách hàng qua đối thủ
        $(document).on("click", "#btn-extend-account", function () {
            $("#divExtendAccount input[name='ExtendAccountProfileCode']").val("");
            $("#divExtendAccount input[name='ExtendAccountProfileCode']").inputFilter(function (value) {
                return /^-?\d*$/.test(value);
            });
            $(".divExtendAccount #divExtendAccount").modal("show");
        });

        function alertModalExtendAccountPopup(message) {
            $("#divAlertPopupExtendAccountWarning .alert-message").html("");
            setMessage("#divAlertPopupExtendAccountWarning", message);
            $('#divAlertPopupExtendAccountWarning').show();
        }

        $(document).on("click", "#btn-confirm-extend-account", function () {
            var $btn = $(this);
            var ProfileCode = $("#divExtendAccount input[name='ExtendAccountProfileCode']").val();
            if (!ProfileCode) {
                alertModalExtendAccountPopup("Vui lòng nhập mã CRM cần lấy thông tin!");
            }
            else {
                $btn.button("loading");
                $.ajax({
                    type: "POST",
                    url: '/Customer/Profile/ExtendAccount',
                    data: {
                        ProfileCode: ProfileCode
                    },
                    success: function (html) {
                        if (html.Success == true) {
                            if (html.Message != null && html.Message != "") {
                                alertModalExtendAccountPopup(false, html.Message);
                            }
                            else {
                                $(".divExtendAccount #divExtendAccount").modal("hide");
                                alertPopup(true, "Đã lấy thông tin khách hàng có mã CRM \"" + ProfileCode + "\" thành công.");
                                PaggingServerSide_Profile("@CurrentUrl");
                            }
                        }
                        else {
                            alertModalExtendAccountPopup(html.Message);
                        }
                        $btn.button("reset");
                    }
                });
            }
        });

        $(document).on("click", ".btn-get-profile", function () {
            $.ajax({
                type: "POST",
                url: '/Work/Task/_ProfileSearch',
                data: {
                    hasNoContact: true,
                    ProfileType: 'Account'
                },
                success: function (html) {
                    $(".divProfilePopup").html("");

                    $(".divProfilePopup").html(html);
                    $(".divProfilePopup input[id='SearchProfileId']").val("");
                    $(".with-search").select2();
                    $(".divProfilePopup #divProfileSearch").modal("show");
                }
            });
        });

        $(document).on("click", "#divProfileSearch .btn-profile-choose", function () {
            var id = $(this).data("id");
            var name = $(this).data("name");
            $("input[name='ProfileId']").val(id).trigger('change');
            $("input[name='SearchProfileName']").val(name);
        });

        $(document).on("click", ".btn-del-profile", function () {
            $("input[name='ProfileId']").val("");
            $("input[name='SearchProfileName']").val("");
        });

        $("#btn-search").click(function () {
            var searchData = GetDataFormSearch();
            //Save localStorage
            localStorage.setItem('pageId-' + currentPageId, searchData);

            let searchDeleted = $("#isDeleted").val();
            var typePage = "@ViewBag.Type";
            if (typePage == 'Contact') {
                if (searchDeleted == "false") {
                    $("#th-actived").removeClass("display-none");
                    PaggingServerSide_Profile("@CurrentUrl");
                } else {
                    $("#th-action").removeClass("display-none");
                    SearchContactDeleted("@CurrentUrl");
                }
            }
            else if (typePage == 'Opportunity') {
                PaggingServerSide_Profile_Opportunity("@CurrentUrl");
            }
            else if (typePage == 'Lead') {
                PaggingServerSide_Profile_Lead("@CurrentUrl");
            }
            else if (typePage == 'Competitor') {
                PaggingServerSide_Profile_Competitor("@CurrentUrl");
            }
            else {
                PaggingServerSide_Profile("@CurrentUrl");


            }
        });
        //set default form submit => click btn-search button
        $("#frmSearch").submit(function (e) {
            e.preventDefault();
            $("#btn-search").trigger("click");
        });

        //trigger enter click when fill in search form
        $(document).on("keyup", "#frmSearch", function (evt) {
            if (evt.keyCode == 13) {
                $("#btn-search").trigger("click");
            }
        });
        $(document).on("click", "#btn-sendEmailPopup", function () {
            var $btn = $(this);
            $btn.button('loading');
            var cc = $(this).data('email');
            $.ajax({
                type: "GET",
                url: net5apidomain + "api/Customer/Profile/EmailConfig?senderName=" + "@currentUserName",
                success: function (res) {
                    if (res.isSuccess) {
                        $('#ToEmail').val(res.data.toEmail);
                        $('#Subject').val(res.data.subject);
                        $('#EmailContent').val(res.data.emailContent);
                        $('#Cc').val(cc);
                        CKEDITOR.instances.EmailContent.setData(res.data.emailContent);

                        $("#sendEmailPopup").modal("show");
                        $btn.button('reset');
                    }
                    else {
                        $btn.button('reset');
                        alertPopup(false, res.message);
                    }
                }
            });
        });
        $(document).on("click", "#btn-popup-send", function () {
            var $btn = $(this);
            $btn.button('loading');
            var form_data = $("#frmSearch").serializeArray();
            var obj = {};
            var search = {};
            $.each(form_data, function (index, val) {

                search[val.name] = val.value;
                //$.extend(true, search, obj)
            });
            var CustomerAccountGroupCodeList = $('#CustomerAccountGroupCode').val();
            if (CustomerAccountGroupCodeList != null && CustomerAccountGroupCodeList.length > 0) {
                var customerAccountGroupCode = {};

                customerAccountGroupCode['CustomerAccountGroupCode'] = CustomerAccountGroupCodeList;
                //$.extend(true, search, customerAccountGroupCode);
                search["CustomerAccountGroupCode"] = customerAccountGroupCode;
            }

            //Nhóm kháchh hàng
            var CustomerGroupCodeList = $('#CustomerGroupCode').val();
            if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                var CustomerGroupCode = {};

                CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                search["CustomerGroupCode"] = CustomerGroupCode;
            }

            var formData = new FormData();
            var data = {};
            var subject = $('#Subject').val();
            var emailContent = $('#EmailContent').val();
            var cc = $('#Cc').val();
            data["Subject"] = subject;
            data["EmailContent"] = emailContent;
            data["SearchProfileData"] = search;
            data["Cc"] = cc;
            console.log(data);
            $.ajax({
                type: "POST",
                url: "/Customer/Profile/RequestCreateECC",
                //url: "https://localhost:44367/api/Customer/Profile/RequestCreateECC",
                data: data,
                //contentType: false,
                //processData: false,
                success: function (res) {
                    if (res.Success) {
                        alertPopup(true, "Gửi yêu cầu thành công");
                        $('#ToEmail').val("");
                        $('#Subject').val("");
                        $('#EmailContent').val("");
                        $('#Attachment').val("");
                        $btn.button('reset');
                        $("#sendEmailPopup").modal("hide");
                    }
                    else {
                        alertPopup(false, res.Message);
                        $btn.button('reset');
                    }
                }
            });
        });
        //common date
        $(document).on("change", ".ddl-common-date", function () {
            var cssClass = $(this).data('id');
            var commonDate = $(this).val();
            $.ajax({
                type: "POST",
                url: "/Utilities/CommonDate/Get",
                data: {
                    CommonDate: commonDate
                },
                success: function (jsonData) {
                    $("." + cssClass + " input[name='" + cssClass + "FromDate']").val(jsonData.FromDate);
                    $("." + cssClass + " input[name='" + cssClass + "ToDate']").val(jsonData.ToDate);
                    if (jsonData.FromDate != '' && jsonData.FromDate != '') {
                        $("." + cssClass + " input[name='" + cssClass + "FromDate']").prop("disabled", true);
                        $("." + cssClass + " input[name='" + cssClass + "ToDate']").prop("disabled", true);
                    } else {
                        $("." + cssClass + " input[name='" + cssClass + "FromDate']").prop("disabled", false);
                        $("." + cssClass + " input[name='" + cssClass + "ToDate']").prop("disabled", false);
                    }

                }
            });
        });

        function PaggingServerSide_Profile_Competitor(controller) {
            $(".panel-search-result").show();
            $(".dataTableServerSide").DataTable().clear().destroy();
            $(".dataTableServerSide")
                .on('processing.dt', function (e, settings, processing) {
                    ISD.LoadingDataTable(processing, '.dataTableServerSide');
                })
                .DataTable({
                    proccessing: true,
                    serverSide: true,
                    paging: true,
                    scrollX: true,
                    //scrollCollapse: true,
                    //fixedColumns: {
                    //    leftColumns: 3
                    //},
                    ajax: {
                        type: 'POST',
                        url: "/" + controller + "/_PaggingServerSide",
                        contentType: 'application/json',
                        data: function (d) {
                            var arr = {};
                            //data search
                            var data = $("#frmSearch").serializeArray();
                            $.each(data, function (index, val) {
                                var obj = {};
                                obj[val.name] = val.value;
                                $.extend(true, arr, obj);
                            });
                            //data datatable (draw, start, length,...)
                            $.extend(true, arr, d);
                            //chi nhánh
                            var storeList = $('#StoreId').val();
                            if (storeList != null && storeList.length > 0) {
                                var store = {};
                                store['StoreId'] = storeList;
                                $.extend(true, arr, store);
                            }
                            //Tỉnh/ thành phố
                            var provinceIdList = $('#ProvinceId').val();
                            if (provinceIdList != null && provinceIdList.length > 0) {
                                var provinceId = {};
                                provinceId['ProvinceId'] = provinceIdList;
                                $.extend(true, arr, provinceId);
                            }
                            //phân nhóm khách hàng
                            var customerAccountGroupList = $('#CustomerAccountGroupCode').val();
                            if (customerAccountGroupList != null && customerAccountGroupList.length > 0) {
                                var customerAccountGroup = {};
                                customerAccountGroup['CustomerAccountGroupCode'] = customerAccountGroupList;
                                $.extend(true, arr, customerAccountGroup);
                            }
                            //Nhóm kháchh hàng
                            var CustomerGroupCodeList = $('#CustomerGroupCode').val();
                            if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                                var CustomerGroupCode = {};

                                CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                                $.extend(true, arr, CustomerGroupCode);
                            }

                            return JSON.stringify(arr);
                        }

                    },

                    columns: [
                        //1.
                        {
                            "data": "STT",
                            "className": "text-center"
                        },
                        //2.
                        {
                            "data": "ProfileCode",
                            "className": "text-center",
                            "orderable": true,
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (row["IsExtendFromAccount"] == true) {
                                        return data + " <a href='/Customer/Profile/Edit/?id=" + row['ProfileId'] + "&ProfileType=Account' title='Xem dữ liệu khách hàng'> <i class='fa fa-eye'></i></a>";
                                    }
                                    else {
                                        return data;
                                    }
                                }
                                return data;
                            }
                        },
                        //Tên đối thủ
                        {
                            "data": "ProfileName",
                            "orderable": true,
                            "render": function (data, type, row) {
                                if (('@ViewBag.Type' === 'Competitor' || '@ViewBag.Type' === 'Opportunity') && row["ProfileShortName"]) {
                                    data = row["ProfileShortName"];
                                }
                                if (type === "display" || type === "filter") {
                                    if ("@isHasPermissionEdit" == "True" || "@isHasPermissionEdit" == "true") {
                                        return "<a href='/Customer/Profile/Edit/?id=" + row['ProfileId'] + "&ProfileType=@ViewBag.Type' title='" + data + "'>" + data + "</a>"
                                    }
                                    else {
                                        return data;
                                    }
                                }
                                return data;
                            }
                        },
                        //Người đại diện pháp luật
                        {
                            "data": "Text4",
                            "orderable": false,
                        },
                        //Mã số thuế
                        {
                            "data": "TaxNo",
                            "orderable": false,
                        },
                        //Vốn pháp định
                        {
                            "data": "Number1",
                            "orderable": true,
                            "className": "text-right",
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (data == "" || data == null) {
                                        return "";
                                    }
                                    return formatCurrency(data);
                                }
                                return data;
                            }
                        },
                        //Độ phủ thị trường
                        {
                            "data": "Number2",
                            "orderable": true,
                            "className": "text-right",
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (data == "" || data == null) {
                                        return "";
                                    }
                                    return formatCurrency(data);
                                }
                                return data;
                            }
                        },
                        //Web
                        {
                            "data": "Website",
                            "className": "text-left",
                            "orderable": false
                        },
                        //Loại hình
                        //{
                        //    "data": "CompetitorType",
                        //    "orderable": false,
                        //},
                        //Email
                        {
                            "data": "Email",
                            "className": "@cssOpportunityClass",
                            "orderable": true,
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (data != null && data != "") {
                                        return "<a href='mailto:" + data + "'>" + data + "</a>"
                                    }
                                }
                                return data;
                            }
                        },
                        //SĐT bàn
                        {
                            "data": "Phone1",
                            "className": "text-right",
                            "orderable": false
                        },
                        //SĐT di động
                        @*{
                            "data": "Phone2",
                            "className": "text-right @cssOpportunityClass",
                            "orderable": false
                        },*@

                        //Địa chỉ
                        {
                            "data": "Address",
                            "className": "@cssContactClass",
                            "orderable": false,
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (data != null && data != "") {
                                        return "<a href='http://maps.google.co.uk/maps?q=" + data + "' target='_blank'>" + data + "</a>"
                                    }
                                }
                                return data;
                            }
                        },

                        ////Ghi chú
                        //{
                        //    "data": "Note",
                        //    "orderable": false,
                        //},
                        ////Người tạo
                        //{
                        //    "data": "CreateUser"
                        //},
                        ////Ngày tạo
                        //{
                        //    "data": "CreateTime",
                        //    "orderable": true,
                        //    "className": "text-center",
                        //    "render": function (data, type, row) {
                        //        // If display or filter data is requested, format the date
                        //        if (type === "display" || type === "filter") {

                        //            return moment(data).format("DD/MM/YYYY HH:mm:ss");
                        //        }

                        //        return data;
                        //    }
                        //},
                        ////Trạng thái
                        //{
                        //    "data": "Actived",
                        //    "orderable": false,
                        //    "className": "text-center",
                        //    "render": function (data, type, row) {
                        //        if (type === "display" || type === "filter") {
                        //            if (data == true) {
                        //                return "<i class='fa fa-check true-icon'></i>";
                        //            }
                        //            else {
                        //                return "<i class='fa fa-close false-icon'></i>";
                        //            }
                        //        }
                        //        return data;
                        //    }
                        //},

                    ],
                    destroy: true,
                    language: {
                        sProcessing: "Đang xử lý...",
                        sLengthMenu: "Xem _MENU_ mục",
                        sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                        sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                        sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                        sInfoFiltered: "(được lọc từ _MAX_ mục)",
                        sInfoPostFix: "",
                        sSearch: "Tìm nội dung:",
                        sUrl: "",
                        oPaginate: {
                            sFirst: "Đầu",
                            sPrevious: "&laquo;",
                            sNext: "&raquo;",
                            sLast: "Cuối"
                        }
                    },
                    columnDefs: [
                        { targets: [0, 1], visible: true },
                        { targets: 'no-sort', visible: false }
                    ],
                    "sDom": '<"top"flp>rt<"bottom"ip><"clear">',
                    "initComplete": function (settings, json) {
                        var table = $('#DataTables_Table_0').DataTable();
                        var countResult = table.data().count();
                        var isCreateRequest = $('#isCreateRequest').val();
                        if (countResult > 0 && isCreateRequest == 'True') {
                            $('#btn-sendEmailPopup').show();
                        }
                        else {
                            $('#btn-sendEmailPopup').hide();
                        }
                    }
                });

        }

        function PaggingServerSide_Profile_Lead(controller) {
            $(".panel-search-result").show();
            $(".dataTableServerSide").DataTable().clear().destroy();
            $(".dataTableServerSide")
                .on('processing.dt', function (e, settings, processing) {
                    ISD.LoadingDataTable(processing, '.dataTableServerSide');
                })
                .DataTable({
                    proccessing: true,
                    serverSide: true,
                    paging: true,
                    scrollX: true,
                    //scrollCollapse: true,
                    //fixedColumns: {
                    //    leftColumns: 3
                    //},
                    ajax: {
                        type: 'POST',
                        url: "/" + controller + "/_PaggingServerSide",
                        contentType: 'application/json',
                        data: function (d) {
                            var arr = {};
                            //data search
                            var data = $("#frmSearch").serializeArray();
                            $.each(data, function (index, val) {
                                var obj = {};
                                obj[val.name] = val.value;
                                $.extend(true, arr, obj);
                            });
                            //data datatable (draw, start, length,...)
                            $.extend(true, arr, d);
                            //chi nhánh
                            var storeList = $('#StoreId').val();
                            if (storeList != null && storeList.length > 0) {
                                var store = {};
                                store['StoreId'] = storeList;
                                $.extend(true, arr, store);
                            }

                            //Tỉnh/ thành phố
                            var provinceIdList = $('#ProvinceId').val();
                            if (provinceIdList != null && provinceIdList.length > 0) {
                                var provinceId = {};
                                provinceId['ProvinceId'] = provinceIdList;
                                $.extend(true, arr, provinceId);
                            }
                            //phân nhóm khách hàng
                            var customerAccountGroupList = $('#CustomerAccountGroupCode').val();
                            if (customerAccountGroupList != null && customerAccountGroupList.length > 0) {
                                var customerAccountGroup = {};
                                customerAccountGroup['CustomerAccountGroupCode'] = customerAccountGroupList;
                                $.extend(true, arr, customerAccountGroup);
                            }

                            //Nhóm kháchh hàng
                            var CustomerGroupCodeList = $('#CustomerGroupCode').val();
                            if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                                var CustomerGroupCode = {};

                                CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                                $.extend(true, arr, CustomerGroupCode);
                            }
                            return JSON.stringify(arr);
                        }

                    },

                    columns: [
                        //1.
                        {
                            "data": "STT",
                            "className": "text-center"
                        },
                        //2.
                        {
                            "data": "ProfileCode",
                            "className": "text-center",
                            "orderable": true,
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (row["IsExtendFromAccount"] == true) {
                                        return data + " <a href='/Customer/Profile/Edit/?id=" + row['ProfileId'] + "&ProfileType=Account' title='Xem dữ liệu khách hàng'> <i class='fa fa-eye'></i></a>";
                                    }
                                    else {
                                        return data;
                                    }
                                }
                                return data;
                            }
                        },
                        //Tên dự án
                        {
                            "data": "ProfileName",
                            "orderable": true,
                            "render": function (data, type, row) {
                                if (('@ViewBag.Type' === 'Competitor' || '@ViewBag.Type' === 'Opportunity') && row["ProfileShortName"]) {
                                    data = row["ProfileShortName"];
                                }
                                if (type === "display" || type === "filter") {
                                    if ("@isHasPermissionEdit" == "True" || "@isHasPermissionEdit" == "true") {
                                        return "<a href='/Customer/Profile/Edit/?id=" + row['ProfileId'] + "&ProfileType=@ViewBag.Type' title='" + data + "'>" + data + "</a>"
                                    }
                                    else {
                                        return data;
                                    }
                                }
                                return data;
                            }
                        },
                        //Chủ đầu tư
                        {
                            "data": "Investor",
                            "orderable": false,
                        },
                        //Thiết kế
                        {
                            "data": "Design",
                            "orderable": false,
                        },
                        //Khu vực
                        {
                            "data": "SaleOfficeName",
                            "orderable": false,
                        },
                        //Tỉnh/thành phố
                        {
                            "data": "ProvinceName",
                            "orderable": false,
                        },
                        //Loại hình
                        {
                            "data": "OpportunityType",
                            "orderable": false,
                        },
                        //Quy mô
                        {
                            "data": "ProjectGabarit",
                            "className": "text-right",
                            "orderable": false,
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (data == "" || data == null) {
                                        return "";
                                    }
                                    return formatCurrency(data);
                                }
                                return data;
                            }
                        },
                        //ĐVT
                        {
                            "data": "OpportunityUnit",
                            "orderable": false,
                        },
                        //Thời gian bắt đầu
                        {
                            "data": "StartDate",
                            "orderable": false,
                            "render": function (data, type, row) {
                                // If display or filter data is requested, format the date
                                if (type === "display" || type === "filter") {
                                    if (data) {
                                        return "Tháng " + moment(data).format("MM") + "/Năm " + moment(data).format("YYYY");
                                    }
                                }

                                return "";
                            }
                        },
                        //Hình ảnh
                        {
                            "data": "ImageUrl",
                            "className": "text-center",
                            "orderable": false,
                            "render": function (data, type, row) {
                                // If display or filter data is requested, format the date
                                if (type === "display" || type === "filter") {
                                    if (data) {
                                        return '<img style="width:140px!important;height:100px!important;" src="/Upload/Profile/thum/' + data + '">';
                                    }
                                }

                                return "";
                            }
                        },
                        //NV cập nhật
                        {
                            "data": "LastEditByName",
                            "orderable": false,
                        },
                        //Ghi chú
                        {
                            "data": "Note",
                            "orderable": false,
                        },
                    ],
                    destroy: true,
                    language: {
                        sProcessing: "Đang xử lý...",
                        sLengthMenu: "Xem _MENU_ mục",
                        sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                        sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                        sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                        sInfoFiltered: "(được lọc từ _MAX_ mục)",
                        sInfoPostFix: "",
                        sSearch: "Tìm nội dung:",
                        sUrl: "",
                        oPaginate: {
                            sFirst: "Đầu",
                            sPrevious: "&laquo;",
                            sNext: "&raquo;",
                            sLast: "Cuối"
                        }
                    },
                    columnDefs: [
                        { targets: [0, 1], visible: true },
                        { targets: 'no-sort', visible: false }
                    ],
                    "sDom": '<"top"flp>rt<"bottom"ip><"clear">',
                    "initComplete": function (settings, json) {
                        var table = $('#DataTables_Table_0').DataTable();
                        var countResult = table.data().count();
                        var isCreateRequest = $('#isCreateRequest').val();
                        if (countResult > 0 && isCreateRequest == 'True') {
                            $('#btn-sendEmailPopup').show();
                        }
                        else {
                            $('#btn-sendEmailPopup').hide();
                        }
                    }
                });

        }

        function PaggingServerSide_Profile_Opportunity(controller) {
            $(".panel-search-result").show();
            $(".dataTableServerSide").DataTable().clear().destroy();
            $(".dataTableServerSide")
                .on('processing.dt', function (e, settings, processing) {
                    ISD.LoadingDataTable(processing, '.dataTableServerSide');
                })
                .DataTable({
                    proccessing: true,
                    serverSide: true,
                    paging: true,
                    scrollX: true,
                    //scrollCollapse: true,
                    //fixedColumns: {
                    //    leftColumns: 3
                    //},
                    ajax: {
                        type: 'POST',
                        url: "/" + controller + "/_PaggingServerSide",
                        contentType: 'application/json',
                        data: function (d) {
                            var arr = {};
                            //data search
                            var data = $("#frmSearch").serializeArray();
                            $.each(data, function (index, val) {
                                var obj = {};
                                obj[val.name] = val.value;
                                $.extend(true, arr, obj);
                            });
                            //data datatable (draw, start, length,...)
                            $.extend(true, arr, d);
                            //chi nhánh
                            var storeList = $('#StoreId').val();
                            if (storeList != null && storeList.length > 0) {
                                var store = {};
                                store['StoreId'] = storeList;
                                $.extend(true, arr, store);
                            }

                            //Tỉnh/ thành phố
                            var provinceIdList = $('#ProvinceId').val();
                            if (provinceIdList != null && provinceIdList.length > 0) {
                                var provinceId = {};
                                provinceId['ProvinceId'] = provinceIdList;
                                $.extend(true, arr, provinceId);
                            }
                            //phân nhóm khách hàng
                            var customerAccountGroupList = $('#CustomerAccountGroupCode').val();
                            if (customerAccountGroupList != null && customerAccountGroupList.length > 0) {
                                var customerAccountGroup = {};
                                customerAccountGroup['CustomerAccountGroupCode'] = customerAccountGroupList;
                                $.extend(true, arr, customerAccountGroup);
                            }

                            //Nhóm kháchh hàng
                            var CustomerGroupCodeList = $('#CustomerGroupCode').val();
                            if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                                var CustomerGroupCode = {};

                                CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                                $.extend(true, arr, CustomerGroupCode);
                            }
                            return JSON.stringify(arr);
                        }

                    },

                    columns: [
                        //1.
                        {
                            "data": "STT",
                            "className": "text-center"
                        },
                        //2.
                        {
                            "data": "ProfileCode",
                            "className": "text-center",
                            "orderable": true,
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (row["IsExtendFromAccount"] == true) {
                                        return data + " <a href='/Customer/Profile/Edit/?id=" + row['ProfileId'] + "&ProfileType=Account' title='Xem dữ liệu khách hàng'> <i class='fa fa-eye'></i></a>";
                                    }
                                    else {
                                        if ('@isHasPermissionPrintProfile' == "True" || '@isHasPermissionPrintProfile' == 'true') {
                                            return data + ' <div style="display: inline-flex; position: relative"><a class="btn-printStockDelivery" href = "/Reports/ManagementReport/Index/' + data + '" title = "In thông tin dự án" target = "_blank"><i class="fa fa-print"></i></a ></div >';
                                        } else {
                                            return data;
                                        }
                                    }
                                }
                                return data;
                            }
                        },
                        //Tên dự án
                        {
                            "data": "ProfileName",
                            "orderable": true,
                            "render": function (data, type, row) {
                                if (('@ViewBag.Type' === 'Competitor' || '@ViewBag.Type' === 'Opportunity') && row["ProfileShortName"]) {
                                    data = row["ProfileShortName"];
                                }
                                if (type === "display" || type === "filter") {
                                    if ("@isHasPermissionEdit" == "True" || "@isHasPermissionEdit" == "true") {
                                        return "<a href='/Customer/Profile/Edit/?id=" + row['ProfileId'] + "&ProfileType=@ViewBag.Type' title='" + data + "'>" + data + "</a>"
                                    }
                                    else {
                                        return data;
                                    }
                                }
                                return data;
                            }
                        },
                        //Chủ đầu tư
                        {
                            "data": "Investor",
                            "orderable": false,
                        },
                        //Giá trị
                        {
                            "data": "ProjectValue",
                            "className": "text-right",
                            "orderable": false,
                            "render": function (data, type, row) {
                                // If display or filter data is requested, format the date
                                if (type === "display" || type === "filter") {
                                    if (data) {
                                        return data.toFixed(2);
                                    }
                                }

                                return "";
                            }
                        },
                        //Quy mô
                        {
                            "data": "ProjectGabarit",
                            "className": "text-right",
                            "orderable": false,
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    if (data == "" || data == null) {
                                        return "";
                                    }
                                    return formatCurrency(data);
                                }
                                return data;
                            }
                        },
                        //Tình trạng dự án
                        {
                            "data": "ProjectStatus",
                            "orderable": false,
                        },
                        //Đơn vị tính
                        {
                            "data": "OpportunityUnit",
                            "orderable": false,
                        },
                        //NV kinh doanh
                        {
                            "data": "PersonInCharge",
                            "orderable": false,
                        },
                        //Tỉnh/thành
                        {
                            "data": "ProvinceName",
                            "orderable": false,
                        },
                        //Ghi chú
                        {
                            "data": "Note",
                            "orderable": false,
                        },
                        //Ngày kết thúc
                        {
                            "data": "EndDate",
                            "orderable": false,
                            "render": function (data, type, row) {
                                // If display or filter data is requested, format the date
                                if (type === "display" || type === "filter") {
                                    if (data) {
                                        return "Tháng " + moment(data).format("MM") + "/Năm " + moment(data).format("YYYY");
                                    }
                                }

                                return "";
                            }
                        },
                    ],
                    destroy: true,
                    language: {
                        sProcessing: "Đang xử lý...",
                        sLengthMenu: "Xem _MENU_ mục",
                        sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                        sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                        sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                        sInfoFiltered: "(được lọc từ _MAX_ mục)",
                        sInfoPostFix: "",
                        sSearch: "Tìm nội dung:",
                        sUrl: "",
                        oPaginate: {
                            sFirst: "Đầu",
                            sPrevious: "&laquo;",
                            sNext: "&raquo;",
                            sLast: "Cuối"
                        }
                    },
                    columnDefs: [
                        { targets: [0, 1], visible: true },
                        { targets: 'no-sort', visible: false }
                    ],
                    "sDom": '<"top"flp>rt<"bottom"ip><"clear">',
                    "initComplete": function (settings, json) {
                        var table = $('#DataTables_Table_0').DataTable();
                        var countResult = table.data().count();
                        var isCreateRequest = $('#isCreateRequest').val();
                        if (countResult > 0 && isCreateRequest == 'True') {
                            $('#btn-sendEmailPopup').show();
                        }
                        else {
                            $('#btn-sendEmailPopup').hide();
                        }
                    }
                });
        }

        function PaggingServerSide_Profile(controller) {
            $(".panel-search-result").show();
            $(".dataTableServerSide").DataTable().clear().destroy();
            $(".dataTableServerSide")
                .on('processing.dt', function (e, settings, processing) {
                    ISD.LoadingDataTable(processing, '.dataTableServerSide');
                })
                .DataTable({
                    proccessing: true,
                    serverSide: true,
                    paging: true,
                    scrollX: true,
                    //scrollCollapse: true,
                    //fixedColumns: {
                    //    leftColumns: 3
                    //},
                    ajax: {
                        type: 'POST',
                        url: "/" + controller + "/_PaggingServerSide",
                        contentType: 'application/json',
                        data: function (d) {
                            var arr = {};
                            //data search
                            var data = $("#frmSearch").serializeArray();
                            $.each(data, function (index, val) {
                                var obj = {};
                                obj[val.name] = val.value;
                                $.extend(true, arr, obj);
                            });
                            //data datatable (draw, start, length,...)
                            $.extend(true, arr, d);
                            //chi nhánh
                            var storeList = $('#StoreId').val();
                            if (storeList != null && storeList.length > 0) {
                                var store = {};
                                store['StoreId'] = storeList;
                                $.extend(true, arr, store);
                            }

                            //Tỉnh/ thành phố
                            var provinceIdList = $('#ProvinceId').val();
                            if (provinceIdList != null && provinceIdList.length > 0) {
                                var provinceId = {};
                                provinceId['ProvinceId'] = provinceIdList;
                                $.extend(true, arr, provinceId);
                            }
                            //phân nhóm khách hàng
                            var customerAccountGroupList = $('#CustomerAccountGroupCode').val();
                            if (customerAccountGroupList != null && customerAccountGroupList.length > 0) {
                                var customerAccountGroup = {};
                                customerAccountGroup['CustomerAccountGroupCode'] = customerAccountGroupList;
                                $.extend(true, arr, customerAccountGroup);
                            }

                            //Nhóm kháchh hàng
                            var CustomerGroupCodeList = $('#CustomerGroupCode').val();
                            if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                                var CustomerGroupCode = {};

                                CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                                $.extend(true, arr, CustomerGroupCode);
                            }
                            return JSON.stringify(arr);
                        }

                    },

                    columns: [
                    //1.
                    {
                        "data": "STT",
                        "className": "text-center"
                    },
                    //2.
                    {
                        "data": "ProfileCode",
                        "className": "text-center",
                        "orderable": true,
                        "render": function (data, type, row) {
                            if (type === "display" || type === "filter") {
                                if (row["IsExtendFromAccount"] == true) {
                                    return data + " <a href='/Customer/Profile/Edit/?id=" + row['ProfileId'] + "&ProfileType=Account' title='Xem dữ liệu khách hàng'> <i class='fa fa-eye'></i></a>";
                                }
                                else {
                                    if ('@isHasPermissionPrintProfile' == "True" || '@isHasPermissionPrintProfile' == 'true') {
                                        return data + ' <div style="display: inline-flex; position: relative"><a class="btn-printStockDelivery" data-url = "/Reports/CustomerProfile/Index/" data-id="' + data + '" title = "In thông tin khách hàng"><i class="fa fa-print"></i></a ></div >';
                                    } else {
                                        return data;
                                    }
                                }
                            }
                            return data;
                        }
                    },
                    //3.
                    {
                        "data": "ProfileForeignCode",
                        "className": "text-center @cssNotAccountClass",
                        "orderable": true,
                    },
                    //3b.
                    @*{
                        "data": "Title",
                        "className": "@cssNotAccountClass",
                        "orderable": false,
                    },*@
                    //4.
                    {
                        "data": "ProfileName",
                        "orderable": true,
                        "render": function (data, type, row) {
                            if (('@ViewBag.Type' === 'Competitor' || '@ViewBag.Type' === 'Opportunity') && row["ProfileShortName"]) {
                                data = row["ProfileShortName"];
                            }
                            if (type === "display" || type === "filter") {
                                if ("@isHasPermissionEdit" == "True" || "@isHasPermissionEdit" == "true") {
                                    return "<a href='/Customer/Profile/Edit/?id=" + row['ProfileId'] + "&ProfileType=@ViewBag.Type' title='" + data + "'>" + data + "</a>"
                                }
                                else {
                                    return data;
                                }
                            }
                            return data;
                        }
                    },
                    //5.
                    {
                        "data": "isForeignCustomer",
                        "className": "@cssNotAccountClass",
                        "orderable": false,
                        "render": function (data, type, row) {
                            if (data === false) {
                                return "@Html.Raw(LanguageResource.Domestic)";
                            }
                            else if (data === true) {
                                return "@Html.Raw(LanguageResource.Foreign)";
                            }
                            return "";
                        }
                    },
                    //6.
                    {
                        "data": "CompanyName",
                        "className": "@cssClass @cssOpportunityClass @cssCompetitorClass",
                        "orderable": true,
                        "render": function (data, type, row) {
                            if ((type === "display" || type === "filter") && data != null) {
                                if ("@isHasPermissionEdit" == "True" || "@isHasPermissionEdit" == "true") {
                                    return "<a href='/Customer/Profile/Edit/" + row['CompanyId'] + "' title='" + data + "'>" + data + "</a>"
                                }
                                else {
                                    return data;
                                }
                            }
                            return data;
                        }
                    },
                    //7.
                    {
                        "data": "CustomerTypeName",
                        "orderable": true,
                        "className": "@cssNotAccountClass"
                    },
                    //8.
                    {
                        "data": "Phone",
                        "className": "text-right @cssOpportunityClass",
                        "orderable": false
                    },
                    //9.
                    @*{
                        "data": "ContactName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //10.
                    {
                        "data": "ContactPhone",
                        "className": "text-right",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },*@
                    //11.
                    {
                        "data": "Email",
                        "className": "@cssOpportunityClass",
                        "orderable": true,
                        "render": function (data, type, row) {
                            if (type === "display" || type === "filter") {
                                if (data != null && data != "") {
                                    return "<a href='mailto:" + data + "'>" + data + "</a>"
                                }
                            }
                            return data;
                        }
                    },
                    //12.
                    {
                        "data": "Address",
                        "className": "@cssContactClass",
                        "orderable": false,
                        "render": function (data, type, row) {
                            if (type === "display" || type === "filter") {
                                if (data != null && data != "") {
                                    return "<a href='http://maps.google.co.uk/maps?q=" + data + "' target='_blank'>" + data + "</a>"
                                }
                            }
                            return data;
                        }
                    },
                    //13.
                    {
                        "data": "CustomerSourceName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //14.
                    {
                        "data": "SaleOrgName",
                        "orderable": false,
                        "className": "@cssCompetitorClass"
                    },
                    //15.
                    {
                        "data": "Age",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //16.
                    {
                        "data": "TaxNo",
                        "orderable": false,
                        "className": "text-right",
                        "className": "@cssNotAccountClass"
                    },
                    //17.
                    {
                        "data": "CustomerGroupName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //18.
                    {
                        "data": "CustomerCareerName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //19.
                    {
                        "data": "SaleOfficeName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //20.
                    {
                        "data": "Note",
                        "orderable": false,
                    },
                    //21.
                    {
                        "data": "PersonInCharge",
                        "className": "@cssContactClass @cssCompetitorClass",
                        "orderable": false,
                    },
                    //22.
                    {
                        "data": "RoleInCharge",
                        "className": "@cssContactClass @cssCompetitorClass",
                        "orderable": false,
                    },
                    //23.
                    {
                        "data": "CreateUser"
                    },
                    //24.
                    {
                        "data": "CreateTime",
                        "orderable": true,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === "display" || type === "filter") {

                                return moment(data).format("DD/MM/YYYY HH:mm:ss");
                            }

                            return data;
                        }
                    },
                    //25.
                    {
                        "data": "Actived",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            if (type === "display" || type === "filter") {
                                if (data == true) {
                                    return "<i class='fa fa-check true-icon'></i>";
                                }
                                else {
                                    return "<i class='fa fa-close false-icon'></i>";
                                }
                            }
                            return data;
                        }
                        },
                        {
                            "data": "ProfileId",
                            "orderable": false,
                            "className": "display-none",
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    return "<a class='btn btn-danger btn-restore' data-current-url='Customer/Profile' data-id='" + data + "' data-item-name='" + row['ProfileName'] + "' onclick=\"$(this).button('loading')\"><i class='fa fa-undo'></i> Khôi phục</a>";
                                }
                                return "";
                            }
                        },
                    //{
                    //    "data": "ProfileId",
                    //    "orderable": false,
                    //    "className": "text-center",
                    //    "render": function (data, type, row) {
                    //        if (type === "display" || type === "filter") {
                    //            return "<a class=\"btn btn-default btn-edit\" href=\"/Customer/Profile/Edit/" + data + "\" onclick=\"$(this).button('loading')\"><i class='fa fa-pencil'></i> Sửa</a>";
                    //        }
                    //        return "";
                    //    }
                    //}
                    ],
                    destroy: true,
                    language: {
                        sProcessing: "Đang xử lý...",
                        sLengthMenu: "Xem _MENU_ mục",
                        sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                        sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                        sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                        sInfoFiltered: "(được lọc từ _MAX_ mục)",
                        sInfoPostFix: "",
                        sSearch: "Tìm nội dung:",
                        sUrl: "",
                        oPaginate: {
                            sFirst: "Đầu",
                            sPrevious: "&laquo;",
                            sNext: "&raquo;",
                            sLast: "Cuối"
                        }
                    },
                    columnDefs: [
                        { targets: [0, 1], visible: true },
                        { targets: 'no-sort', visible: false }
                    ],
                    "sDom": '<"top"flp>rt<"bottom"ip><"clear">',
                    "initComplete": function (settings, json) {
                        var table = $('#DataTables_Table_0').DataTable();
                        var countResult = table.data().count();
                        var isCreateRequest = $('#isCreateRequest').val();
                        if (countResult > 0 && isCreateRequest == 'True') {
                            $('#btn-sendEmailPopup').show();
                        }
                        else {
                            $('#btn-sendEmailPopup').hide();
                        }
                    }
                });

        }

        function SearchContactDeleted(controller) {
            $(".dataTableServerSide").DataTable().clear().destroy();
            $(".dataTableServerSide")
                .on('processing.dt', function (e, settings, processing) {
                    ISD.LoadingDataTable(processing, '.dataTableServerSide');
                })
                .DataTable({
                    proccessing: true,
                    serverSide: true,
                    paging: true,
                    scrollX: true,
                    //scrollCollapse: true,
                    //fixedColumns: {
                    //    leftColumns: 3
                    //},
                    ajax: {
                        type: 'POST',
                        url: "/" + controller + "/SearchContactDeleted",
                        contentType: 'application/json',
                        data: function (d) {
                            var arr = {};
                            //data search
                            var data = $("#frmSearch").serializeArray();
                            $.each(data, function (index, val) {
                                var obj = {};
                                obj[val.name] = val.value;
                                $.extend(true, arr, obj);
                            });
                            //data datatable (draw, start, length,...)
                            $.extend(true, arr, d);
                            //chi nhánh
                            var storeList = $('#StoreId').val();
                            if (storeList != null && storeList.length > 0) {
                                var store = {};
                                store['StoreId'] = storeList;
                                $.extend(true, arr, store);
                            }

                            //Tỉnh/ thành phố
                            var provinceIdList = $('#ProvinceId').val();
                            if (provinceIdList != null && provinceIdList.length > 0) {
                                var provinceId = {};
                                provinceId['ProvinceId'] = provinceIdList;
                                $.extend(true, arr, provinceId);
                            }
                            //phân nhóm khách hàng
                            var customerAccountGroupList = $('#CustomerAccountGroupCode').val();
                            if (customerAccountGroupList != null && customerAccountGroupList.length > 0) {
                                var customerAccountGroup = {};
                                customerAccountGroup['CustomerAccountGroupCode'] = customerAccountGroupList;
                                $.extend(true, arr, customerAccountGroup);
                            }

                            //Nhóm kháchh hàng
                            var CustomerGroupCodeList = $('#CustomerGroupCode').val();
                            if (CustomerGroupCodeList != null && CustomerGroupCodeList.length > 0) {
                                var CustomerGroupCode = {};

                                CustomerGroupCode['CustomerGroupCode'] = CustomerGroupCodeList;
                                $.extend(true, arr, CustomerGroupCode);
                            }
                            return JSON.stringify(arr);
                        }
                    },
                    columns: [
                    //1.
                    {
                        "data": "STT",
                        "className": "text-center"
                    },
                    //2.
                    {
                        "data": "ProfileCode",
                        "className": "text-center",
                        "orderable": true,
                    },
                    //3.
                    {
                        "data": "ProfileForeignCode",
                        "className": "text-center @cssNotAccountClass",
                        "orderable": true,
                    },
                    //3b.
                    @*{
                        "data": "Title",
                        "className": "@cssNotAccountClass",
                        "orderable": false,
                    },*@
                    //4.
                    {
                        "data": "ProfileName",
                        "orderable": true,
                    },
                    //5.
                    {
                        "data": "isForeignCustomer",
                        "className": "@cssNotAccountClass",
                        "orderable": false,
                        "render": function (data, type, row) {
                            if (data === false) {
                                return "@Html.Raw(LanguageResource.Domestic)";
                            }
                            else if (data === true) {
                                return "@Html.Raw(LanguageResource.Foreign)";
                            }
                            return "";
                        }
                    },
                    //6.
                    {
                        "data": "CompanyName",
                        "className": cssClass,
                        "orderable": true,
                        "render": function (data, type, row) {
                            if ((type === "display" || type === "filter") && data != null) {
                                if ("@isHasPermissionEdit" == "True" || "@isHasPermissionEdit" == "true") {
                                    return "<a href='/Customer/Profile/Edit/" + row['CompanyId'] + "' title='" + data + "'>" + data + "</a>"
                                }
                                else {
                                    return data;
                                }
                            }
                            return data;
                        }
                    },
                    //7.
                    {
                        "data": "CustomerTypeName",
                        "orderable": true,
                        "className": "@cssNotAccountClass"
                    },
                    //8.
                    {
                        "data": "Phone",
                        "className": "text-right",
                        "orderable": false
                    },
                    //9.
                    @*{
                        "data": "ContactName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //10.
                    {
                        "data": "ContactPhone",
                        "className": "text-right",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },*@
                    //11.
                    {
                        "data": "Email",
                        "orderable": true,
                        "render": function (data, type, row) {
                            if (type === "display" || type === "filter") {
                                if (data != null && data != "") {
                                    return "<a href='mailto:" + data + "'>" + data + "</a>"
                                }
                            }
                            return data;
                        }
                    },
                    //12.
                    {
                        "data": "Address",
                        "className": "@cssContactClass",
                        "orderable": false,
                        "render": function (data, type, row) {
                            if (type === "display" || type === "filter") {
                                if (data != null && data != "") {
                                    return "<a href='http://maps.google.co.uk/maps?q=" + data + "' target='_blank'>" + data + "</a>"
                                }
                            }
                            return data;
                        }
                    },
                    //13.
                    {
                        "data": "CustomerSourceName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //14.
                    {
                        "data": "SaleOrgName",
                        "orderable": false,
                    },
                    //15.
                    {
                        "data": "Age",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //16.
                    {
                        "data": "TaxNo",
                        "orderable": false,
                        "className": "text-right",
                        "className": "@cssNotAccountClass"
                    },
                    //17.
                    {
                        "data": "CustomerGroupName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //18.
                    {
                        "data": "CustomerCareerName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //19.
                    {
                        "data": "SaleOfficeName",
                        "orderable": false,
                        "className": "@cssNotAccountClass"
                    },
                    //20.
                    {
                        "data": "Note",
                        "orderable": false,
                    },
                    //21.
                    {
                        "data": "PersonInCharge",
                        "className": "@cssContactClass",
                        "orderable": false,
                    },
                    //22.
                    {
                        "data": "RoleInCharge",
                        "className": "@cssContactClass",
                        "orderable": false,
                    },
                    //23.
                    {
                        "data": "CreateUser"
                    },
                    //24.
                    {
                        "data": "CreateTime",
                        "orderable": true,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === "display" || type === "filter") {
                                return moment(data).format("DD/MM/YYYY HH:mm:ss");
                            }
                            return data;
                        }
                    },
                    //25.
                    {
                        "data": "Actived",
                        "orderable": false,
                        "className": "display-none",
                        "render": function (data, type, row) {
                            if (type === "display" || type === "filter") {
                                if (data == true) {
                                    return "<i class='fa fa-check true-icon'></i>";
                                }
                                else {
                                    return "<i class='fa fa-close false-icon'></i>";
                                }
                            }
                            return data;
                        }
                    },
                        {
                            "data": "ProfileId",
                            "orderable": false,
                            "className": "text-center @cssPermisRestore",
                            "render": function (data, type, row) {
                                if (type === "display" || type === "filter") {
                                    return "<a class='btn btn-danger btn-restore' data-current-url='Customer/Profile' data-id='" + data + "' data-item-name='" + row['ProfileName'] + "' onclick=\"$(this).button('loading')\"><i class='fa fa-undo'></i> Khôi phục</a>";
                                }
                                return "";
                            }
                        },
                    ],
                    destroy: true,
                    language: {
                        sProcessing: "Đang xử lý...",
                        sLengthMenu: "Xem _MENU_ mục",
                        sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                        sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                        sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                        sInfoFiltered: "(được lọc từ _MAX_ mục)",
                        sInfoPostFix: "",
                        sSearch: "Tìm nội dung:",
                        sUrl: "",
                        oPaginate: {
                            sFirst: "Đầu",
                            sPrevious: "&laquo;",
                            sNext: "&raquo;",
                            sLast: "Cuối"
                        }
                    },
                    columnDefs: [
                        { targets: [0, 1], visible: true },
                        { targets: 'no-sort', visible: false }
                    ],
                    "sDom": '<"top"flp>rt<"bottom"ip><"clear">'
                });

        }

        $(document).on("change", "#ProvinceId", function () {
            var formdata = $("#frmSearch").serializeArray();
            var data = {};
            //Tỉnh/ thành phố
            var provinceIdList = $('#ProvinceId').val();
            if (provinceIdList != null && provinceIdList.length > 0) {
                var provinceId = {};
                provinceId['ProvinceId'] = provinceIdList;
                $.extend(true, data, provinceId);
            }
            $.ajax({
                type: "POST",
                url: "/MasterData/District/GetDistrictByMultiProvince",
                data: formdata,
                success: function (jsonData) {
                    $("#DistrictId").html("");
                    $("#DistrictId").append("<option value=''>@LanguageResource.Dropdownlist_All</option>");
                    $.each(jsonData, function (index, value) {
                        $("#DistrictId").append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                    });

                    $("#DistrictId").trigger("change");
                }
            });
        });
        //change ward
        $(document).on("change", "select[name='DistrictId']", function () {
            var DistrictId = $(this).val();

            $.ajax({
                type: "POST",
                url: "/MasterData/Ward/GetWardByDistrict",
                data: {
                    DistrictId: DistrictId
                },
                success: function (jsonData) {
                    var $ward = $("#WardId")
                    $ward.html("");
                    $ward.append("<option value=''>@LanguageResource.Dropdownlist_All</option>");
                    $.each(jsonData, function (index, value) {
                        $ward.append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                    });
                }
            });
        });

        //Change nguồn khách hàng
        $(document).on("change", "select[name='CustomerSourceCode']", function () {
            let customerSourceCode = $(this).val();
            $.ajax({
                type: "POST",
                url: "/MasterData/Store/GetStoreByCustomerSource",
                data: {
                    CustomerSourceCode: customerSourceCode
                },
                success: function (jsonData) {
                    var $store = $("#StoreId");
                    $store.html("");
                    @* $store.append("<option value=''>@LanguageResource.Dropdownlist_Choose</option>");*@
                    $.each(jsonData, function (index, value) {
                        $store.append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                    });
                }
            });
        })

        //gộp mã CRM
        $(document).on("click", "#btn-merge-profile", function () {
            $('.divMergeProfile input[name="ProfileCodeNeedToMerge"]').val("");
            $('.divMergeProfile input[name="ProfileCodeNeedToMerge"]').inputFilter(function (value) {
                return /^-?\d*$/.test(value);
            });

            $(".profile-code-duplicate").each(function (index, value) {
                if (index === 0) {
                    $('input[name="MergeList[' + index + ']"]').val("");
                    $('input[name="MergeList[' + index + ']"]').inputFilter(function (value) {
                        return /^-?\d*$/.test(value);
                    });
                }
                else {
                    $('input[name="MergeList[' + index + ']"]').closest('.profileCode').remove();
                }
            });

            $("#btn-confirm-merge").hide();
            $("#profile-information").empty();

            $(".divMergeProfile #divMergeProfile").modal("show");
        });

        $(document).on("input keydown keyup", '.divMergeProfile input[name="ProfileCodeNeedToMerge"], .profile-code-duplicate', function () {
            $("#btn-confirm-merge").hide();
        });

        $(document).on('click', '.btn-add-profile-code', function (e) {
            var indexRow = 0;
            e.preventDefault();

            $(".profileCode").each(function (index, value) {
                indexRow = index;
            });
            indexRow++;

            var controlForm = $('.profileCodeControls:first'),
                currentEntry = $(this).parents(' .profileCode:last'),
                newEntry = $(currentEntry.clone()).appendTo(controlForm);

            newEntry.find('.profile-code-duplicate').attr('name', 'MergeList[' + indexRow + ']').val('');

            controlForm.find('.profileCode:not(:first) .btn-add-profile-code')
                .removeClass('btn-add-profile-code').addClass('btn-remove-profile-code')
                .removeClass('btn-success').addClass('btn-danger')
                .html('<span class="glyphicon glyphicon-minus"></span>');

            $('input[name="MergeList[' + indexRow + ']"').inputFilter(function (value) {
                return /^-?\d*$/.test(value);
            });
        });

        $(document).on('click', '.btn-remove-profile-code', function (e) {
            $(this).parents('.profileCode:last').remove();

            $(".profileCode").each(function (index, value) {
                $(this).find('.profile-code-duplicate').attr("name", "MergeList[" + index + "]");
            });
            e.preventDefault();
            return false;
        });

        function alertModalMergeProfilePopup(message) {
            $("#divMergeProfile #divAlertPopup .alert-message").html("");
            setModalMessage("#divAlertPopup", message);
            $('#divAlertPopup').show();
        }

        function setModalMessage(div, message) {
            if (Array.isArray(message)) {
                var arr = [];
                $.each(message, function (i, item) {
                    arr[i] = { err: item }
                    $(div + " .modal-alert-message").append("<li>" + arr[i].err + "</li>");
                });
            }
            else {
                $(div + " .modal-alert-message").html(message);
            }
        }

        //check thông tin khách hàng trước khi gộp mã
        $(document).on("click", "#btn-check-information", function () {
            var $btn = $(this);
            var ProfileCodeNeedToMerge = $(".divMergeProfile input[name='ProfileCodeNeedToMerge']").val();
            if (!ProfileCodeNeedToMerge) {
                alertModalMergeProfilePopup("Vui lòng nhập mã CRM cần gộp!");
            }
            else {
                var FirstMergeProfileCode = $('input[name="MergeList[0]"]').val();
                if (!FirstMergeProfileCode) {
                    alertModalMergeProfilePopup("Vui lòng nhập mã CRM trùng thông tin!");
                }
                else {
                    $btn.button("loading");
                    $.ajax({
                        type: "POST",
                        url: '/Customer/Profile/CheckProfileInformation',
                        data: $("#frmMergeProfile").serialize(),
                        success: function (responseData) {
                            if (responseData.Success) {
                                var htmlContent = "";
                                //THÔNG TIN KHÁCH HÀNG CẦN GỘP
                                htmlContent += '<div class="table-responsive" style="margin-bottom:20px;">';
                                htmlContent += '<span style="margin-bottom:10px;"><b>THÔNG TIN KHÁCH HÀNG CẦN GỘP</b></span>';
                                htmlContent += '<div style="overflow-x:scroll;">'
                                htmlContent += '<table class="table table-bordered table-striped table-hover" >';
                                htmlContent += '<thead class="isd-table-header">';
                                htmlContent += '<tr>';
                                htmlContent += '<th>@LanguageResource.CRM_ID</th>';
                                htmlContent += '<th>@LanguageResource.Profile_ProfileForeignCode</th>';
                                htmlContent += '<th>@LanguageResource.Profile_ProfileName</th>';
                                htmlContent += '<th>@LanguageResource.Profile_ProfileShortName</th>';
                                htmlContent += '<th>@LanguageResource.Profile_IsForeignCustomer</th>';
                                htmlContent += '<th>@LanguageResource.Profile_CustomerTypeCode</th>';
                                htmlContent += '<th>@LanguageResource.Configuration_Phone</th>';
                                htmlContent += '<th>@LanguageResource.Profile_Email</th>';
                                htmlContent += '<th>@LanguageResource.Profile_Address</th>';
                                htmlContent += '<th>@LanguageResource.Profile_CustomerSourceCode</th>';
                                htmlContent += '<th>@LanguageResource.StoreId</th>';
                                if (responseData.ProfileNeedToMerge && responseData.ProfileNeedToMerge.CustomerTypeCode === "B") {
                                    htmlContent += '<th>@LanguageResource.Profile_TaxNo</th>';
                                }
                                else if (responseData.ProfileNeedToMerge && responseData.ProfileNeedToMerge.CustomerTypeCode === "C") {
                                    htmlContent += '<th>@LanguageResource.Profile_Age</th>';
                                }
                                htmlContent += '</tr>';
                                htmlContent += '</thead>';
                                htmlContent += '<tbody>';

                                if (responseData.ProfileNeedToMerge && responseData.ProfileNeedToMerge.ProfileId !== "00000000-0000-0000-0000-000000000000") {
                                    htmlContent += '<tr>';
                                    htmlContent += '<td>' + responseData.ProfileNeedToMerge.ProfileCode + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.ProfileForeignCode ? responseData.ProfileNeedToMerge.ProfileForeignCode : "") + '</td>';
                                    htmlContent += '<td>' + responseData.ProfileNeedToMerge.ProfileName + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.ProfileShortName ? responseData.ProfileNeedToMerge.ProfileShortName : "") + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.isForeignCustomer ? "Nước ngoài" : "Trong nước") + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.CustomerTypeName ? responseData.ProfileNeedToMerge.CustomerTypeName : "") + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.Phone ? responseData.ProfileNeedToMerge.Phone : "") + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.Email ? responseData.ProfileNeedToMerge.Email : "") + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.Address ? responseData.ProfileNeedToMerge.Address : "") + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.CustomerSourceName ? responseData.ProfileNeedToMerge.CustomerSourceName : "") + '</td>';
                                    htmlContent += '<td>' + (responseData.ProfileNeedToMerge.CreateAtSaleOrgName ? responseData.ProfileNeedToMerge.CreateAtSaleOrgName : "") + '</td>';
                                    if (responseData.ProfileNeedToMerge.CustomerTypeCode === "B") {
                                        htmlContent += '<td>' + (responseData.ProfileNeedToMerge.TaxNo ? responseData.ProfileNeedToMerge.TaxNo : "") + '</td>';
                                    }
                                    else if (responseData.ProfileNeedToMerge.CustomerTypeCode === "C") {
                                        htmlContent += '<td>' + (responseData.ProfileNeedToMerge.Age ? responseData.ProfileNeedToMerge.Age : "") + '</td>';
                                    }
                                    htmlContent += '</tr>';
                                }
                                else {
                                    htmlContent += '<td class="text-center" colspan="8">Không tìm thấy dòng nào phù hợp</td>';
                                }

                                htmlContent += '</tbody>';
                                htmlContent += '</table>';
                                htmlContent += '</div>';
                                htmlContent += '</div>';

                                //THÔNG TIN KHÁCH HÀNG BỊ TRÙNG
                                htmlContent += '<div class="table-responsive">';
                                htmlContent += '<span style="margin-bottom:10px;"><b>THÔNG TIN KHÁCH HÀNG BỊ TRÙNG</b></span>';
                                htmlContent += '<div style="overflow-x:scroll;">'
                                htmlContent += '<table class="table table-bordered table-striped table-hover">';
                                htmlContent += '<thead class="isd-table-header">';
                                htmlContent += '<tr>';
                                htmlContent += '<th>@LanguageResource.CRM_ID</th>';
                                htmlContent += '<th>@LanguageResource.Profile_ProfileForeignCode</th>';
                                htmlContent += '<th>@LanguageResource.Profile_ProfileName</th>';
                                htmlContent += '<th>@LanguageResource.Profile_ProfileShortName</th>';
                                htmlContent += '<th>@LanguageResource.Profile_IsForeignCustomer</th>';
                                htmlContent += '<th>@LanguageResource.Profile_CustomerTypeCode</th>';
                                htmlContent += '<th>@LanguageResource.Configuration_Phone</th>';
                                htmlContent += '<th>@LanguageResource.Profile_Email</th>';
                                htmlContent += '<th>@LanguageResource.Profile_Address</th>';
                                htmlContent += '<th>@LanguageResource.Profile_CustomerSourceCode</th>';
                                htmlContent += '<th>@LanguageResource.StoreId</th>';
                                if (responseData.ProfileNeedToMerge && responseData.ProfileNeedToMerge.CustomerTypeCode === "B") {
                                    htmlContent += '<th>@LanguageResource.Profile_TaxNo</th>';
                                }
                                else if (responseData.ProfileNeedToMerge && responseData.ProfileNeedToMerge.CustomerTypeCode === "C") {
                                    htmlContent += '<th>@LanguageResource.Profile_Age</th>';
                                }
                                htmlContent += '</tr>';
                                htmlContent += '</thead>';
                                htmlContent += '<tbody>';
                                if (responseData.ProfileDuplicateList && responseData.ProfileDuplicateList.length > 0) {
                                    for (var i = 0; i < responseData.ProfileDuplicateList.length; i++) {
                                        htmlContent += '<tr>';
                                        htmlContent += '<td>' + responseData.ProfileDuplicateList[i].ProfileCode + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].ProfileForeignCode ? responseData.ProfileDuplicateList[i].ProfileForeignCode : "") + '</td>';
                                        htmlContent += '<td>' + responseData.ProfileDuplicateList[i].ProfileName + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].ProfileShortName ? responseData.ProfileDuplicateList[i].ProfileShortName : "") + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].isForeignCustomer ? "Nước ngoài" : "Trong nước") + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].CustomerTypeName ? responseData.ProfileDuplicateList[i].CustomerTypeName : "") + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].Phone ? responseData.ProfileDuplicateList[i].Phone : "") + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].Email ? responseData.ProfileDuplicateList[i].Email : "") + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].Address ? responseData.ProfileDuplicateList[i].Address : "") + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].CustomerSourceName ? responseData.ProfileDuplicateList[i].CustomerSourceName : "") + '</td>';
                                        htmlContent += '<td>' + (responseData.ProfileDuplicateList[i].CreateAtSaleOrgName ? responseData.ProfileDuplicateList[i].CreateAtSaleOrgName : "") + '</td>';
                                        if (responseData.ProfileDuplicateList[i].CustomerTypeCode === "B") {
                                            htmlContent += '<td>' + (responseData.ProfileNeedToMerge.TaxNo ? responseData.ProfileNeedToMerge.TaxNo : "") + '</td>';
                                        }
                                        else if (responseData.ProfileDuplicateList[i].CustomerTypeCode === "C") {
                                            htmlContent += '<td>' + (responseData.ProfileNeedToMerge.Age ? responseData.ProfileNeedToMerge.Age : "") + '</td>';
                                        }
                                        htmlContent += '</tr>';
                                    }
                                }
                                else {
                                    htmlContent += '<td class="text-center" colspan="8">Không tìm thấy dòng nào phù hợp</td>';
                                }
                                htmlContent += '</tbody>';
                                htmlContent += '</table>';
                                htmlContent += '</div>';
                                htmlContent += '</div>';
                                $("#profile-information").html(htmlContent);

                                //style
                                $(".divMergeProfile .table th, .divMergeProfile .table td").css("white-space", "nowrap");

                                if (responseData.ProfileNeedToMerge && responseData.ProfileNeedToMerge.ProfileId !== "00000000-0000-0000-0000-000000000000"
                                    && responseData.ProfileDuplicateList && responseData.ProfileDuplicateList.length > 0)
                                {
                                    $("#btn-confirm-merge").show();
                                }
                            }
                            $btn.button("reset");
                        }
                    });
                }
            }
        });

        //thực hiện gộp mã
        $(document).on("click", "#btn-confirm-merge", function () {
            var $btn = $(this);

            $btn.button("loading");
            $.ajax({
                type: "POST",
                url: '/Customer/Profile/MergeProfile',
                data: $("#frmMergeProfile").serialize(),
                success: function (responseData) {
                    if (responseData.Success) {
                        alertPopup(true, responseData.Message);
                        $(".divMergeProfile #divMergeProfile").modal("hide");
                    }
                    else {
                        alertModalMergeProfilePopup(responseData.Message);
                    }
                    $btn.button("reset");
                }
            });
        });


        //option tìm kiếm field không có data
        function OptionSearchNull(fieldName,fieldTitle) {
            $(".divFindFieldIsNull .modal-title").html(fieldTitle);
            $(".divFindFieldIsNull #NameFieldSearchNull").val(fieldName);
            let option = $("#frmSearch #" + fieldName).val();
            $(".divFindFieldIsNull #OptionFieldIsNull").val(option).change();
            $(".divFindFieldIsNull #divFindFieldIsNull").modal("show");
        }
        $(document).on("click", "#btn-confirm-field-option", function () {
            let fieldOption = $(".divFindFieldIsNull #OptionFieldIsNull").val();
            let fieldName = $(".divFindFieldIsNull #NameFieldSearchNull").val();
            let indexIsNull = fieldName.indexOf("IsNull");
            let oldField = fieldName.substring(0, indexIsNull);
            if (fieldOption == "true") {
                $("#frmSearch #" + fieldName).val(true);
                $("#frmSearch #" + oldField).val("Không có dữ liệu");
                $("#frmSearch #" + oldField).prop("disabled", true);
                $("#frmSearch #" + oldField + "All").prop("disabled", true);
            } else {
                if (fieldOption == "false") {
                    $("#frmSearch #" + fieldName).val(false);
                    $("#frmSearch #" + oldField).val("Có dữ liệu");
                    $("#frmSearch #" + oldField).prop("disabled", true);
                    $("#frmSearch #" + oldField + "All").prop("disabled", true);
                } else {
                    $("#frmSearch #" + fieldName).val("");
                    $("#frmSearch #" + oldField).val("");
                    $("#frmSearch #" + oldField).prop("disabled", false);
                    $("#frmSearch #" + oldField + "All").prop("disabled", false);
                }
            }
            $(".divFindFieldIsNull #divFindFieldIsNull").modal("hide");
        })

        $(document).on("change", "#isCreateRequest", function () {
            var isCreateRequestText = $("#isCreateRequest option:selected").text();
            $("#CreateRequestAll").val(isCreateRequestText);

            //nếu chọn đang yêu cầu/đã tạo => thì mới mở ra cho nhập 2 ô này, nếu không tạo => Disabled 2 field này đi
            var isCreateRequest = $("#isCreateRequest option:selected").val();
            if (isCreateRequest.toLowerCase() === "true" || isCreateRequest.toLowerCase() === "false") {
                $("#CreateRequestTimeFrom").prop("disabled", false);
                $("#CreateRequestTimeTo").prop("disabled", false);
                $(".createRequestTime").show();
            }
            else {
                $("#CreateRequestTimeFrom").prop("disabled", true);
                $("#CreateRequestTimeTo").prop("disabled", true);
                $(".createRequestTime").hide();
            }
        });

        //Set event click for button restore
        $(document).on("click", ".btn-restore", function () {
            var $btn = $(this);

            var controller = $btn.data("current-url");
            var itemName = $btn.data("item-name");
            var id = $btn.data("id");
            var callBackFunction = $btn.data("restore-success-call-back");

            $("#divRestorePopup").modal("show");
            //set title
            $("#divRestorePopup .modal-title .item-name").html(itemName);
            //set text
            var text = $("#divRestorePopup .alert-message").html();
            //Replace new text
            text = text.replace(/"([^"]*)"/g, '"' + itemName + '"');
            text = String.format(text, itemName);
            //Show new text
            $("#divRestorePopup .alert-message").html(text);

            //get id, controller
            $("#divRestorePopup #id").val(id);
            $("#divRestorePopup #controllerRestore").val(controller);

            if (callBackFunction) {
                $("#divRestorePopup #btn-confirm-restore").data("restore-success-call-back", callBackFunction);
            }
        });

        //click button confirm
        $(document).on("click", "#btn-confirm-restore", function () {
            var $btn = $(".btn-restore");

            var controller = $('form[id="frmRestoreConfirm"] #controllerRestore').val();
            //Attribute restore-success-call-back:
            var successfunction = $(this).data("restore-success-call-back");

            $.ajax({
                type: "POST",
                url: "/" + controller + "/Restore",
                data: $('form[id="frmRestoreConfirm"]').serialize(),
                success: function (jsonData) {
                    $btn.button('reset');
                    $("#divRestorePopup").modal("hide");
                    if (jsonData.Success == true) {
                        console.log(successfunction);
                        //Gọi function này khi khôi phục thành công
                        if (successfunction) {
                            window[successfunction]();
                        } else {
                            //mặc định trigger button search, thông báo thành công
                            if ($("#btn-search").length > 0) {
                                $("#btn-search").trigger("click");
                            }
                            else {
                                $(".btn-search").trigger("click");
                            }
                            alertPopup(true, jsonData.Data);
                        }
                    }
                    else {
                        if (jsonData.Data != null && jsonData.Data != "") {
                            alertPopup(false, jsonData.Data);
                        }
                    }
                },
                error: function (xhr, status, error) {
                    $btn.button('reset');
                    $("#divRestorePopup").modal("hide");
                    alertPopup(false, xhr.responseText);
                }
            });
        });

        //click button cancel
        $(document).on("click", "#btn-cancel-restore", function () {
            var $btn = $(".btn-restore");

            $btn.button('reset');
            $("#divRestorePopup").modal("hide");
        });
        //click outside popup
        $('#divRestorePopup').on('hidden.bs.modal', function () {
            var $btn = $(".btn-restore");

            $btn.button('reset');
            $("#divRestorePopup").modal("hide");
        });
    </script>
    <script>
        //Get data of form search name function is required
        function GetDataFormSearch() {
            //Get value in search form
            var formdata = $("#frmSearch").serializeArray();
            var data = {};
            $(formdata).each(function (index, obj) {
                data[obj.name] = obj.value;
            });

            //Chi nhánh
            var StoreIdList = $('#StoreId').val();
            if (StoreIdList != null && StoreIdList.length > 0) {
                var storeId = {};

                storeId['StoreId'] = StoreIdList;
                $.extend(true, data, storeId);
            }

            //Tỉnh/ thành phố
            var provinceIdList = $('#ProvinceId').val();
            if (provinceIdList != null && provinceIdList.length > 0) {
                var provinceId = {};
                provinceId['ProvinceId'] = provinceIdList;
                $.extend(true, data, provinceId);
            }
            //Phân nhóm KH
            var CustomerAccountGroupCodeList = $('#CustomerAccountGroupCode').val();
            if (CustomerAccountGroupCodeList != null && CustomerAccountGroupCodeList.length > 0) {
                var customerAccountGroupCode = {};

                customerAccountGroupCode['CustomerAccountGroupCode'] = CustomerAccountGroupCodeList;
                $.extend(true, data, customerAccountGroupCode);
            }
            //Filter
            var FiltersList = $('.Filters').val();
            if (FiltersList != null && FiltersList.length > 0) {
                var filters = {};

                filters['Filters'] = FiltersList;
                $.extend(true, data, filters);
            }
            return JSON.stringify(data);
        }
        //Fill data to form search name function is required
        /*
        function FillToInput(recentSearch) {
            var Filters = recentSearch.Filters;
            if (Array.isArray(Filters)) {
                $(".Filters").val(Filters);
                $(".Filters").trigger('change');
            }
            if (recentSearch.CheckAll) {
                $("#CheckAll").prop('checked', true);
            }
            var StoreId = recentSearch.StoreId;
            if (Array.isArray(StoreId)) {
                $("#StoreId").val(StoreId);
                $("#StoreId").trigger('change');
            }
            var CustomerAccountGroupCode = recentSearch.CustomerAccountGroupCode;
            if (Array.isArray(CustomerAccountGroupCode)) {
                $("#CustomerAccountGroupCode").val(CustomerAccountGroupCode);
                $("#CustomerAccountGroupCode").trigger('change');
            }
            $("#Actived").val(recentSearch.Actived).change();
            if (recentSearch.CompanyId) {
                $("#CompanyId").val(recentSearch.CompanyId).change();
            }
            $("#CreateByCode").val(recentSearch.CreateByCode).change();
            $("#CreateCommonDate").val(recentSearch.CreateCommonDate).change();
            if (recentSearch.CustomerCareerCode) {
                $("#CustomerCareerCode").val(recentSearch.CustomerCareerCode).change();
            }
            if (recentSearch.CustomerGroupCode) {
                $("#CustomerGroupCode").val(recentSearch.CustomerGroupCode).change();
            }

            if (recentSearch.CustomerSourceCode) {
                $("#CustomerSourceCode").val(recentSearch.CustomerSourceCode).change();
            }
            if (recentSearch.CustomerTypeCode) {
                $("#CustomerTypeCode").val(recentSearch.CustomerTypeCode).change();
            }
            if (recentSearch.DistrictId) {
                $("#DistrictId").val(recentSearch.DistrictId).change();
            }
            if (recentSearch.ProvinceId) {
                $("#ProvinceId").val(recentSearch.ProvinceId).change();
            }

            $("#RolesCode").val(recentSearch.RolesCode).change();
            if (recentSearch.SalesEmployeeCode) {
                $("#SalesEmployeeCode").val(recentSearch.SalesEmployeeCode).change();
            }
            if (recentSearch.WardId) {
                $("#WardId").val(recentSearch.WardId).change();
            }

            $("#Address").val(recentSearch.Address);
            if (recentSearch.AddressIsNull != "") {
                $("#AddressIsNull").val(recentSearch.AddressIsNull);
                $("#Address").prop("disabled", true);
                if (recentSearch.AddressIsNull == "true") {
                    $("#Address").val("Không có dữ liệu");
                } else {
                    $("#Address").val("Có dữ liệu");
                }

            }

            if (recentSearch.CustomerCareerCodeIsNull != "") {
                $("#CustomerCareerCodeIsNull").val(recentSearch.CustomerCareerCodeIsNull);
                $("#CustomerCareerCode").prop("disabled", true);
            }
            if (recentSearch.CustomerGroupCodeIsNull != "") {
                $("#CustomerGroupCodeIsNull").val(recentSearch.CustomerGroupCodeIsNull);
                $("#CustomerGroupCode").prop("disabled", true);
            }
            if (recentSearch.CustomerSourceCodeIsNull != "") {
                $("#CustomerSourceCodeIsNull").val(recentSearch.CustomerSourceCodeIsNull);
                $("#CustomerSourceCode").prop("disabled", true);
            }
            if (recentSearch.CustomerTypeCodeIsNull != "") {
                $("#CustomerTypeCodeIsNull").val(recentSearch.CustomerTypeCodeIsNull);
                $("#CustomerTypeCode").prop("disabled", true);
            }/
            if (recentSearch.DistrictIdIsNull != "") {
                $("#DistrictIdIsNull").val(recentSearch.DistrictIdIsNull);
                $("#DistrictId").prop("disabled", true);
            }

            $("#Email").val(recentSearch.Email);
            if (recentSearch.EmailIsNull != "") {
                $("#EmailIsNull").val(recentSearch.EmailIsNull);
                $("#Email").prop("disabled", true);
                if (recentSearch.EmailIsNull == "true") {
                    $("#Email").val("Không có dữ liệu");
                } else {
                    $("#Email").val("Có dữ liệu");
                }

            }

            $("#Phone").val(recentSearch.Phone);
            $("#SearchProfileCode").val(recentSearch.ProfileCode);
            $("#ProfileSearchName").val(recentSearch.ProfileName);
            if (recentSearch.ProvinceIdIsNull != "") {
                $("#ProvinceIdIsNull").val(recentSearch.ProvinceIdIsNull);
                $("#ProvinceId").prop("disabled", true);
            }
            if (recentSearch.SalesEmployeeCodeIsNull != "") {
                $("#SalesEmployeeCodeIsNull").val(recentSearch.SalesEmployeeCodeIsNull);
                $("#SalesEmployeeCode").prop("disabled", true);
            }

            $("#SearchProfileForeignCode").val(recentSearch.SearchProfileForeignCode);
            if (recentSearch.SearchProfileForeignCodeIsNull != "") {
                $("#SearchProfileForeignCodeIsNull").val(recentSearch.SearchProfileForeignCodeIsNull);
                $("#SearchProfileForeignCode").prop("disabled", true);
                if (recentSearch.SearchProfileForeignCodeIsNull == "true") {
                    $("#SearchProfileForeignCode").val("Không có dữ liệu");
                } else {
                    $("#SearchProfileForeignCode").val("Có dữ liệu");
                }

            }

            $("#TaxNo").val(recentSearch.TaxNo);
            if (recentSearch.TaxNoIsNull != "") {
                $("#TaxNoIsNull").val(recentSearch.TaxNoIsNull);
                $("#TaxNo").prop("disabled", true);
                if (recentSearch.TaxNoIsNull == "true") {
                    $("#TaxNo").val("Không có dữ liệu");
                } else {
                    $("#TaxNo").val("Có dữ liệu");
                }

            }

            if (recentSearch.WardIdIsNull != "") {
                $("#WardIdIsNull").val(recentSearch.WardIdIsNull);
                $("#WardIdIs").prop("disabled", true);
            }
            $("#CreateFromDate").val(recentSearch.CreateFromDate);
            $("#CreateToDate").val(recentSearch.CreateFromDate);
            if (Type == 'Contact') {
                $("#ProfileId").val(recentSearch.ProfileId);
                $("#ProfileName").val(recentSearch.SearchProfileName);
                $("#Age").val(recentSearch.Age).change();
            }
        }
        */


    </script>
    @if (ViewBag.Type == "Competitor")
    {
        <script>
            //Vốn pháp định
            $(document).on("input", ".Number1", function () {
                var projectValue = $(this).val();
                //alert(projectValue);
                if (projectValue) {
                    var value = parseFloat(projectValue);
                    $("#Number1ValueDisplay").html(formatCurrency(value) + '  Tỷ');
                }
                else {
                    $("#Number1ValueDisplay").text('');
                }
            });
            //Độ phủ thị trường
            $(document).on("input", ".Number2", function () {
                var projectValue = $(this).val();
                //alert(projectValue);
                if (projectValue) {
                    var value = parseFloat(projectValue);
                    $("#Number2ValueDisplay").html(formatCurrency(value) + '%');
                }
                else {
                    $("#Number2ValueDisplay").text('');
                }
            });
        </script>



    }
    @if (ViewBag.Type == ConstProfileType.Opportunity)
    {
        <script>
            $(document).on("click", "#btn-export-spec", function () {
                var arr = {};
                var data = $("#frmSearch").serializeArray();
                $.each(data, function (index, val) {
                    var obj = {};
                    obj[val.name] = val.value;
                    $.extend(true, arr, obj)
                });
                //Cửa hàng
                var storeList = $('#StoreId').val();
                if (storeList != null && storeList.length > 0) {
                    var store = {};
                    store['StoreId'] = storeList;
                    $.extend(true, arr, store);
                }

                ISD.Download("/Reports/ProfileOpportunityReport/ExportExcel", arr);
                var $btn = $(this);
                $btn.button('loading');
                setTimeout(function () {
                    $btn.button('reset');
                }, 7000);
            });
        </script>
    }
    else if (ViewBag.Type == ConstProfileType.Lead)
    {
        <script>
            $(document).on("click", "#btn-export-lead", function (e) {
                e.preventDefault;
                var arr = {};
                var data = $("#frmSearch").serializeArray();
                $.each(data, function (index, val) {
                    var obj = {};
                    obj[val.name] = val.value;
                    $.extend(true, arr, obj)
                });
                //Cửa hàng
                var storeList = $('#StoreId').val();
                if (storeList != null && storeList.length > 0) {
                    var store = {};
                    store['StoreId'] = storeList;
                    $.extend(true, arr, store);
                }

                ISD.Download("/Customer/Profile/ExportLead", arr);
                var $btn = $(this);
                $btn.button('loading');
                setTimeout(function () {
                    $btn.button('reset');
                }, 7000);
            });
        </script>
    }
    else if (ViewBag.Type == ConstProfileType.Account || ViewBag.Type == ConstProfileType.Contact)
    {

        <script>

            $(document).on("click", ".btn-printStockDelivery", function () {
                $data = $(this).data("id");
                $("#divPrintProfilePopup #frmPrintProfile input[name='Id']").val($data);
                $("#divPrintProfilePopup #popup-print-profile").modal("show");
            })

            $(document).on("click", "#btn-popup-print-profile", function () {
                var $Id = $("#divPrintProfilePopup #popup-print-profile input[name='Id']").val();
                var $CompanyCode = $("#divPrintProfilePopup #popup-print-profile select[name='CompanyCode']").val();
                var $Year = $("#divPrintProfilePopup #popup-print-profile input[name='Year']").val();
                $("#divPrintProfilePopup #popup-print-profile").modal("hide");
                window.open("/Reports/CustomerProfile?Id=" + $Id + "&CompanyCode=" + $CompanyCode + "&Year=" + $Year, '_blank');
            })

            $("#CustomerAccountGroupCodeAll").click(function () {
                if ($("#CustomerAccountGroupCodeAll").is(':checked')) {
                    $("#CustomerAccountGroupCode > option").prop("selected", "selected");
                    $("#CustomerAccountGroupCode").trigger("change");
                } else {
                    $("#CustomerAccountGroupCode > option").removeAttr("selected");
                    $("#CustomerAccountGroupCode").trigger("change");
                }
            });

            $("#CustomerGroupCodeAll").click(function () {
                if ($("#CustomerGroupCodeAll").is(':checked')) {
                    $("#CustomerGroupCode > option").prop("selected", "selected");
                    $("#CustomerGroupCode").trigger("change");
                } else {
                    $("#CustomerGroupCode > option").removeAttr("selected");
                    $("#CustomerGroupCode").trigger("change");
                }
            });

        </script>
    }

} 