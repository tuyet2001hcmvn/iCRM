@model ProfileViewModel
@using ISD.Core
@{
    var personInChargeList = (List<PersonInChargeViewModel>)ViewBag.PersonInChargeList;
    var personInCharge2List = (List<PersonInChargeViewModel>)ViewBag.PersonInCharge2List;
    var personInCharge3List = (List<PersonInChargeViewModel>)ViewBag.PersonInCharge3List;
    var personInCharge4List = (List<PersonInChargeViewModel>)ViewBag.PersonInCharge4List;
    var personInCharge5List = (List<PersonInChargeViewModel>)ViewBag.PersonInCharge5List;
    var personInCharge6List = (List<PersonInChargeViewModel>)ViewBag.PersonInCharge6List;
    var profileGroupList = Model.profileGroupList;
    var profileGroupCodeList = (List<CatalogViewModel>)ViewBag.CustomerGroupCode;
    var PersonRoleCodeList = (List<CatalogViewModel>)ViewBag.PersonRoleCodeList;
    var SalesEmployeeList = (List<SalesEmployeeViewModel>)ViewBag.EmployeeList;
    var SalesEmployeeList1 = (List<SalesEmployeeViewModel>)ViewBag.EmployeeList1;
    var SalesEmployeeList2 = (List<SalesEmployeeViewModel>)ViewBag.EmployeeList2;
    var SalesEmployeeList3 = (List<SalesEmployeeViewModel>)ViewBag.EmployeeList3;
    var SalesEmployeeList4 = (List<SalesEmployeeViewModel>)ViewBag.EmployeeList4;
    var SalesEmployeeList5 = (List<SalesEmployeeViewModel>)ViewBag.EmployeeList5;
    var SalesEmployeeList6 = (List<SalesEmployeeViewModel>)ViewBag.EmployeeList6;
    var RolesList = (List<RolesViewModel>)ViewBag.RoleList;
    var internalList = (List<ConstructionViewModel>)ViewBag.InternalList;
    var competitorList = (List<ConstructionViewModel>)ViewBag.CompetitorList;

    //Cấu hình thuộc tính
    var configList = (List<ProfileConfigModel>)ViewBag.ProfileConfig;
    var fieldCodeList = (List<string>)ViewBag.ProfileConfigCode;

    //KH có mã SAP => khóa các trường đồng bộ từ ECC qua CRM
    bool? isProfileSynced = false;
    if ((bool?)ViewBag.isEditMode == true && !string.IsNullOrEmpty(Model.ProfileForeignCode))
    {
        isProfileSynced = true;
    }

    //Danh sách spec và thi công
    //1.Spec
    var SpecList = (List<CatalogViewModel>)ViewBag.SpecList;
    //1.1. An Cường
    var ProfileSpecInternalList = (List<ConstructionViewModel>)ViewBag.ProfileSpecInternalList;
    var ProfileSpecInternalMaterialList = (List<ISDSelectGuidItem>)ViewBag.ProfileSpecInternalMaterialList;
    //1.2. Đối thủ
    var ProfileSpecCompetitorList = (List<ConstructionViewModel>)ViewBag.ProfileSpecCompetitorList;
    var ProfileSpecCompetitorMappingList = (List<ISDSelectGuidItem>)ViewBag.ProfileSpecCompetitorMappingList;

    //2. Thi công
    var ConstructionList = (List<CatalogViewModel>)ViewBag.ConstructionList;
    //2.1. An Cường
    var ProfileConstructionInternalList = (List<ConstructionViewModel>)ViewBag.ProfileConstructionInternalList;
    //2.2. Đối thủ
    var ProfileConstructionCompetitorList = (List<ConstructionViewModel>)ViewBag.ProfileConstructionCompetitorList;
    var ProfileConstructionCompetitorMappingList = (List<ISDSelectGuidItem>)ViewBag.ProfileConstructionCompetitorMappingList;

    //Danh sách khu vực của đối thủ
    var CompetitorAreaList = (List<CatalogViewModel>)ViewBag.CompetitorAreaList;
    var ProfileAreaList = (List<Profile_Catalog_MappingViewModel>)ViewBag.ProfileAreaList;

    //Danh sách ngành hàng phân phối
    var DistributionIndustryList = (List<CatalogViewModel>)ViewBag.DistributionIndustryList;
    var ProfileDistributionIndustryList = (List<Profile_Catalog_MappingViewModel>)ViewBag.ProfileDistributionIndustryList;
}

<div class="row">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="">
                <div class="panel-body">
                    <!--Liên hệ chính-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsMain)))
                    {
                        <div class="form-group">
                            <div class="col-md-3"></div>
                            <div class="col-md-9 label-wrapper">
                                @Html.CheckBox("IsMain") <label class="label-radio">@LanguageResource.PrimaryContact</label>
                            </div>
                        </div>
                    }
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.isForeignCustomer)) ||
                         fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CustomerTypeCode)))
                    {
                        <div class="form-group">
                            <!--Đối tượng-->
                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.isForeignCustomer)))
                            {
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.isForeignCustomer, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p1 => p1.isForeignCustomer)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-2">
                                    @foreach (var item in (SelectList)ViewBag.isForeignCustomer)
                                    {
                                        <label class="label-radio">
                                            @Html.RadioButton("isForeignCustomer", item.Value, item.Selected, new { @id = string.Format("Profile_General_isForeignCustomer_{0}", item.Value) })
                                            @item.Text
                                        </label>
                                    }
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(p => p.isForeignCustomer)
                            }
                            <!--Phân loại KH-->
                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CustomerTypeCode)))
                            {
                                <div class="col-md-1">
                                    @Html.LabelByPropertyNameFor(p => p.CustomerTypeCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.CustomerTypeCode)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-2">
                                    @if ((bool?)ViewBag.isEditMode == true)
                                    {
                                        foreach (var item in (SelectList)ViewBag.CustomerTypeCode)
                                        {
                                            /*
                                            <!--Nếu đã chọn Phân loại KH (B|C) theo công ty 1000 thì khi sửa ở cty 1000 disabled-->
                                            <!--Nếu chưa                                         thì khi sửa ở cty 1000 không disabled-->
                                            if (!string.IsNullOrEmpty(Model.CustomerTypeCode))
                                            {
                                                <label class="label-radio">
                                                    @Html.RadioButton("CustomerTypeCode", item.Value, item.Selected, new { @id = string.Format("Profile_General_CustomerTypeCode_{0}", item.Value), @disabled = "disabled" })
                                                    @item.Text
                                                </label>
                                                @Html.HiddenFor(p => p.CustomerTypeCode, new { @id = "Profile_General_CustomerTypeCode" })
                                                @Html.Hidden("TypeCode", Model.CustomerTypeCode)
                                            }
                                            else
                                            {
                                                <label class="label-radio">
                                                    @Html.RadioButton("CustomerTypeCode", item.Value, item.Selected, new { @id = string.Format("Profile_General_CustomerTypeCode_{0}", item.Value) })
                                                    @item.Text
                                                </label>
                                            }
                                            */

                                            var CustomerTypeCode = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.CustomerTypeCode)).FirstOrDefault();

                                            <label class="label-radio">
                                                @if (isProfileSynced == true && CustomerTypeCode.IsReadOnly == true)
                                                {
                                                    @Html.RadioButton("CustomerTypeCode", item.Value, item.Selected, new { @id = string.Format("Profile_General_CustomerTypeCode_{0}", item.Value), @disabled = "disabled" })
                                                    @Html.HiddenFor(p => p.CustomerTypeCode)
                                                }
                                                else
                                                {
                                                    @Html.RadioButton("CustomerTypeCode", item.Value, item.Selected, new { @id = string.Format("Profile_General_CustomerTypeCode_{0}", item.Value) })
                                                }
                                                @item.Text
                                            </label>
                                        }
                                    }
                                    else
                                    {
                                        foreach (var item in (SelectList)ViewBag.CustomerTypeCode)
                                        {
                                            <label class="label-radio">
                                                @Html.RadioButton("CustomerTypeCode", item.Value, item.Selected, new { @id = string.Format("Profile_General_CustomerTypeCode_{0}", item.Value) })
                                                @item.Text
                                            </label>
                                        }
                                    }
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(p => p.CustomerTypeCode)
                            }

                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>
                                (p => p.IsTopInvestor)))
                            {
                                <div class="col-md-1">
                                    @Html.LabelByPropertyNameFor(p => p.IsTopInvestor, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p1 => p1.IsTopInvestor)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-1">
                                    @if (Model != null && Model.IsTopInvestor != null)
                                    {
                                        @Html.CheckBox("IsTopInvestor", Model.IsTopInvestor.Value)
                                    }
                                    else
                                    {
                                        @Html.CheckBox("IsTopInvestor")
                                    }
                                </div>


                            }

                            @*@if (ViewBag.Type == ConstProfileType.Account)
                {
                    string check = string.Empty;
                    if (Model.isCompetitor == true)
                    {
                        check = "checked";
                    }
                    <div class="col-md-2">
                        <input type="checkbox" id="isCompetitor" name="isCompetitor" value="True" @check>
                        <label class="text-normal" for="isCompetitor"> Là đối thủ</label><br>
                    </div>
                }*@
                        </div>
                    }
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsInvestor))
                        || fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsDesigner))
                        || fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsContractor)))
                    {
                        <div class="form-group">

                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsInvestor)))
                            {
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.IsInvestor, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p1 => p1.IsInvestor)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-1">
                                    @if (Model != null && Model.IsInvestor != null)
                                    {
                                        @Html.CheckBox("IsInvestor", Model.IsInvestor.Value)
                                    }
                                    else
                                    {
                                        @Html.CheckBox("IsInvestor")
                                    }
                                </div>

                            }
                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsDesigner)))
                            {
                                <div class="col-md-2">
                                    @Html.LabelByPropertyNameFor(p => p.IsDesigner, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p1 => p1.IsDesigner)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-1">
                                    @if (Model != null && Model.IsDesigner != null)
                                    {
                                        @Html.CheckBox("IsDesigner", Model.IsDesigner.Value)
                                    }
                                    else
                                    {
                                        @Html.CheckBox("IsDesigner")
                                    }
                                </div>

                            }
                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsContractor)))
                            {
                                <div class="col-md-2">
                                    @Html.LabelByPropertyNameFor(p => p.IsContractor, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p1 => p1.IsContractor)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-1">
                                    @if (Model != null && Model.IsContractor != null)
                                    {
                                        @Html.CheckBox("IsContractor", Model.IsContractor.Value)
                                    }
                                    else
                                    {
                                        @Html.CheckBox("IsContractor")
                                    }
                                </div>

                            }

                        </div>
                    }

                    <!--Nguồn khách hàng-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CustomerSourceCode)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.CustomerSourceCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.CustomerSourceCode)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @{
                                    var CustomerSourceCode = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.CustomerSourceCode)).FirstOrDefault();

                                }
                                @if (CustomerSourceCode != null && CustomerSourceCode.IsRequired == true)
                                {
                                    @Html.RequiredIfDropDownListFor(p => p.CustomerSourceCode, null, LanguageResource.Dropdownlist_Choose)
                                }
                                else
                                {
                                    @Html.DropDownList("CustomerSourceCode", null, LanguageResource.Dropdownlist_Choose, new { @class = " form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.CustomerSourceCode)
                    }
                    <!--Chi nhánh-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CreateAtSaleOrg)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.CreateAtSaleOrg, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.CreateAtSaleOrg)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @{
                                    var CreateAtSaleOrg = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.CreateAtSaleOrg)).FirstOrDefault();

                                    if (isProfileSynced == true && CreateAtSaleOrg.IsReadOnly == true)
                                    {
                                        @Html.DropDownList("CreateAtSaleOrg", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search", @disabled = "disabled" })
                                        @Html.HiddenFor(p => p.CreateAtSaleOrg)
                                    }
                                    else
                                    {
                                        @Html.DropDownList("CreateAtSaleOrg", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    }
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.CreateAtSaleOrg)
                    }
                    <!--Mã KH, Mã SAP-->
                    @if ((bool?)ViewBag.isEditMode == true)
                    {
                        <!--Mã-->
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, int>(p => p.ProfileCode)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.ProfileCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, int>(p1 => p1.ProfileCode)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @Html.RequiredTextboxFor(p => p.ProfileCode, new { @id = "Profile_General_ProfileCode", @disabled = "disabled" })
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.ProfileCode)
                        }
                        <!--Mã SAP-->
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ProfileForeignCode)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.ProfileForeignCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.ProfileForeignCode)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @Html.RequiredTextboxFor(p => p.ProfileForeignCode, new { @id = "Profile_General_ProfileForeignCode", @readonly = "readonly" })
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.ProfileForeignCode)
                        }
                    }
                    <!--Tên-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Title)) ||
                         fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ProfileName)))
                    {
                        <div class="form-group">
                            <div id="divProfileName" class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ProfileName, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.ProfileName)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            @*<!--Danh xưng-->
                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Title)))
                {
                    <div class="profileC">
                        <div class="col-md-1">
                            @Html.DropDownList("CustomerTitle", null, new { @class = "form-control with-search" })
                        </div>
                    </div>
                }
                <!--Tên-->
                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Title)) &&
                     fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ProfileName)))
                {
                    <div id="Profile_General_ProfileName_BC" class="col-md-7">
                        @Html.RequiredTextboxFor(p => p.ProfileName, new { @id = "Profile_General_ProfileName" })
                    </div>
                }
                else if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ProfileName)))
                {
                    <div id="Profile_General_ProfileName_BC" class="col-md-8">
                        @Html.RequiredTextboxFor(p => p.ProfileName, new { @id = "Profile_General_ProfileName" })
                    </div>
                }*@
                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>
                                (p => p.ProfileName)))
                            {
                                <div id="Profile_General_ProfileName_BC" class="col-md-8 ">
                                    <div class="input-group">
                                        @{
                                            var ProfileName = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.ProfileName)).FirstOrDefault();

                                            if (isProfileSynced == true && ProfileName.IsReadOnly == true)
                                            {
                                                @Html.RequiredTextboxFor(p => p.ProfileName, new { @id = "Profile_General_ProfileName", @readonly = "readonly" })
                                            }
                                            else
                                            {
                                                @Html.RequiredTextboxFor(p => p.ProfileName, new { @id = "Profile_General_ProfileName" })
                                            }
                                        }
                                        <label class="input-group-addon" title="Tự động format tên theo mẫu">
                                            @if (Model != null && Model.ProfileId != null && Model.ProfileId != Guid.Empty)
                                            {
                                                if (Model.AutoformatFullName == null)
                                                {
                                                    Model.AutoformatFullName = true;
                                                }
                                                if (isProfileSynced == true && ProfileName.IsReadOnly == true)
                                                {

                                                    @Html.CheckBox("AutoformatFullName", Model.AutoformatFullName.Value, new { @title = "Tự động format tên theo mẫu", @readonly = "readonly" })
                                                }
                                                else
                                                {
                                                    @Html.CheckBox("AutoformatFullName", Model.AutoformatFullName.Value, new { @title = "Tự động format tên theo mẫu" })
                                                }
                                            }
                                            else
                                            {
                                                @Html.CheckBox("AutoformatFullName", true, new { @title = "Tự động format tên theo mẫu", @readonly = "readonly" })
                                            }
                                        </label>
                                    </div>

                                </div>
                            }
                            <div class="col-md-1">
                                @*<label class="label-radio" title="Tự động format tên theo mẫu">Tự động Format</label>*@
                            </div>
                        </div>

                    }
                    else
                    {
                        @Html.HiddenFor(p => p.ProfileName)
                    }
                    <!--Tên ngắn-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ProfileShortName)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ProfileShortName, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.ProfileShortName)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @{
                                    var ProfileShortName = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.ProfileShortName)).FirstOrDefault();

                                    if (isProfileSynced == true && ProfileShortName.IsReadOnly == true)
                                    {
                                        @Html.RequiredTextboxFor(p => p.ProfileShortName, new { @id = "Profile_General_ProfileShortName", @readonly = "readonly" })
                                    }
                                    else
                                    {
                                        if (ProfileShortName.IsRequired == true)
                                        {
                                            @Html.RequiredExTextboxFor(p => p.ProfileShortName, ConstCommon.Required, true, new
                                               {
                                                   @id = "Profile_General_ProfileShortName",
                                               })
                                        }
                                        else
                                        {
                                            @Html.RequiredTextboxFor(p => p.ProfileShortName, new { @id = "Profile_General_ProfileShortName" })
                                        }

                                    }
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.ProfileShortName)
                    }
                    @if (ViewBag.Type == ConstProfileType.Competitor)
                    {
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text4)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Text4, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text4)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @Html.RequiredTextboxFor(p => p.Text4)
                                </div>
                            </div>
                        }

                    }
                    <!--Ngày sinh-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.DateOfBirth)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.DateOfBirth, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.DateOfBirth)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                <span class="day-of-birth">
                                    @Html.DropDownList("DayOfBirth", "--")
                                </span>
                                /
                                <span class="month-of-birth">
                                    @Html.DropDownList("MonthOfBirth", "--")
                                </span>
                            </div>
                        </div>
                    }
                    <!--Độ tuổi-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Age)))
                    {
                        <div class="form-group profileC">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Age, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Age)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownList("Age", null, LanguageResource.Dropdownlist_Choose, new { @class = " form-control with-search" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Age)
                    }
                    <!--Tiêu chuẩn bàn giao-->
                    @if (ViewBag.Type == ConstProfileType.Opportunity)
                    {
                        <div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.HandoverFurniture)
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownList("HandoverFurnitureList", null, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                </div>
                            </div>
                        </div>
                    }
                    <!--Công ty-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text1)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Text1, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text1)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @Html.RequiredTextboxFor(p => p.Text1)
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Text1)
                    }
                    <!--Mã số thuế-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.TaxNo)))
                    {
                        <div class="form-group profileB">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.TaxNo, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.TaxNo)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @{
                                    var TaxNo = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>
                                   (e => e.TaxNo)).FirstOrDefault();

                                    if (isProfileSynced == true && TaxNo.IsReadOnly == true)
                                    {
                                        @Html.RequiredTextboxFor(p => p.TaxNo, new { @readonly = "readonly" })
                                    }
                                    else
                                    {
                                        @Html.RequiredTextboxFor(p => p.TaxNo)
                                    }
                                }

                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.TaxNo)
                    }
                    <!--Số điện thoại-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Phone)))
                    {
                        <div class="form-group">
                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Phone)))
                            {
                                <div class="col-md-3 profileC">
                                    @Html.TooltipLabelFor(p => p.Phone)
                                </div>
                                <div class="col-md-3 profileB" hidden>
                                    @Html.TooltipLabelFor(p => p.CompanyNumber)
                                </div>
                                <div class="col-md-8">
                                    @Html.ValidationMessageFor(p => p.Phone, null, new { @class = "validation-text" })
                                    @{
                                        var PhoneField = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.Phone)).FirstOrDefault();

                                        if (isProfileSynced == true && PhoneField.IsReadOnly == true)
                                        {
                                            <div class="phoneControls">
                                                <div class="input-group phonenumber">
                                                    <div class="input-group-addon">
                                                        <i class="fa fa-phone"></i>
                                                    </div>
                                                    @Html.TextBoxFor(p => p.Phone, new { @class = " form-control", @id = "Profile_General_Phone", @readonly = "readonly" })
                                                </div>
                                                @if (ViewBag.Phones != null && ViewBag.Phones.Count > 0)
                                                {
                                                    foreach (var Phone in ViewBag.Phones)
                                                    {
                                                        <div class="input-group phonenumber">
                                                            <div class="input-group-addon">
                                                                <i class="fa fa-phone"></i>
                                                            </div>
                                                            @Html.TextBoxFor(p => Phone, new { @class = " form-control text-box single-line", @id = "Profile_General_Phone", @readonly = "readonly" })
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="phoneControls">
                                                <div class="input-group phonenumber">
                                                    <div class="input-group-addon">
                                                        <i class="fa fa-phone"></i>
                                                    </div>
                                                    @Html.TextBoxFor(p => p.Phone, new { @class = " form-control", @id = "Profile_General_Phone" })
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-default btn-addPhone" type="button">
                                                            <span class="glyphicon glyphicon-plus"></span>
                                                        </button>
                                                    </span>
                                                </div>
                                                @if (ViewBag.Phones != null && ViewBag.Phones.Count > 0)
                                                {
                                                    foreach (var Phone in ViewBag.Phones)
                                                    {
                                                        <div class="input-group phonenumber">
                                                            <div class="input-group-addon">
                                                                <i class="fa fa-phone"></i>
                                                            </div>
                                                            @Html.TextBoxFor(p => Phone, new { @class = " form-control text-box single-line", @id = "Profile_General_Phone" })
                                                            <span class="input-group-btn">
                                                                <button class="btn btn-danger btn-removePhone" type="button">
                                                                    <span class="glyphicon glyphicon-minus"></span>
                                                                </button>
                                                            </span>
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Phone, new { @id = "Profile_General_Phone" })

                        if (ViewBag.Phones != null && ViewBag.Phones.Count > 0)
                        {
                            foreach (var Phone in ViewBag.Phones)
                            {
                                <span>@Html.HiddenFor(p => p.Phone, new { @id = "Profile_General_Phone" })</span>
                            }
                        }
                    }
                    <!--Email-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Email)))
                    {
                        <div class="form-group">
                            <div class="col-md-3 profileC">
                                @Html.TooltipLabelFor(p => p.Email)
                            </div>
                            <div class="col-md-3 profileB" hidden>
                                @Html.TooltipLabelFor(p => p.Email, "EmailBusiness")
                            </div>
                            <div class="col-md-8">
                                @*@Html.ValidationMessageFor(p => p.Email, null, new { @class = "validation-text" })
                    <div class="input-group">
                        <div class="input-group-addon">
                            <i class="fa fa-envelope"></i>
                        </div>
                        @{
                            var Email = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.Email)).FirstOrDefault();

                            if (isProfileSynced == true && Email.IsReadOnly == true)
                            {
                                @Html.TextBoxFor(p => p.Email, new { @class = " form-control text-box single-line", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(p => p.Email, new { @class = " form-control text-box single-line" })
                            }
                        }

                    </div>*@

                                @{
                                    var EmailField = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.Email)).FirstOrDefault();

                                    if (isProfileSynced == true && EmailField.IsReadOnly == true)
                                    {
                                        <div class="emailControls">
                                            @*<div class="input-group email">
                                    <div class="input-group-addon">
                                        <i class="fa fa-envelope"></i>
                                    </div>
                                    @Html.TextBoxFor(p => p.Email, new { @class = " form-control text-box single-line", @readonly = "readonly" })
                                </div>*@
                                            @if (ViewBag.Emails != null && ViewBag.Emails.Count > 0)
                                            {
                                                foreach (var Email in ViewBag.Emails)
                                                {
                                                    <div class="input-group email">
                                                        <div class="input-group-addon">
                                                            <i class="fa fa-envelope"></i>
                                                        </div>
                                                        @Html.TextBoxFor(p => Email, new { @class = " form-control text-box single-line", @readonly = "readonly" })
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div class="input-group email">
                                                    <div class="input-group-addon">
                                                        <i class="fa fa-envelope"></i>
                                                    </div>
                                                    @Html.TextBoxFor(p => p.Email, new { @class = " form-control text-box single-line", @readonly = "readonly" })
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="emailControls">
                                            @*<div class="input-group email">
                                    <div class="input-group-addon">
                                        <i class="fa fa-envelope"></i>
                                    </div>
                                    @Html.TextBoxFor(p => p.Email, new { @class = " form-control" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-default btn-addEmail" type="button">
                                            <span class="glyphicon glyphicon-plus"></span>
                                        </button>
                                    </span>
                                </div>*@
                                            @if (ViewBag.Emails != null && ViewBag.Emails.Count > 0)
                                            {
                                                int emailIndex = 0;
                                                foreach (var Email in ViewBag.Emails)
                                                {
                                                    <div class="input-group email">
                                                        <div class="input-group-addon">
                                                            <i class="fa fa-envelope"></i>
                                                        </div>
                                                        @Html.TextBoxFor(p => Email, new { @class = " form-control text-box single-line" })
                                                        <span class="input-group-btn">
                                                            @if (emailIndex == 0)
                                                            {
                                                                <button class="btn btn-default btn-addEmail" type="button">
                                                                    <span class="glyphicon glyphicon-plus"></span>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-danger btn-removeEmail" type="button">
                                                                    <span class="glyphicon glyphicon-minus"></span>
                                                                </button>
                                                            }
                                                        </span>
                                                    </div>
                                                    emailIndex++;
                                                }
                                            }
                                            else
                                            {
                                                <div class="input-group email">
                                                    <div class="input-group-addon">
                                                        <i class="fa fa-envelope"></i>
                                                    </div>
                                                    @Html.TextBoxFor(p => p.Email, new { @class = " form-control" })
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-default btn-addEmail" type="button">
                                                            <span class="glyphicon glyphicon-plus"></span>
                                                        </button>
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        if (ViewBag.Emails != null && ViewBag.Emails.Count > 0)
                        {
                            foreach (var Email in ViewBag.Emails)
                            {
                                <span>
                                    @Html.HiddenFor(p => Email)
                                </span>
                            }
                        }
                    }
                    <!--Website-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Website)))
                    {
                        <div class="form-group profileB">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Website, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Website)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @Html.RequiredTextboxFor(p => p.Website, new { @placeholder = "Vui lòng nhập website đúng định dạng. VD: https://ancuong.com" })
                                @if (!string.IsNullOrEmpty(Model.Website))
                                {
                                    string url = Model.Website;
                                    <div class="display-for">
                                        <a href="@url" target="_blank">@Model.Website</a>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Website)
                    }
                    <!--Địa chỉ-->
                    @if (ViewBag.Type != ConstProfileType.Opportunity && ViewBag.Type != ConstProfileType.Lead)
                    {
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Address)))
                        {
                            var Address = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>
                                (e => e.Address)).FirstOrDefault();

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.AddressTypeCode)
                                </div>
                                <div class="col-md-2">
                                    @if (isProfileSynced == true && Address.IsReadOnly == true)
                                    {
                                        @Html.RequiredIfDropDownListFor(p => p.RequiredAddressTypeCode, null, LanguageResource.Dropdownlist_Choose, new { @disabled = "disabled" })
                                        @Html.HiddenFor(p => p.AddressTypeCode)
                                    }
                                    else
                                    {
                                        @Html.RequiredIfDropDownListFor(p => p.RequiredAddressTypeCode, null, LanguageResource.Dropdownlist_Choose)
                                    }
                                </div>
                                <div class="col-md-1">
                                    @Html.TooltipLabelFor(p => p.RequiredSaleOfficeCode)
                                </div>
                                <div class="col-md-2">
                                    @if (isProfileSynced == true && Address.IsReadOnly == true)
                                    {
                                        @Html.RequiredIfDropDownListFor(p => p.RequiredSaleOfficeCode, null, LanguageResource.Dropdownlist_Choose, new { @disabled = "disabled" })

                                    }
                                    else
                                    {
                                        @Html.RequiredIfDropDownListFor(p => p.RequiredSaleOfficeCode, null, LanguageResource.Dropdownlist_Choose)
                                    }
                                    @Html.HiddenFor(p => p.SaleOfficeCode)
                                </div>

                            </div>

                            <div class="form-group">
                                <div id="provinceName" class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.RequiredProvinceId)
                                </div>
                                <div class="col-md-2">
                                    @if (isProfileSynced == true && Address.IsReadOnly == true)
                                    {
                                        @Html.RequiredIfDropDownListFor(p => p.RequiredProvinceId, null, LanguageResource.Dropdownlist_Choose, new { @disabled = "disabled" })
                                        @Html.HiddenFor(p => p.ProvinceId)
                                    }
                                    else
                                    {
                                        @Html.RequiredIfDropDownListFor(p => p.RequiredProvinceId, null, LanguageResource.Dropdownlist_Choose)
                                    }
                                </div>
                                <div class="address-foreign">
                                    <div class="col-md-1">
                                        @Html.TooltipLabelFor(p => p.DistrictId)
                                    </div>
                                    <div class="col-md-2">
                                        @if (isProfileSynced == true && Address.IsReadOnly == true)
                                        {
                                            @Html.DropDownList("DistrictId", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search", @disabled = "disabled" })
                                            @Html.HiddenFor(p => p.DistrictId)
                                        }
                                        else
                                        {
                                            @Html.DropDownList("DistrictId", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                        }
                                    </div>

                                    <div class="col-md-1">
                                        @Html.TooltipLabelFor(p => p.WardId)
                                    </div>
                                    <div class="col-md-2">
                                        @if (isProfileSynced == true && Address.IsReadOnly == true)
                                        {
                                            @Html.DropDownList("WardId", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search", @disabled = "disabled" })
                                            @Html.HiddenFor(p => p.WardId)
                                        }
                                        else
                                        {
                                            @Html.DropDownList("WardId", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-3">
                                    @*@Html.TooltipLabelFor(p => p.Address)*@
                                    @Html.LabelByPropertyNameFor(p => p.Address, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Address)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    <div class="input-group-required input-group-select-required">
                                        @if (isProfileSynced == true && Address.IsReadOnly == true)
                                        {
                                            @Html.RequiredTextboxFor(p => p.Address, new { @readonly = "readonly" })
                                        }
                                        else
                                        {
                                            @Html.RequiredTextboxFor(p => p.Address)
                                        }
                                        @*<div class="required-icon">
                                <span class="text">*</span>
                            </div>*@
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.AddressTypeCode)
                            @Html.HiddenFor(p => p.SaleOfficeCode)
                            @Html.HiddenFor(p => p.ProvinceId)
                            @Html.HiddenFor(p => p.DistrictId)
                            @Html.HiddenFor(p => p.WardId)
                            @Html.HiddenFor(p => p.Address)
                        }
                    }
                    <!--Khách hàng/Chủ đầu tư-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, Guid?>(p => p.ReferenceProfileId)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ReferenceProfileId, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, Guid?>(p1 => p1.ReferenceProfileId)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @Html.HiddenFor(p => p.CompanyId)
                                @Html.HiddenFor(p => p.ReferenceProfileId)

                                @{
                                    var ReferenceProfileId = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, Guid?>(e => e.ReferenceProfileId)).FirstOrDefault();
                                    if (isProfileSynced == true && ReferenceProfileId.IsReadOnly == true)
                                    {
                                        @Html.TextBoxFor(p => p.CompanyName, new { @class = " form-control text-box single-line", @readonly = "readonly" })
                                    }
                                    else
                                    {
                                        <div class="input-group">
                                            @Html.TextBoxFor(p => p.CompanyName, new { @class = " form-control text-box single-line", @readonly = "readonly" })
                                            <a class="input-group-addon btn btn-danger btn-del-profile">
                                                <i class="fa fa-close"></i>
                                            </a>
                                            <a class="input-group-addon btn btn-default btn-get-profile" data-toggle="modal" data-target="#divProfileSearch">
                                                <i class="fa fa-ellipsis-h"></i>
                                            </a>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.CompanyId)
                        @Html.HiddenFor(p => p.ReferenceProfileId)
                    }

                    <!--Phòng ban-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.DepartmentCode)) &&
                          !fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Contact)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.DepartmentCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.DepartmentCode)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @{
                                    var DepartmentCode = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.DepartmentCode)).FirstOrDefault();
                                    if (isProfileSynced == true && DepartmentCode.IsReadOnly == true)
                                    {
                                        @Html.DropDownList("DepartmentCode", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search", @disabled = "disabled" })
                                        @Html.HiddenFor(p => p.DepartmentCode)
                                    }
                                    else
                                    {
                                        @Html.DropDownList("DepartmentCode", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    }
                                }
                            </div>
                        </div>
                    }
                    <!--Chức vụ-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.PositionB))
                        && !fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Contact)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ProfileContactPosition, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.ProfileContactPosition)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @{
                                    var Position = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.PositionB)).FirstOrDefault();
                                    if (isProfileSynced == true && Position.IsReadOnly == true)
                                    {
                                        @Html.DropDownList("PositionB", null, LanguageResource.Dropdownlist_Choose, new { @class = " form-control with-search", @disabled = "disabled" })
                                        @Html.Hidden("PositionB", Model.ProfileContactPosition)
                                    }
                                    else
                                    {
                                        @Html.DropDownList("PositionB", null, LanguageResource.Dropdownlist_Choose, new { @class = " form-control with-search" })
                                    }
                                }
                            </div>
                        </div>
                    }

                    <!--Tư vấn & TK-->
                    @*@if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, Guid?>(p => p.ReferenceProfileId2)))
        {
            <div class="form-group">
                <div class="col-md-3">
                    @Html.LabelByPropertyNameFor(p => p.ReferenceProfileId2, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, Guid?>(p1 => p1.ReferenceProfileId2)).Select(p => p.Note).FirstOrDefault())
                </div>
                <div class="col-md-8">
                    @Html.HiddenFor(p => p.ReferenceProfileId2)
                    <div class="input-group">
                        @Html.TextBoxFor(p => p.ConsultingAndDesign, new { @class = " form-control text-box single-line", @readonly = "readonly" })
                        <a class="input-group-addon btn btn-danger btn-del-profile" data-field="ReferenceProfileId2">
                            <i class="fa fa-close"></i>
                        </a>
                        <a class="input-group-addon btn btn-default btn-get-profile" data-toggle="modal" data-target="#divProfileSearch" data-field="ReferenceProfileId2">
                            <i class="fa fa-ellipsis-h"></i>
                        </a>
                    </div>
                </div>
            </div>
        }*@
                    <!--Địa chỉ cụ thể dự án-->
                    @if (ViewBag.Type == ConstProfileType.Opportunity || ViewBag.Type == ConstProfileType.Lead)
                    {
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ProjectLocation)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.RequiredSaleOfficeCode)
                                </div>
                                <div class="col-md-2">
                                    @Html.RequiredIfDropDownListFor(p => p.RequiredSaleOfficeCode, null, LanguageResource.Dropdownlist_Choose)
                                    @Html.HiddenFor(p => p.SaleOfficeCode)
                                </div>
                            </div>

                            <div class="form-group">
                                <div id="provinceName" class="col-md-3">
                                    @Html.TooltipLabelFor(p => p.RequiredProvinceId)
                                </div>
                                <div class="col-md-2">
                                    @Html.RequiredIfDropDownListFor(p => p.RequiredProvinceId, null, LanguageResource.Dropdownlist_Choose)
                                </div>
                                <div class="address-foreign">
                                    <div class="col-md-1">
                                        @Html.TooltipLabelFor(p => p.DistrictId)
                                    </div>
                                    <div class="col-md-2">
                                        @Html.DropDownList("DistrictId", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    </div>

                                    <div class="col-md-1">
                                        @Html.TooltipLabelFor(p => p.WardId)
                                    </div>
                                    <div class="col-md-2">
                                        @Html.DropDownList("WardId", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.ProjectLocation, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.ProjectLocation)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @Html.RequiredTextboxFor(p => p.ProjectLocation)
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.SaleOfficeCode)
                            @Html.HiddenFor(p => p.ProvinceId)
                            @Html.HiddenFor(p => p.DistrictId)
                            @Html.HiddenFor(p => p.WardId)
                            @Html.HiddenFor(p => p.ProjectLocation)
                        }
                    }
                    <!--Loại hình-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist4)))
                    {
                        if (ViewBag.Type == ConstProfileType.Opportunity || ViewBag.Type == ConstProfileType.Lead)
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Dropdownlist4, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist4)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @if (ViewBag.OpportunityTypeList != null)
                                    {
                                        @Html.DropDownList("OpportunityTypeList", null, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Dropdownlist4, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist4)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @if (ViewBag.Dropdownlist4 != null)
                                    {
                                        @Html.DropDownList("Dropdownlist4", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Dropdownlist4)
                        @Html.HiddenFor(p => p.OpportunityType)
                    }
                    <!--Danh mục dự án-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist1)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Dropdownlist1, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist1)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @if (ViewBag.LeadCategory != null)
                                {
                                    @Html.DropDownList("LeadCategory", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Dropdownlist1)
                        @Html.HiddenFor(p => p.LeadCategory)
                    }
                    <!--Danh mục cơ hội bán hàng-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist2)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Dropdownlist2, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist2)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @if (ViewBag.OpportunityCategory != null)
                                {
                                    @Html.DropDownList("OpportunityCategory", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Dropdownlist2)
                        @Html.HiddenFor(p => p.OpportunityCategory)
                    }
                    <!--Quy mô dự án-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist5)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Dropdownlist5, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist5)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @if (ViewBag.ProjectScale != null)
                                {
                                    @Html.DropDownList("ProjectScale", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Dropdownlist5)
                        @Html.HiddenFor(p => p.ProjectScale)
                    }

                    @if (ViewBag.Type != ConstProfileType.Competitor)
                    {
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text2)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Text2, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text2)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-2">
                                    @Html.RequiredTextboxFor(p => p.Text2)
                                </div>
                                @if (ViewBag.Type == ConstProfileType.Lead)
                                {
                                    <div class="col-md-1">
                                        @Html.LabelByPropertyNameFor(p => p.Dropdownlist7, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist7)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-2">
                                        @Html.DropDownList("OpportunityUnit", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Text2)
                            if (ViewBag.Type == ConstProfileType.Lead)
                            {
                                @Html.HiddenFor(p => p.OpportunityUnit)
                            }
                        }

                    }
                    @if (ViewBag.Type == ConstProfileType.Opportunity)
                    {
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, decimal?>(p => p.Number4)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Number4, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, decimal?>(p1 => p1.Number4)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-2">
                                    @Html.RequiredTextboxFor(p => p.Number4, "{0:0.#}", new { type = "number" })
                                </div>
                                @if (ViewBag.Type == ConstProfileType.Opportunity)
                                {
                                    <div class="col-md-1">
                                        @Html.LabelByPropertyNameFor(p => p.Dropdownlist7, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist7)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-2">
                                        @Html.DropDownList("OpportunityUnit", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Number4)
                            @Html.HiddenFor(p => p.OpportunityUnit)
                        }
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist8)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Dropdownlist8, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist8)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @Html.DropDownList("OpportunityStatusTypeList", null, null, new { @class = "form-control with-search", @multiple = "multiple" })
                                </div>
                            </div>
                        }
                    }

                    <!--Xác suất-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist3)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Dropdownlist3, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist3)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @if (ViewBag.OpportunityPercentage != null)
                                {
                                    @Html.DropDownList("OpportunityPercentage", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {

                        @Html.HiddenFor(p => p.Dropdownlist3)
                        @Html.HiddenFor(p => p.OpportunityPercentage)
                    }
                    <!--Trạng thái cơ hội bán hàng-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist6)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Dropdownlist6, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist6)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @if (ViewBag.OpportunityStatus != null)
                                {
                                    @Html.DropDownList("OpportunityStatus", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Dropdownlist6)
                        @Html.HiddenFor(p => p.OpportunityStatus)
                    }
                    <!--Trạng thái dự án-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ProjectStatusCode)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ProjectStatusCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.ProjectStatusCode)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @if (ViewBag.ProjectStatusCode != null)
                                {
                                    @Html.DropDownList("ProjectStatusCode", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.ProjectStatusCode)
                    }
                    <!--Mức độ xác định-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.QualificationLevelCode)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.QualificationLevelCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.QualificationLevelCode)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @if (ViewBag.QualificationLevelCode != null)
                                {
                                    @Html.DropDownList("QualificationLevelCode", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.QualificationLevelCode)
                    }
                    <!--Nguồn thông tin-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ProjectSourceCode)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ProjectSourceCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.ProjectSourceCode)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @if (ViewBag.ProjectSourceCode != null)
                                {
                                    @Html.DropDownList("ProjectSourceCode", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.ProjectSourceCode)
                    }

                    <!--Tổng giá trị hợp đồng dự kiến-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, decimal?>(p => p.ContractValue)))
                    {

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ContractWonValue, "Tổng GT trúng thầu")
                            </div>
                            <div class="col-md-2">
                                @{ string ContractWonValue = string.Format("{0:n2}", 0); }
                                @if (Model.ContractWonValue != null)
                                {
                                    //ContractValue = Convert.ToInt64(Model.ContractValue);
                                    ContractWonValue = Model.ContractWonValue.Value.ToString("n2");
                                }
                                @Html.HiddenFor(p => p.ContractWonValue)
                                <input class="form-control text-box single-line valid text-right" id="ContractWonValueDisplay" name="ContractWonValueDisplay" readonly="readonly" type="text" value="@ContractWonValue">
                                @*<div class="text-right numberContractValue mr-15 mt-5 hidden"></div>*@
                            </div>
                            <div class="col-md-1 no-padding">
                                <div class="display-for">
                                    <span>Tỷ</span>
                                </div>
                            </div>
                            <div class="col-md-2">
                                @Html.LabelByPropertyNameFor(p => p.ContractLoseValue, "Tổng GT rớt thầu")
                            </div>
                            <div class="col-md-2">
                                @{ string ContractLoseValue = string.Format("{0:n2}", 0); }
                                @if (Model.ContractLoseValue != null)
                                {
                                    //ContractValue = Convert.ToInt64(Model.ContractValue);
                                    ContractLoseValue = Model.ContractLoseValue.Value.ToString("n2");
                                }
                                @Html.HiddenFor(p => p.ContractLoseValue)
                                <input class="form-control text-box single-line valid text-right" id="ContractLoseValueDisplay" name="ContractLoseValueDisplay" readonly="readonly" type="text" value="@ContractLoseValue">
                                @*<div class="text-right numberContractValue mr-15 mt-5 hidden"></div>*@
                            </div>
                            <div class="col-md-2 no-padding">
                                <div class="display-for">
                                    <span>Tỷ</span>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ContractValue, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, decimal?>(p1 => p1.ContractValue)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-2">
                                @{ string ContractValue = string.Empty; }
                                @if (Model.ContractValue != null)
                                {
                                    //ContractValue = Convert.ToInt64(Model.ContractValue);
                                    ContractValue = Model.ContractValue.Value.ToString("n2");
                                }
                                @Html.HiddenFor(p => p.ContractValue)
                                <input class="form-control text-box single-line valid text-right" id="ContractValueDisplay" name="ContractValueDisplay" readonly="readonly" type="text" value="@ContractValue">
                                @*<div class="text-right numberContractValue mr-15 mt-5 hidden"></div>*@
                            </div>
                            <div class="col-md-2 no-padding">
                                <div class="display-for">
                                    <span>Tỷ</span>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.ContractValue)
                        @Html.HiddenFor(p => p.ContractWonValue)
                        @Html.HiddenFor(p => p.ContractLoseValue)
                    }
                    <!--Ngày bắt đầu-->
                    <!--Ngày kết thúc-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.Date1)) ||
                         fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.Date2)))
                    {
                        if (ViewBag.Type == ConstProfileType.Opportunity || ViewBag.Type == ConstProfileType.Lead)
                        {

                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.Date1)))
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Date1, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p1 => p1.Date1)).Select(p => p.Note).FirstOrDefault())
                                        @Html.HiddenFor(p => p.Date1)
                                    </div>
                                    <div class="col-md-1">
                                        <div class="label-wrapper">
                                            <label class="control-label">Tháng</label>
                                        </div>
                                    </div>
                                    <div class="col-md-1">
                                        @Html.DropDownListFor(p => p.StartMonth, null, null, new { @class = "form-control with-search" })
                                    </div>
                                    <div class="col-md-1">
                                        <div class="label-wrapper">
                                            <label class="control-label">Năm</label>
                                        </div>
                                    </div>
                                    <div class="col-md-1">
                                        @Html.DropDownListFor(p => p.StartYear, null, null, new { @class = "form-control with-search" })
                                    </div>
                                </div>
                            }
                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.Date2)))
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Date2, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p1 => p1.Date2)).Select(p => p.Note).FirstOrDefault())
                                        @Html.HiddenFor(p => p.Date2)
                                    </div>
                                    <div class="col-md-1">
                                        <div class="label-wrapper">
                                            <label class="control-label">Tháng</label>
                                        </div>
                                    </div>
                                    <div class="col-md-1">
                                        @Html.DropDownListFor(p => p.EndMonth, null, null, new { @class = "form-control with-search" })
                                    </div>
                                    <div class="col-md-1">
                                        <div class="label-wrapper">
                                            <label class="control-label">Năm</label>
                                        </div>
                                    </div>
                                    <div class="col-md-1">
                                        @Html.DropDownListFor(p => p.EndYear, null, null, new { @class = "form-control with-search" })
                                    </div>
                                </div>
                            }

                        }
                        else
                        {
                            <div class="form-group">
                                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.Date1)))
                                {
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Date1, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p1 => p1.Date1)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-2">
                                        @Html.RequiredTextboxFor(p => p.Date1, "{0:yyyy-MM-dd}", new { @type = "date" })
                                    </div>
                                }
                                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.Date2)))
                                {
                                    <div class="col-md-2">
                                        @Html.LabelByPropertyNameFor(p => p.Date2, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p1 => p1.Date2)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-2">
                                        @Html.RequiredTextboxFor(p => p.Date2, "{0:yyyy-MM-dd}", new { @type = "date" })
                                    </div>
                                }
                            </div>
                        }

                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Date1)
                        @Html.HiddenFor(p => p.Date2)
                    }
                    <!--Ngày ghé thăm-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.VisitDate)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.VisitDate, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p1 => p1.VisitDate)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-2">
                                @Html.RequiredTextboxFor(p => p.VisitDate, "{0:yyyy-MM-dd}", new { @type = "date" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.VisitDate)
                    }
                    <!--NV kinh doanh-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.SalesEmployeeCode)))
                    {
                        if (ViewBag.Type == ConstProfileType.Opportunity)
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.SalesEmployeeCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.SalesEmployeeCode)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    <div class="row"></div>
                                    <div class="personInChargeControls" style="display: grid">
                                        @if (personInChargeList != null && personInChargeList.Count > 0)
                                        {
                                            int i = 0;

                                            foreach (var item in personInChargeList)
                                            {
                                                <div class="input-group personCharge">
                                                    <div class="col-md-5 no-padding">
                                                        @Html.RequiredExDropDownListFor(p => personInChargeList[i].SalesEmployeeCode, new SelectList(SalesEmployeeList1, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode", @data_row = i })
                                                        @*@Html.DropDownList("personInCharge1List[" + i + "].SalesEmployeeCode", new SelectList(SalesEmployeeList1, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode1", @data_row = i })*@
                                                    </div>
                                                    <div class="col-md-5 input-group">
                                                        <div class="display-for roleName roleName_@i">
                                                            @item.RoleName
                                                        </div>
                                                        <span class="input-group-btn">
                                                            @if (i == 0)
                                                            {
                                                                <button class="btn btn-default btn-addPersonCharge" type="button">
                                                                    <span class="glyphicon glyphicon-plus"></span>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-default btn-removePersonCharge btn-danger" type="button">
                                                                    <span class="glyphicon glyphicon-minus"></span>
                                                                </button>
                                                            }
                                                        </span>
                                                    </div>

                                                </div>
                                                i++;
                                            }
                                        }
                                        else
                                        {
                                            <div class="input-group personCharge">
                                                <div class="col-md-5 no-padding">
                                                    @Html.RequiredExDropDownListFor(p => personInChargeList[0].SalesEmployeeCode, new SelectList(SalesEmployeeList1, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode", @data_row = 0 })
                                                    @*@Html.DropDownList("personInCharge1List[0].SalesEmployeeCode", new SelectList(SalesEmployeeList1, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode1", @data_row = 0 })*@
                                                </div>
                                                <div class="col-md-5 input-group">
                                                    <div class="display-for roleName roleName_0">

                                                    </div>
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-default btn-addPersonCharge" type="button">
                                                            <span class="glyphicon glyphicon-plus"></span>
                                                        </button>
                                                    </span>
                                                </div>

                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!--NV sales admin-->
                            <div class="form-group">
                                <div class="col-md-3">
                                    <div class="label-wrapper"><label class="control-label">NV Sales Admin</label></div>
                                </div>
                                <div class="col-md-8">
                                    <div class="row"></div>
                                    <div class="personInChargeControls2" style="display: grid">
                                        @if (personInCharge2List != null && personInCharge2List.Count > 0)
                                        {
                                            int i = 0;

                                            foreach (var item in personInCharge2List)
                                            {
                                                <div class="input-group personCharge2">
                                                    <div class="col-md-5 no-padding">
                                                        @*@Html.RequiredExDropDownListFor(p => personInCharge2List[i].SalesEmployeeCode, new SelectList(SalesEmployeeList2, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode2", @data_row = i })*@
                                                        @Html.DropDownList("personInCharge2List[" + i + "].SalesEmployeeCode", new SelectList(SalesEmployeeList2, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode2", @data_row = i })
                                                    </div>
                                                    <div class="col-md-5 input-group">
                                                        <div class="display-for roleName2 roleName2_@i">
                                                            @item.RoleName
                                                        </div>
                                                        <span class="input-group-btn">
                                                            @if (i == 0)
                                                            {
                                                                <button class="btn btn-default btn-addPersonCharge2" type="button">
                                                                    <span class="glyphicon glyphicon-plus"></span>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-default btn-removePersonCharge2 btn-danger" type="button">
                                                                    <span class="glyphicon glyphicon-minus"></span>
                                                                </button>
                                                            }
                                                        </span>
                                                    </div>

                                                </div>
                                                i++;
                                            }
                                        }
                                        else
                                        {
                                            <div class="input-group personCharge2">
                                                <div class="col-md-5 no-padding">
                                                    @*@Html.RequiredExDropDownListFor(p => personInCharge2List[0].SalesEmployeeCode, new SelectList(SalesEmployeeList2, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode2", @data_row = 0 })*@
                                                    @Html.DropDownList("personInCharge2List[0].SalesEmployeeCode", new SelectList(SalesEmployeeList2, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode2", @data_row = 0 })
                                                </div>
                                                <div class="col-md-5 input-group">
                                                    <div class="display-for roleName2 roleName2_0">

                                                    </div>
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-default btn-addPersonCharge2" type="button">
                                                            <span class="glyphicon glyphicon-plus"></span>
                                                        </button>
                                                    </span>
                                                </div>

                                            </div>
                                        }
                                    </div>

                                </div>
                            </div>

                            <!--NV spec-->
                            <div class="form-group">
                                <div class="col-md-3">
                                    <div class="label-wrapper"><label class="control-label">NV Spec</label></div>
                                </div>
                                <div class="col-md-8">
                                    <div class="row"></div>
                                    <div class="personInChargeControls3" style="display: grid">
                                        @if (personInCharge3List != null && personInCharge3List.Count > 0)
                                        {
                                            int i = 0;

                                            foreach (var item in personInCharge3List)
                                            {
                                                <div class="input-group personCharge3">
                                                    <div class="col-md-5 no-padding">
                                                        @Html.DropDownList("personInCharge3List[" + i + "].SalesEmployeeCode", new SelectList(SalesEmployeeList3, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode3", @data_row = i })
                                                    </div>
                                                    <div class="col-md-5 input-group">
                                                        <div class="display-for roleName3 roleName3_@i">
                                                            @item.RoleName
                                                        </div>
                                                        <span class="input-group-btn">
                                                            @if (i == 0)
                                                            {
                                                                <button class="btn btn-default btn-addPersonCharge3" type="button">
                                                                    <span class="glyphicon glyphicon-plus"></span>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-default btn-removePersonCharge3 btn-danger" type="button">
                                                                    <span class="glyphicon glyphicon-minus"></span>
                                                                </button>
                                                            }
                                                        </span>
                                                    </div>

                                                </div>
                                                i++;
                                            }
                                        }
                                        else
                                        {
                                            <div class="input-group personCharge3">
                                                <div class="col-md-5 no-padding">
                                                    @Html.DropDownList("personInCharge3List[0].SalesEmployeeCode", new SelectList(SalesEmployeeList3, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode3", @data_row = 0 })
                                                </div>
                                                <div class="col-md-5 input-group">
                                                    <div class="display-for roleName3 roleName3_0">

                                                    </div>
                                                    <span class="input-group-btn">
                                                        <button class="btn btn-default btn-addPersonCharge3" type="button">
                                                            <span class="glyphicon glyphicon-plus"></span>
                                                        </button>
                                                    </span>
                                                </div>

                                            </div>
                                        }
                                    </div>

                                </div>
                            </div>


                        }
                        else
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.SalesEmployeeCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.SalesEmployeeCode)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    <div class="row"></div>
                                    @{
                                        var SalesEmployeeCode = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.SalesEmployeeCode)).FirstOrDefault();

                                        if (isProfileSynced == true && SalesEmployeeCode.IsReadOnly == true)
                                        {
                                            <div class="personInChargeControls" style="display: grid">
                                                @if (personInChargeList != null && personInChargeList.Count > 0)
                                                {
                                                    int i = 0;

                                                    foreach (var item in personInChargeList)
                                                    {
                                                        <div class="input-group personCharge">
                                                            <div class="col-md-5 no-padding">
                                                                @Html.RequiredExDropDownListFor(p => personInChargeList[i].SalesEmployeeCode, new SelectList(SalesEmployeeList, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode", @data_row = i, @disabled = "disabled" })
                                                                @Html.HiddenFor(p => personInChargeList[i].SalesEmployeeCode)
                                                            </div>
                                                            <div class="col-md-5 input-group">
                                                                <div class="display-for roleName roleName_@i">
                                                                    @item.RoleName
                                                                </div>
                                                            </div>

                                                        </div>
                                                        i++;
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="input-group personCharge">
                                                        <div class="col-md-5 no-padding">
                                                            @Html.RequiredExDropDownListFor(p => personInChargeList[0].SalesEmployeeCode, new SelectList(SalesEmployeeList, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode", @data_row = 0, @disabled = "disabled" })
                                                        </div>
                                                        <div class="col-md-5 input-group">
                                                            <div class="display-for roleName roleName_0">

                                                            </div>
                                                        </div>

                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="personInChargeControls" style="display: grid">
                                                @if (personInChargeList != null && personInChargeList.Count > 0)
                                                {
                                                    int i = 0;

                                                    foreach (var item in personInChargeList)
                                                    {
                                                        <div class="input-group personCharge">
                                                            <div class="col-md-5 no-padding">
                                                                @Html.RequiredExDropDownListFor(p => personInChargeList[i].SalesEmployeeCode, new SelectList(SalesEmployeeList, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode", @data_row = i })
                                                            </div>
                                                            <div class="col-md-5 input-group">
                                                                <div class="display-for roleName roleName_@i">
                                                                    @item.RoleName
                                                                </div>
                                                                <span class="input-group-btn">
                                                                    @if (i == 0)
                                                                    {
                                                                        <button class="btn btn-default btn-addPersonCharge" type="button">
                                                                            <span class="glyphicon glyphicon-plus"></span>
                                                                        </button>
                                                                    }
                                                                    else
                                                                    {
                                                                        <button class="btn btn-default btn-removePersonCharge btn-danger" type="button">
                                                                            <span class="glyphicon glyphicon-minus"></span>
                                                                        </button>
                                                                    }
                                                                </span>
                                                            </div>

                                                        </div>
                                                        i++;
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="input-group personCharge">
                                                        <div class="col-md-5 no-padding">
                                                            @Html.RequiredExDropDownListFor(p => personInChargeList[0].SalesEmployeeCode, new SelectList(SalesEmployeeList, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode", @data_row = 0 })
                                                        </div>
                                                        <div class="col-md-5 input-group">
                                                            <div class="display-for roleName roleName_0">

                                                            </div>
                                                            <span class="input-group-btn">
                                                                <button class="btn btn-default btn-addPersonCharge" type="button">
                                                                    <span class="glyphicon glyphicon-plus"></span>
                                                                </button>
                                                            </span>
                                                        </div>

                                                    </div>
                                                }
                                            </div>
                                        }
                                    }

                                </div>
                            </div>
                            if (ViewBag.Type == "Account")
                            {
                                <!--NV TVVL-->
                                <div class="form-group">
                                    <div class="col-md-3">
                                        <div class="label-wrapper"><label class="control-label">@LanguageResource.Consult_MaterialEmployee</label></div>
                                    </div>
                                    <div class="col-md-8">
                                        <div class="row"></div>
                                        <div class="personInChargeControls6" style="display: grid">
                                            @if (personInCharge6List != null && personInCharge6List.Count > 0)
                                            {
                                                int i = 0;

                                                foreach (var item in personInCharge6List)
                                                {
                                                    <div class="input-group personCharge6">
                                                        <div class="col-md-5 no-padding">
                                                            @*@Html.RequiredExDropDownListFor(p => personInCharge6List[i].SalesEmployeeCode, new SelectList(SalesEmployeeList6, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode6", @data_row = i })*@
                                                            @Html.DropDownList("personInCharge6List[" + i + "].SalesEmployeeCode", new SelectList(SalesEmployeeList6, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode6", @data_row = i })
                                                        </div>
                                                        <div class="col-md-5 input-group">
                                                            <div class="display-for roleName6 roleName6_@i">
                                                                @item.RoleName
                                                            </div>
                                                            <span class="input-group-btn">
                                                                @if (i == 0)
                                                                {
                                                                    <button class="btn btn-default btn-addPersonCharge6" type="button">
                                                                        <span class="glyphicon glyphicon-plus"></span>
                                                                    </button>
                                                                }
                                                                else
                                                                {
                                                                    <button class="btn btn-default btn-removePersonCharge6 btn-danger" type="button">
                                                                        <span class="glyphicon glyphicon-minus"></span>
                                                                    </button>
                                                                }
                                                            </span>
                                                        </div>

                                                    </div>
                                                    i++;
                                                }
                                            }
                                            else
                                            {
                                                <div class="input-group personCharge6">
                                                    <div class="col-md-5 no-padding">
                                                        @*@Html.RequiredExDropDownListFor(p => personInCharge6List[0].SalesEmployeeCode, new SelectList(SalesEmployeeList6, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode6", @data_row = 0 })*@
                                                        @Html.DropDownList("personInCharge6List[0].SalesEmployeeCode", new SelectList(SalesEmployeeList6, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode6", @data_row = 0 })
                                                    </div>
                                                    <div class="col-md-5 input-group">
                                                        <div class="display-for roleName6 roleName6_0">

                                                        </div>
                                                        <span class="input-group-btn">
                                                            <button class="btn btn-default btn-addPersonCharge6" type="button">
                                                                <span class="glyphicon glyphicon-plus"></span>
                                                            </button>
                                                        </span>
                                                    </div>

                                                </div>
                                            }
                                        </div>

                                    </div>
                                </div>
                            }

                        }
                    }
                    else
                    {
                        if (personInChargeList != null && personInChargeList.Count > 0)
                        {
                            int i = 0;

                            foreach (var item in personInChargeList)
                            {
                                <span>@Html.HiddenFor(p => personInChargeList[i].SalesEmployeeCode)</span>
                                i++;
                            }
                        }

                        if (personInCharge2List != null && personInCharge2List.Count > 0)
                        {
                            int i = 0;

                            foreach (var item in personInCharge2List)
                            {
                                <span>@Html.HiddenFor(p => personInCharge2List[i].SalesEmployeeCode)</span>
                                i++;
                            }
                        }

                        if (personInCharge3List != null && personInCharge3List.Count > 0)
                        {
                            int i = 0;

                            foreach (var item in personInCharge3List)
                            {
                                <span>@Html.HiddenFor(p => personInCharge3List[i].SalesEmployeeCode)</span>
                                i++;
                            }
                        }

                    }



                    @if (ViewBag.Type == "Opportunity" || ViewBag.Type == "Lead")
                    {
                        <!--User master-->
                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper"><label class="control-label">User master</label></div>
                            </div>
                            <div class="col-md-8">
                                <div class="row"></div>
                                <div class="personInChargeControls4" style="display: grid">
                                    @if (personInCharge4List != null && personInCharge4List.Count > 0)
                                    {
                                        int i = 0;

                                        foreach (var item in personInCharge4List)
                                        {
                                            <div class="input-group personCharge4">
                                                <div class="col-md-5 no-padding">
                                                    @Html.DropDownList("personInCharge4List[" + i + "].SalesEmployeeCode", new SelectList(SalesEmployeeList4, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode4", @data_row = i })
                                                </div>
                                                <div class="col-md-5 input-group">
                                                    <div class="display-for roleName4 roleName4_@i">
                                                        @item.RoleName
                                                    </div>
                                                    <span class="input-group-btn">
                                                        @if (i == 0)
                                                        {
                                                            <button class="btn btn-default btn-addPersonCharge4" type="button">
                                                                <span class="glyphicon glyphicon-plus"></span>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-default btn-removePersonCharge4 btn-danger" type="button">
                                                                <span class="glyphicon glyphicon-minus"></span>
                                                            </button>
                                                        }
                                                    </span>
                                                </div>

                                            </div>
                                            i++;
                                        }
                                    }
                                    else
                                    {
                                        <div class="input-group personCharge4">
                                            <div class="col-md-5 no-padding">
                                                @Html.DropDownList("personInCharge4List[0].SalesEmployeeCode", new SelectList(SalesEmployeeList4, "SalesEmployeeCode", "SalesEmployeeName", ViewBag.EmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode4", @data_row = 0 })
                                            </div>
                                            <div class="col-md-5 input-group">
                                                <div class="display-for roleName4 roleName4_0">

                                                </div>
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default btn-addPersonCharge4" type="button">
                                                        <span class="glyphicon glyphicon-plus"></span>
                                                    </button>
                                                </span>
                                            </div>

                                        </div>
                                    }
                                </div>

                            </div>
                        </div>

                        <!--User truy cập-->
                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper"><label class="control-label">NV truy cập</label></div>
                            </div>
                            <div class="col-md-8">
                                <div class="row"></div>
                                <div class="personInChargeControls5" style="display: grid">
                                    @if (personInCharge5List != null && personInCharge5List.Count > 0)
                                    {
                                        int i = 0;

                                        foreach (var item in personInCharge5List)
                                        {
                                            <div class="input-group personCharge5">
                                                <div class="col-md-5 no-padding">
                                                    @Html.DropDownList("personInCharge5List[" + i + "].SalesEmployeeCode", new SelectList(SalesEmployeeList5, "SalesEmployeeCode", "SalesEmployeeName", item.SalesEmployeeCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode5", @data_row = i })
                                                </div>
                                                <div class="col-md-5 input-group">
                                                    <div class="display-for roleName5 roleName5_@i">
                                                        @item.RoleName
                                                    </div>
                                                    <span class="input-group-btn">
                                                        @if (i == 0)
                                                        {
                                                            <button class="btn btn-default btn-addPersonCharge5" type="button">
                                                                <span class="glyphicon glyphicon-plus"></span>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-default btn-removePersonCharge5 btn-danger" type="button">
                                                                <span class="glyphicon glyphicon-minus"></span>
                                                            </button>
                                                        }
                                                    </span>
                                                </div>

                                            </div>
                                            i++;
                                        }
                                    }
                                    else
                                    {
                                        <div class="input-group personCharge5">
                                            <div class="col-md-5 no-padding">
                                                @Html.DropDownList("personInCharge5List[0].SalesEmployeeCode", new SelectList(SalesEmployeeList5, "SalesEmployeeCode", "SalesEmployeeName"), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search personemployeecode5", @data_row = 0 })
                                            </div>
                                            <div class="col-md-5 input-group">
                                                <div class="display-for roleName5 roleName5_0">

                                                </div>
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default btn-addPersonCharge5" type="button">
                                                        <span class="glyphicon glyphicon-plus"></span>
                                                    </button>
                                                </span>
                                            </div>

                                        </div>
                                    }
                                </div>

                            </div>
                        </div>
                    }


                    @if (ViewBag.Type == "Opportunity")
                    {
                        <!--Tình trạng dự án-->
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text3)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Text3, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text3)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @Html.TextAreaFor(p => p.Text3, new { @class = "form-control" })
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Text3)
                        }
                        <!--Hoàn thiện-->
                        @*if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text4)))
            {
                if (!string.IsNullOrEmpty(Model.ProjectStatus))
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            <div class="label-wrapper">
                                <label class="control-label">Xác suất</label>
                            </div>
                        </div>
                        <div class="col-md-8">
                            @Html.RequiredTextboxFor(p => p.OpportunityPercentage, new { @disabled = "disabled" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            <div class="label-wrapper">
                                <label class="control-label">Tình trạng dự án</label>
                            </div>
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(p => p.ProjectStatus, new { @class = "form-control", @disabled = "disabled" })
                        </div>
                    </div>
                }

                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelByPropertyNameFor(p => p.Text4, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text4)).Select(p => p.Note).FirstOrDefault())
                    </div>
                    <div class="col-md-1">
                        @Html.HiddenFor(p => p.Text4, new { @class = "form-control" })
                        <div class="label-wrapper">
                            <label class="control-label">Năm</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        @Html.DropDownList("CompleteYear", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                    </div>
                    <div class="col-md-1">
                        @Html.HiddenFor(p => p.Text5, new { @class = "form-control" })
                        <div class="label-wrapper">
                            <label class="control-label">Quý</label>
                        </div>
                    </div>
                    <div class="col-md-2">
                        @Html.DropDownList("CompleteQuarter", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                    </div>
                </div>
            }
            else
            {
                @Html.HiddenFor(p => p.Text4)
                @Html.HiddenFor(p => p.Text5)
            }*@
                    }
                    @if (ViewBag.Type == ConstProfileType.Account)
                    {
                        //Ngày giao dịch đầu tiên (Account)
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.Date3)) )
                        {
                            <div class="form-group">
                                @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p => p.Date3)))
                                {
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Date3, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, DateTime?>(p1 => p1.Date3)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-2">
                                        @Html.RequiredTextboxFor(p => p.Date3, "{0:yyyy-MM-dd}", new { @type = "date" })
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Date3)
                        }
                        // Thói quen dùng sản phẩm mới (Khách hàng)
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>
                            (p => p.Dropdownlist7)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Dropdownlist7, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist7)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @if (ViewBag.Dropdownlist7 != null)
                                    {
                                        @Html.DropDownList("Dropdownlist7", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Dropdownlist7)
                        }

                        //Chỉ định dùng vật liệu An Cường (Khách hàng)
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>
                            (p => p.Dropdownlist8)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Dropdownlist8, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist8)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @if (ViewBag.Dropdownlist8 != null)
                                    {
                                        @Html.DropDownList("Dropdownlist8", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Dropdownlist8)
                        }
                    }
                    <!--Yêu cầu tạo khách ở ECC-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.isCreateRequest)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.isCreateRequest)
                            </div>
                            <div class="col-md-2">
                                @Html.DropDownList("isCreateRequest", null, null, new { @class = "form-control with-search" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.isCreateRequest)
                    }

                    @if (ViewBag.Type == ConstProfileType.Account)
                    {
                        <!--Vai trò trong giao dịch-->
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.PartnerFunctionCode)
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(p => p.PartnerFunctionCode, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                            </div>
                        </div>
                        <!--Điều khoản thanh toán-->
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.PaymentTermCode)
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(p => p.PaymentTermCode, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                            </div>
                        </div>
                        <!--Phương thức thanh toán-->
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.PaymentMethodCode)
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(p => p.PaymentMethodCode, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                            </div>
                        </div>
                        <!--Tài khoản doanh thu-->
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.CustomerAccountAssignmentGroupCode)
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(p => p.CustomerAccountAssignmentGroupCode, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                            </div>
                        </div>
                        <!--Tài khoản công nợ-->
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.ReconcileAccountCode)
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(p => p.ReconcileAccountCode, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                            </div>
                        </div>
                        <!--Phân loại thuế VAT-->
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.TaxClassificationCode)
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(p => p.TaxClassificationCode, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                            </div>
                        </div>

                        <!--Đơn vị tiền tệ-->
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.CurrencyCode)
                            </div>
                            <div class="col-md-8">
                                @Html.DropDownListFor(p => p.CurrencyCode, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                            </div>
                        </div>
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.Manager)
                            </div>
                            <div class="col-md-8">
                                <div class="input-group input-group-required input-group-select-required">
                                    @Html.DropDownListFor(p => p.Manager, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    <div class="required-icon" data-original-title="" title="">
                                        <div class="text">*</div>
                                    </div>
                                    <span class="validation-text field-validation-valid" data-valmsg-for="Manager" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                        </div>
                        <div class="form-group ecc-field">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.DebsEmployee)
                            </div>
                            <div class="col-md-8">
                                <div class="input-group input-group-required input-group-select-required">
                                    @Html.DropDownListFor(p => p.DebsEmployee, null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    <div class="required-icon" data-original-title="" title="">
                                        <div class="text">*</div>
                                    </div>
                                    <span class="validation-text field-validation-valid" data-valmsg-for="DebsEmployee" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                        </div>
                        //Email nhận HĐĐT
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text4)))
                        {
                            <div class="form-group ecc-field">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Text4, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text4)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @{
                                        var fieldText4 = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text4)).Select(p => p.Note).FirstOrDefault();
                                    }
                                    @if (fieldText4.ToLower().Contains("email"))
                                    {
                                        @Html.RequiredTextboxFor(p => p.Text4, new { @class = "form-control" })
                                    }
                                    else
                                    {
                                        @Html.TextAreaFor(p => p.Text4, new { @class = "form-control" })
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Text4)
                        }
                    }

                    <!--Bổ sung-->
                    @if (ViewBag.Type != ConstProfileType.Opportunity && ViewBag.Type != ConstProfileType.Lead)
                    {
                        if (ViewBag.Type != ConstProfileType.Competitor)
                        {
                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text2)))
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Text2, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text2)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-8">
                                        @Html.TextAreaFor(p => p.Text2, new { @class = "form-control" })
                                    </div>
                                </div>
                            }
                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text3)))
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Text3, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text3)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-8">
                                        @{
                                            var fieldText3 = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text3)).Select(p => p.Note).FirstOrDefault();
                                        }
                                        @if (fieldText3.ToLower().Contains("email"))
                                        {
                                            @Html.RequiredTextboxFor(p => p.Text3, new { @class = "form-control" })
                                        }
                                        else
                                        {
                                            @Html.TextAreaFor(p => p.Text3, new { @class = "form-control" })
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(p => p.Text3)
                            }

                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text5)))
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Text5, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text5)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-8">
                                        @Html.TextAreaFor(p => p.Text5, new { @class = "form-control" })
                                    </div>
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(p => p.Text5)
                            }
                        }
                        if (ViewBag.Type == ConstProfileType.Competitor)
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    <div class="label-wrapper">
                                        <label class="control-label">Khu vực hoạt động</label>
                                    </div>
                                </div>
                                <div class="col-md-8">
                                    @if (CompetitorAreaList != null && CompetitorAreaList.Count > 0)
                                    {
                                        <table class="table table-bordered table-striped table-hover no-footer">
                                            <thead class="isd-table-header">
                                                <tr>
                                                    <th class="text-center isd-table-th-stt">STT</th>
                                                    <th>Loại</th>
                                                    <th class="text-center">Chọn</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @{ int areaIndex = 0;}
                                                @foreach (var area in CompetitorAreaList)
                                                {
                                                    int areaK = areaIndex;
                                                    areaIndex++;
                                                    string check = string.Empty;
                                                    if (ProfileAreaList != null && ProfileAreaList.Count > 0)
                                                    {
                                                        var profileArea = ProfileAreaList.Where(p => p.CatalogCode == area.CatalogCode).FirstOrDefault();
                                                        if (profileArea != null && profileArea.IsChecked == true)
                                                        {
                                                            check = "checked";
                                                        }
                                                    }

                                                    <tr>
                                                        <td class="text-center">@areaIndex</td>
                                                        <td>
                                                            <input type="hidden" id="AreaCatalogCode-@areaK" name="CompetitorAreaList[@areaK].CatalogCode" value="@area.CatalogCode" />
                                                            <span>@area.CatalogText_vi</span>
                                                        </td>
                                                        <td class="text-center"><input type="checkbox" id="AreaIsChecked-@areaK" name="CompetitorAreaList[@areaK].IsChecked" @check value="True" /></td>
                                                    </tr>
                                                }
                                            </tbody>
                                            <tfoot></tfoot>
                                        </table>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            if (CompetitorAreaList != null && CompetitorAreaList.Count > 0)
                            {
                                int areaIndex = 0;
                                foreach (var area in CompetitorAreaList)
                                {
                                    int areaK = areaIndex;
                                    areaIndex++;
                                    string check = "false";
                                    if (ProfileAreaList != null && ProfileAreaList.Count > 0)
                                    {
                                        var profileArea = ProfileAreaList.Where(p => p.CatalogCode == area.CatalogCode).FirstOrDefault();
                                        if (profileArea != null && profileArea.IsChecked == true)
                                        {
                                            check = "true";
                                        }
                                    }

                                    <input type="hidden" id="AreaCatalogCode-@areaK" name="CompetitorAreaList[@areaK].CatalogCode" value="@area.CatalogCode" />

                                    <input type="hidden" id="AreaIsChecked-@areaK" name="CompetitorAreaList[@areaK].IsChecked" value="@check" />

                                }
                            }
                        }
                        if (ViewBag.Type == ConstProfileType.Competitor)
                        {
                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, decimal?>(p => p.Number1)))
                            {
                                decimal? Number1 = null;
                                string Number1ValueDisplay = string.Empty;
                                if (Model != null && Model.Number1.HasValue)
                                {
                                    Number1ValueDisplay = string.Format("{0:n2}", Model.Number1.Value);
                                    Number1 = Model.Number1.Value;

                                }
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Number1, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, decimal?>(p1 => p1.Number1)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-8">
                                        <input type="number" class="form-control Number1" style="text-align:left!important" id="Number1" value="@Number1ValueDisplay" name="Number1" />
                                        <div class="text-right">
                                            @if (Number1.HasValue)
                                            {
                                                <span id="Number1ValueDisplay">@string.Format("{0:n2}", Number1) Tỷ</span>
                                            }
                                            else
                                            {
                                                <span id="Number1ValueDisplay"></span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }

                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, decimal?>(p => p.Number2)))
                            {
                                decimal? Number2 = null;
                                string Number2ValueDisplay = string.Empty;
                                if (Model != null && Model.Number2.HasValue)
                                {
                                    Number2ValueDisplay = string.Format("{0:0.#}", Model.Number2.Value);
                                    Number2 = Model.Number2.Value;

                                }
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Number2, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, decimal?>(p1 => p1.Number2)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-8">
                                        <input type="number" class="form-control Number2" style="text-align:left!important" id="Number2" value="@Number2ValueDisplay" name="Number2" />
                                        <div class="text-right">
                                            @if (Number2.HasValue)
                                            {
                                                <span id="Number2ValueDisplay">@string.Format("{0:0.#}", Number2)%</span>
                                            }
                                            else
                                            {
                                                <span id="Number2ValueDisplay"></span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        if (ViewBag.Type != ConstProfileType.Account)
                        {
                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist7)))
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Dropdownlist7, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist7)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-8">
                                        @if (ViewBag.Dropdownlist7 != null)
                                        {
                                            @Html.DropDownList("Dropdownlist7", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(p => p.Dropdownlist7)
                            }


                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist8)))
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Dropdownlist8, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist8)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-8">
                                        @if (ViewBag.Dropdownlist8 != null)
                                        {
                                            @Html.DropDownList("Dropdownlist8", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                @Html.HiddenFor(p => p.Dropdownlist8)
                            }
                        }
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist9)))
                        {
                            if (ViewBag.Type == ConstProfileType.Competitor)
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Dropdownlist9, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist9)).Select(p => p.Note).FirstOrDefault(), "Dùng lọc đối thủ theo nhóm hàng trong thông tin dự án")
                                    </div>
                                    <div class="col-md-8">
                                        @if (ViewBag.CompetitorIndustryList != null)
                                        {
                                            @Html.DropDownList("CompetitorIndustryList", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search", @multiple = "multiple" })
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.LabelByPropertyNameFor(p => p.Dropdownlist9, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist9)).Select(p => p.Note).FirstOrDefault())
                                    </div>
                                    <div class="col-md-8">
                                        @if (ViewBag.Dropdownlist9 != null)
                                        {
                                            @Html.DropDownList("Dropdownlist9", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Dropdownlist9)
                        }
                        if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Dropdownlist10)))
                        {
                            <div class="form-group">
                                <div class="col-md-3">
                                    @Html.LabelByPropertyNameFor(p => p.Dropdownlist10, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Dropdownlist10)).Select(p => p.Note).FirstOrDefault())
                                </div>
                                <div class="col-md-8">
                                    @if (ViewBag.Dropdownlist10 != null)
                                    {
                                        @Html.DropDownList("Dropdownlist10", null, LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search" })
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(p => p.Dropdownlist10)
                        }
                    }

                    <!--Chỉ định vật liệu An Cường => spec-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsAnCuongAccessory)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.IsAnCuongAccessory, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p1 => p1.IsAnCuongAccessory)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                <div id="spec-tab" class="nav-tabs-custom" style="border-width: 1px; border-color: lightgray; border-style: solid">
                                    <ul class="nav nav-pills nav nav-tabs">
                                        <li class="active">
                                            <a href="#tab-internal" data-toggle="tab">@LanguageResource.TitleAnCuong</a>
                                        </li>
                                        <li>
                                            <a href="#tab-competitor" data-toggle="tab">@LanguageResource.TabCompetitor</a>
                                        </li>
                                    </ul>

                                    <div class="tab-content clearfix">
                                        <div class="tab-pane active" id="tab-internal" style="overflow-x: scroll;">
                                            @if (SpecList != null && SpecList.Count > 0)
                                            {
                                                <table class="table table-bordered table-striped table-hover no-footer">
                                                    <thead class="isd-table-header">
                                                        <tr>
                                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                                            <th style="width:110px;">@LanguageResource.AccessoryCategoryType</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.TitleAnCuong</th>
                                                            <th style="min-width:250px;">@LanguageResource.MaterialCode</th>
                                                            <th style="min-width:160px;">@LanguageResource.BillionValue</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.IsWon</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.IsLose</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{ int specIndex = 0;}
                                                        @foreach (var spec in SpecList)
                                                        {
                                                            int specK = specIndex;
                                                            specIndex++;
                                                            string IsChecked = string.Empty;
                                                            Guid? Id = null;
                                                            decimal? ProjectValue = null;
                                                            string ProjectValueDisplay = string.Empty;
                                                            string IsWon = string.Empty;
                                                            string IsLose = string.Empty;
                                                            if (ProfileSpecInternalList != null && ProfileSpecInternalList.Count > 0)
                                                            {
                                                                var profileSpec = ProfileSpecInternalList.Where(p => p.CatalogCode == spec.CatalogCode).FirstOrDefault();
                                                                if (profileSpec != null)
                                                                {
                                                                    Id = profileSpec.OpportunityConstructionId;
                                                                    IsChecked = profileSpec.IsChecked == true ? "checked" : string.Empty;
                                                                    ProjectValue = profileSpec.ProjectValue;
                                                                    ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                                                    IsWon = profileSpec.IsWon == true ? "checked" : string.Empty;
                                                                    IsLose = profileSpec.IsWon == false ? "checked" : string.Empty;
                                                                }
                                                            }

                                                            <tr>
                                                                <td class="text-center">@specIndex</td>
                                                                <td>
                                                                    <input type="hidden" id="SpecInternalCatalogCode-@specK" name="SpecInternalList[@specK].CatalogCode" value="@spec.CatalogCode" />
                                                                    <span>@spec.CatalogText_vi</span>
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="checkbox" id="SpecInternalIsChecked-@specK" name="SpecInternalList[@specK].IsChecked" value="True" @IsChecked class="specCompetitorCheck" />
                                                                </td>
                                                                <td>
                                                                    <select id="SpecInternalMaterialId-@specK" name="SpecInternalList[@specK].MaterialId" class="form-control specInternalMaterial" multiple data-row="@specK" data-code="@spec.CatalogCode">
                                                                        @*<option value="">@LanguageResource.Dropdownlist_Choose</option>*@
                                                                        @if (ProfileSpecInternalMaterialList != null && ProfileSpecInternalMaterialList.Count > 0)
                                                                        {
                                                                            foreach (var mat in ProfileSpecInternalMaterialList)
                                                                            {
                                                                                if (mat.additionalGuid == Id)
                                                                                {
                                                                                    <option value="@mat.id">@mat.name</option>
                                                                                }
                                                                            }
                                                                        }
                                                                    </select>
                                                                </td>
                                                                <td class="text-right">
                                                                    <input type="number" class="form-control projectValue" id="SpecInternalProjectValue-@specK" name="SpecInternalList[@specK].ProjectValue" value="@ProjectValueDisplay" data-row="@specK" />
                                                                    <div>
                                                                        @if (ProjectValue.HasValue)
                                                                        {
                                                                            <span id="SpecInternalProjectValueDisplay-@specK">@string.Format("{0:n2}", ProjectValue) Tỷ</span>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span id="SpecInternalProjectValueDisplay-@specK"></span>
                                                                        }
                                                                    </div>
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="radio" id="SpecInternalIsWon-@specK" name="SpecInternalList[@specK].IsWon" value="true" @IsWon />
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="radio" id="SpecInternalIsWon-@specK" name="SpecInternalList[@specK].IsWon" value="false" @IsLose />
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                    <tfoot></tfoot>
                                                </table>
                                            }
                                        </div>
                                        <div class="tab-pane" id="tab-competitor" style="overflow-x: scroll;">
                                            @if (SpecList != null && SpecList.Count > 0)
                                            {
                                                <table class="table table-bordered table-striped table-hover no-footer">
                                                    <thead class="isd-table-header">
                                                        <tr>
                                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                                            <th style="width:110px;">@LanguageResource.AccessoryCategoryType</th>
                                                            <th style="min-width:250px;">@LanguageResource.TabCompetitor</th>
                                                            <th style="min-width:160px;">@LanguageResource.MaterialCode</th>
                                                            <th style="min-width:160px;">@LanguageResource.BillionValue</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.IsWon</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.IsLose</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{ int specIndex = 0;}
                                                        @foreach (var spec in SpecList)
                                                        {
                                                            int specK = specIndex;
                                                            specIndex++;
                                                            string MaterialCode = string.Empty;
                                                            decimal? ProjectValue = null;
                                                            string ProjectValueDisplay = string.Empty;
                                                            string IsWon = string.Empty;
                                                            string IsLose = string.Empty;
                                                            Guid? Id = null;
                                                            if (ProfileSpecCompetitorList != null && ProfileSpecCompetitorList.Count > 0)
                                                            {
                                                                var profileSpec = ProfileSpecCompetitorList.Where(p => p.CatalogCode == spec.CatalogCode).FirstOrDefault();
                                                                if (profileSpec != null)
                                                                {
                                                                    MaterialCode = profileSpec.MaterialCode;
                                                                    ProjectValue = profileSpec.ProjectValue;
                                                                    //ProjectValueDisplay = ProjectValue.ToString().Replace(".00", "");
                                                                    ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                                                    IsWon = profileSpec.IsWon == true ? "checked" : string.Empty;
                                                                    IsLose = profileSpec.IsWon == false ? "checked" : string.Empty;
                                                                    Id = profileSpec.OpportunityConstructionId;
                                                                }
                                                            }

                                                            <tr>
                                                                <td class="text-center">@specIndex</td>
                                                                <td>
                                                                    <input type="hidden" id="SpecCompetitorCatalogCode-@specK" name="SpecCompetitorList[@specK].CatalogCode" value="@spec.CatalogCode" />
                                                                    <span>@spec.CatalogText_vi</span>
                                                                </td>
                                                                <td>
                                                                    <select id="SpecCompetitorId-@specK" name="SpecCompetitorList[@specK].CompetitorId" class="form-control specCompetitor" multiple data-row="@specK" data-code="@spec.CatalogCode">
                                                                        @*<option value="">@LanguageResource.Dropdownlist_Choose</option>*@
                                                                        @if (ProfileSpecCompetitorMappingList != null && ProfileSpecCompetitorMappingList.Count > 0)
                                                                        {
                                                                            foreach (var map in ProfileSpecCompetitorMappingList)
                                                                            {
                                                                                if (map.additionalGuid == Id)
                                                                                {
                                                                                    <option value="@map.id">@map.name</option>
                                                                                }
                                                                            }
                                                                        }
                                                                    </select>
                                                                </td>
                                                                <td><textarea class="form-control" cols="20" id="SpecCompetitorMaterialCode-@specK" name="SpecCompetitorList[@specK].MaterialCode" rows="2">@MaterialCode</textarea></td>
                                                                <td class="text-right">
                                                                    <input type="number" class="form-control projectValue2" id="SpecProjectValue-@specK" name="SpecCompetitorList[@specK].ProjectValue" value="@ProjectValueDisplay" data-row="@specK" />
                                                                    <div>
                                                                        @if (ProjectValue.HasValue)
                                                                        {
                                                                            <span id="SpecCompetitorProjectValueDisplay-@specK">@string.Format("{0:n2}", ProjectValue) Tỷ</span>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span id="SpecCompetitorProjectValueDisplay-@specK"></span>
                                                                        }
                                                                    </div>
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="radio" id="SpecCompetitorIsWon-@specK" name="SpecCompetitorList[@specK].IsWon" value="true" @IsWon />
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="radio" id="SpecCompetitorIsWon-@specK" name="SpecCompetitorList[@specK].IsWon" value="false" @IsLose />
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                    <tfoot></tfoot>
                                                </table>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div>
                            @if (SpecList != null && SpecList.Count > 0)
                            {
                                int specIndex = 0;
                                foreach (var spec in SpecList)
                                {
                                    int specK = specIndex;
                                    specIndex++;
                                    //1. An Cường
                                    string IsChecked = string.Empty;
                                    Guid? Id = null;
                                    decimal? ProjectValue = null;
                                    string ProjectValueDisplay = string.Empty;
                                    string IsWon = string.Empty;
                                    if (ProfileSpecInternalList != null && ProfileSpecInternalList.Count > 0)
                                    {
                                        var profileSpec = ProfileSpecInternalList.Where(p => p.CatalogCode == spec.CatalogCode).FirstOrDefault();
                                        if (profileSpec != null)
                                        {
                                            Id = profileSpec.OpportunityConstructionId;
                                            IsChecked = profileSpec.IsChecked == true ? "checked" : string.Empty;
                                            ProjectValue = profileSpec.ProjectValue;
                                            ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                            //ProjectValueDisplay = ProjectValue.ToString().Replace(".00", "");
                                            IsWon = profileSpec.IsWon == true ? "True" : "False";
                                        }
                                    }

                                    <input type="hidden" id="SpecInternalCatalogCode-@specK" name="SpecInternalList[@specK].CatalogCode" value="@spec.CatalogCode" />

                                    if (ProfileSpecInternalMaterialList != null && ProfileSpecInternalMaterialList.Count > 0)
                                    {
                                        int matIndex = 0;
                                        foreach (var mat in ProfileSpecInternalMaterialList)
                                        {
                                            if (mat.additionalGuid == Id)
                                            {
                                                <input type="hidden" id="SpecCompetitorCatalogCode-@specK" name="SpecInternalList[@specK].MaterialId[@matIndex]" value="@mat.id" />
                                            }
                                            matIndex++;
                                        }
                                    }
                                    <input type="hidden" class="form-control" id="SpecInternalProjectValue-@specK" name="SpecInternalList[@specK].ProjectValue" value="@ProjectValueDisplay" data-row="@specK" />
                                    <input type="hidden" id="SpecInternalIsWon-@specK" name="SpecInternalList[@specK].IsWon" value="@IsWon" />

                                    //2. Đối thủ
                                    string MaterialCode = string.Empty;
                                    decimal? ProjectValue2 = null;
                                    string ProjectValueDisplay2 = string.Empty;
                                    string IsWon2 = string.Empty;
                                    Guid? Id2 = null;
                                    if (ProfileSpecCompetitorList != null && ProfileSpecCompetitorList.Count > 0)
                                    {
                                        var profileSpec = ProfileSpecCompetitorList.Where(p => p.CatalogCode == spec.CatalogCode).FirstOrDefault();
                                        if (profileSpec != null)
                                        {
                                            MaterialCode = profileSpec.MaterialCode;
                                            ProjectValue2 = profileSpec.ProjectValue;
                                            //ProjectValueDisplay2 = ProjectValue.ToString().Replace(".00", "");
                                            ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                            IsWon2 = profileSpec.IsWon == true ? "True" : "False";
                                            Id2 = profileSpec.OpportunityConstructionId;
                                        }
                                    }

                                    <input type="hidden" id="SpecCompetitorCatalogCode-@specK" name="SpecCompetitorList[@specK].CatalogCode" value="@spec.CatalogCode" />

                                    if (ProfileSpecCompetitorMappingList != null && ProfileSpecCompetitorMappingList.Count > 0)
                                    {
                                        foreach (var map in ProfileSpecCompetitorMappingList)
                                        {
                                            int matIndex = 0;
                                            if (map.additionalGuid == Id2)
                                            {
                                                <input type="hidden" id="SpecCompetitorId-@specK" name="SpecCompetitorList[@specK].CompetitorId[@matIndex]" value="@map.id" />
                                            }
                                            matIndex++;
                                        }
                                    }
                                    <input type="hidden" id="SpecCompetitorMaterialCode-@specK" name="SpecCompetitorList[@specK].MaterialCode" value="@MaterialCode" />
                                    <input type="hidden" class="form-control" id="SpecProjectValue-@specK" name="SpecCompetitorList[@specK].ProjectValue" value="@ProjectValueDisplay" data-row="@specK" />
                                    <input type="hidden" id="SpecCompetitorIsWon-@specK" name="SpecCompetitorList[@specK].IsWon" value="True" @IsWon2 />
                                }
                            }
                        </div>
                    }
                    <!--Ghi chú Spec-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Text10)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Text10, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Text10)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @Html.TextAreaFor(p => p.Text10, new { @class = "form-control" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Text10)
                    }

                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.IsThiCong)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.IsThiCong, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p1 => p1.IsThiCong)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                <div id="construction-tab" class="nav-tabs-custom" style="border-width: 1px; border-color: lightgray; border-style: solid">
                                    <ul class="nav nav-pills nav nav-tabs">
                                        <li class="active">
                                            <a href="#tab-construction-internal" data-toggle="tab">@LanguageResource.TitleAnCuong</a>
                                        </li>
                                        <li>
                                            <a href="#tab-construction-competitor" data-toggle="tab">@LanguageResource.TabCompetitor</a>
                                        </li>
                                    </ul>

                                    <div class="tab-content clearfix">
                                        <div class="tab-pane active" id="tab-construction-internal" style="overflow-x: scroll;">
                                            @if (ConstructionList != null && ConstructionList.Count > 0)
                                            {
                                                <table class="table table-bordered table-striped table-hover no-footer">
                                                    <thead class="isd-table-header">
                                                        <tr>
                                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                                            <th style="width:510px;">@LanguageResource.AccessoryCategoryType</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.TitleAnCuong</th>
                                                            <th style="min-width:160px;">@LanguageResource.BillionValue</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.IsWon</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.IsLose</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{ int constructionIndex = 0;}
                                                        @foreach (var construction in ConstructionList)
                                                        {
                                                            int constructionK = constructionIndex;
                                                            constructionIndex++;
                                                            string IsChecked = string.Empty;
                                                            Guid? Id = null;
                                                            decimal? ProjectValue = null;
                                                            string ProjectValueDisplay = string.Empty;
                                                            string IsWon = string.Empty;
                                                            string IsLose = string.Empty;
                                                            if (ProfileConstructionInternalList != null && ProfileConstructionInternalList.Count > 0)
                                                            {
                                                                var profileConstruction = ProfileConstructionInternalList.Where(p => p.CatalogCode == construction.CatalogCode).FirstOrDefault();
                                                                if (profileConstruction != null)
                                                                {
                                                                    Id = profileConstruction.OpportunityConstructionId;
                                                                    IsChecked = profileConstruction.IsChecked == true ? "checked" : string.Empty;
                                                                    ProjectValue = profileConstruction.ProjectValue;
                                                                    //ProjectValueDisplay = ProjectValue.ToString().Replace(".00", "");
                                                                    ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                                                    ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                                                    IsWon = profileConstruction.IsWon == true ? "checked" : string.Empty;
                                                                    IsLose = profileConstruction.IsWon == false ? "checked" : string.Empty;
                                                                }
                                                            }

                                                            <tr>
                                                                <td class="text-center">@constructionIndex</td>
                                                                <td>
                                                                    <input type="hidden" id="ConstructionInternalCatalogCode-@constructionK" name="ConstructionInternalList[@constructionK].CatalogCode" value="@construction.CatalogCode" />
                                                                    <span>@construction.CatalogText_vi</span>
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="checkbox" id="ConstructionInternalIsChecked-@constructionK" name="ConstructionInternalList[@constructionK].IsChecked" value="True" @IsChecked />
                                                                </td>
                                                                <td class="text-right">
                                                                    <input type="number" class="form-control projectValue3" id="ConstructionInternalProjectValue-@constructionK" name="ConstructionInternalList[@constructionK].ProjectValue" value="@ProjectValueDisplay" data-row="@constructionK" />
                                                                    <div>
                                                                        @if (ProjectValue.HasValue)
                                                                        {
                                                                            <span id="ConstructionInternalProjectValueDisplay-@constructionK">@string.Format("{0:n2}", ProjectValue) Tỷ</span>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span id="ConstructionInternalProjectValueDisplay-@constructionK"></span>
                                                                        }
                                                                    </div>
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="radio" id="ConstructionInternalIsWon-@constructionK" name="ConstructionInternalList[@constructionK].IsWon" value="true" @IsWon />
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="radio" id="ConstructionInternalIsWon-@constructionK" name="ConstructionInternalList[@constructionK].IsWon" value="false" @IsLose />
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                    <tfoot></tfoot>
                                                </table>
                                            }
                                        </div>
                                        <div class="tab-pane" id="tab-construction-competitor" style="overflow-x: scroll;">
                                            @if (ConstructionList != null && ConstructionList.Count > 0)
                                            {
                                                <table class="table table-bordered table-striped table-hover no-footer">
                                                    <thead class="isd-table-header">
                                                        <tr>
                                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                                            <th style="width:110px;">@LanguageResource.AccessoryCategoryType</th>
                                                            <th style="min-width:250px;">@LanguageResource.TabCompetitor</th>
                                                            <th style="min-width:150px;">@LanguageResource.BillionValue</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.IsWon</th>
                                                            <th class="text-center" style="width:90px;">@LanguageResource.IsLose</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{ int constructionIndex = 0;}
                                                        @foreach (var construction in ConstructionList)
                                                        {
                                                            int constructionK = constructionIndex;
                                                            constructionIndex++;
                                                            decimal? ProjectValue = null;
                                                            string ProjectValueDisplay = string.Empty;
                                                            string IsWon = string.Empty;
                                                            string IsLose = string.Empty;
                                                            Guid? Id = null;
                                                            if (ProfileConstructionCompetitorList != null && ProfileConstructionCompetitorList.Count > 0)
                                                            {
                                                                var profileConstruction = ProfileConstructionCompetitorList.Where(p => p.CatalogCode == construction.CatalogCode).FirstOrDefault();
                                                                if (profileConstruction != null)
                                                                {
                                                                    ProjectValue = profileConstruction.ProjectValue;
                                                                    //ProjectValueDisplay = ProjectValue.ToString().Replace(".00", "");
                                                                    ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                                                    IsWon = profileConstruction.IsWon == true ? "checked" : string.Empty;
                                                                    IsLose = profileConstruction.IsWon == false ? "checked" : string.Empty;
                                                                    Id = profileConstruction.OpportunityConstructionId;
                                                                }
                                                            }

                                                            <tr>
                                                                <td class="text-center">@constructionIndex</td>
                                                                <td>
                                                                    <input type="hidden" id="ConstructionCompetitorCatalogCode-@constructionK" name="ConstructionCompetitorList[@constructionK].CatalogCode" value="@construction.CatalogCode" />
                                                                    <span>@construction.CatalogText_vi</span>
                                                                </td>
                                                                <td>
                                                                    <select id="ConstructionCompetitorId-@constructionK" name="ConstructionCompetitorList[@constructionK].CompetitorId" class="form-control constructionCompetitor" multiple data-row="@constructionK" data-code="@construction.CatalogCode">
                                                                        @*<option value="">@LanguageResource.Dropdownlist_Choose</option>*@
                                                                        @if (ProfileConstructionCompetitorMappingList != null && ProfileConstructionCompetitorMappingList.Count > 0)
                                                                        {
                                                                            foreach (var map in ProfileConstructionCompetitorMappingList)
                                                                            {
                                                                                if (map.additionalGuid == Id)
                                                                                {
                                                                                    <option value="@map.id">@map.name</option>
                                                                                }
                                                                            }
                                                                        }
                                                                    </select>
                                                                </td>
                                                                <td class="text-right">
                                                                    <input type="text" class="form-control projectValue4" id="ConstructionProjectValue-@constructionK" name="ConstructionCompetitorList[@constructionK].ProjectValue" value="@ProjectValueDisplay" data-row="@constructionK" />
                                                                    <div>
                                                                        @if (ProjectValue.HasValue)
                                                                        {
                                                                            <span id="ConstructionCompetitorProjectValueDisplay-@constructionK">@string.Format("{0:n2}", ProjectValue) Tỷ</span>
                                                                        }
                                                                        else
                                                                        {
                                                                            <span id="ConstructionCompetitorProjectValueDisplay-@constructionK"></span>
                                                                        }
                                                                    </div>
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="radio" id="ConstructionCompetitorIsWon-@constructionK" name="ConstructionCompetitorList[@constructionK].IsWon" value="true" @IsWon />
                                                                </td>
                                                                <td class="text-center">
                                                                    <input type="radio" id="ConstructionCompetitorIsWon-@constructionK" name="ConstructionCompetitorList[@constructionK].IsWon" value="false" @IsLose />
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                    <tfoot></tfoot>
                                                </table>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div>
                            @if (ConstructionList != null && ConstructionList.Count > 0)
                            {
                                int constructionIndex = 0;
                                foreach (var construction in ConstructionList)
                                {
                                    int constructionK = constructionIndex;
                                    constructionIndex++;
                                    //1. An Cường
                                    string IsChecked = string.Empty;
                                    Guid? Id = null;
                                    decimal? ProjectValue = null;
                                    string ProjectValueDisplay = string.Empty;
                                    string IsWon = string.Empty;
                                    if (ProfileConstructionInternalList != null && ProfileConstructionInternalList.Count > 0)
                                    {
                                        var profileConstruction = ProfileConstructionInternalList.Where(p => p.CatalogCode == construction.CatalogCode).FirstOrDefault();
                                        if (profileConstruction != null)
                                        {
                                            Id = profileConstruction.OpportunityConstructionId;
                                            IsChecked = profileConstruction.IsChecked == true ? "checked" : string.Empty;
                                            ProjectValue = profileConstruction.ProjectValue;
                                            //ProjectValueDisplay = ProjectValue.ToString().Replace(".00", "");
                                            ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                            IsWon = profileConstruction.IsWon == true ? "True" : "False";
                                        }
                                    }

                                    <input type="hidden" id="ConstructionInternalCatalogCode-@constructionK" name="ConstructionInternalList[@constructionK].CatalogCode" value="@construction.CatalogCode" />
                                    <input type="hidden" class="form-control" id="ConstructionInternalProjectValue-@constructionK" name="ConstructionInternalList[@constructionK].ProjectValue" value="@ProjectValueDisplay" data-row="@constructionK" />
                                    <input type="hidden" id="ConstructionInternalIsWon-@constructionK" name="ConstructionInternalList[@constructionK].IsWon" value="@IsWon" />

                                    //2. Đối thủ
                                    string MaterialCode = string.Empty;
                                    decimal? ProjectValue2 = null;
                                    string ProjectValueDisplay2 = string.Empty;
                                    string IsWon2 = string.Empty;
                                    Guid? Id2 = null;
                                    if (ProfileConstructionCompetitorList != null && ProfileConstructionCompetitorList.Count > 0)
                                    {
                                        var profileConstruction = ProfileConstructionCompetitorList.Where(p => p.CatalogCode == construction.CatalogCode).FirstOrDefault();
                                        if (profileConstruction != null)
                                        {
                                            MaterialCode = profileConstruction.MaterialCode;
                                            ProjectValue2 = profileConstruction.ProjectValue;
                                            //ProjectValueDisplay2 = ProjectValue.ToString().Replace(".00", "");
                                            ProjectValueDisplay = string.Format("{0:n2}", ProjectValue);
                                            IsWon2 = profileConstruction.IsWon == true ? "True" : "False";
                                            Id2 = profileConstruction.OpportunityConstructionId;
                                        }
                                    }

                                    <input type="hidden" id="ConstructionCompetitorCatalogCode-@constructionK" name="ConstructionCompetitorList[@constructionK].CatalogCode" value="@construction.CatalogCode" />

                                    if (ProfileConstructionCompetitorMappingList != null && ProfileConstructionCompetitorMappingList.Count > 0)
                                    {
                                        foreach (var map in ProfileConstructionCompetitorMappingList)
                                        {
                                            int matIndex = 0;
                                            if (map.additionalGuid == Id2)
                                            {
                                                <input type="hidden" id="ConstructionCompetitorId-@constructionK" name="ConstructionCompetitorList[@constructionK].CompetitorId[@matIndex]" value="@map.id" />
                                            }
                                            matIndex++;
                                        }
                                    }
                                    <input type="hidden" id="ConstructionCompetitorMaterialCode-@constructionK" name="ConstructionCompetitorList[@constructionK].MaterialCode" value="@MaterialCode" />
                                    <input type="hidden" class="form-control" id="ConstructionProjectValue-@constructionK" name="ConstructionCompetitorList[@constructionK].ProjectValue" value="@ProjectValueDisplay" data-row="@constructionK" />
                                    <input type="hidden" id="ConstructionCompetitorIsWon-@constructionK" name="ConstructionCompetitorList[@constructionK].IsWon" value="True" @IsWon2 />
                                }
                            }
                        </div>
                    }

                    @if (ViewBag.Type == ConstProfileType.Opportunity)
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.TooltipLabelFor(p => p.OtherBrand)
                            </div>
                            <div class="col-md-3">
                                @Html.TextAreaFor(p => p.OtherBrand, new { @class = "form-control" })
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.OtherBrand)
                    }

                    @if (ViewBag.Type == ConstProfileType.Competitor)
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                <div class="label-wrapper">
                                    <label class="control-label" title="@LanguageResource.CompetitorReport">@LanguageResource.Distribution</label>
                                </div>
                            </div>
                            <div class="col-md-8" id="DistributionIndustry">
                                <table class="table table-bordered table-striped table-hover no-footer">
                                    <thead class="isd-table-header">
                                        <tr>
                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                            <th>@LanguageResource.AccessoryCategoryType</th>
                                            <th class="text-center">@LanguageResource.Btn_Choose</th>
                                        </tr>
                                    </thead>
                                    <tbody id="contentDistributionIndustry"></tbody>
                                    <tfoot></tfoot>
                                </table>
                            </div>
                        </div>
                    }
                    else
                    {
                        if (DistributionIndustryList != null && DistributionIndustryList.Count > 0)
                        {
                            int elementIndex = 0;
                            foreach (var element in DistributionIndustryList)
                            {
                                int elementK = elementIndex;
                                elementIndex++;
                                string check = "false";
                                if (ProfileDistributionIndustryList != null && ProfileDistributionIndustryList.Count > 0)
                                {
                                    var profileDI = ProfileDistributionIndustryList.Where(p => p.CatalogCode == element.CatalogCode).FirstOrDefault();
                                    if (profileDI != null && profileDI.IsChecked == true)
                                    {
                                        check = "true";
                                    }
                                }

                                <input type="hidden" id="DistributionIndustryCatalogCode-@elementK" name="DistributionIndustry[@elementK].CatalogCode" value="@element.CatalogCode" />

                                <input type="hidden" id="DistributionIndustryIsChecked-@elementK" name="DistributionIndustry[@elementK].IsChecked" value="@check" />

                            }
                        }
                    }

                    <!--Ghi chú-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Note)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Note, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.Note)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @Html.RequiredTextboxFor(p => p.Note)
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Note)
                    }

                    <!--Hình ảnh-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.ImageUrl)))
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.ImageUrl, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.ImageUrl)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                <input type="file" name="FileUpload" />

                                @if (!string.IsNullOrEmpty(Model.ImageUrl))
                                {
                                    <img class="display-for" src="~/Upload/Profile/@Model.ImageUrl" />
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.ImageUrl)
                    }

                    <!--Trạng thái-->
                    @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p => p.Actived)) && (bool?)ViewBag.isEditMode == true)
                    {
                        <div class="form-group">
                            <div class="col-md-3">
                                @Html.LabelByPropertyNameFor(p => p.Actived, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(p1 => p1.Actived)).Select(p => p.Note).FirstOrDefault())
                            </div>
                            <div class="col-md-8">
                                @{
                                    var Actived = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, bool?>(e => e.Actived)).FirstOrDefault();

                                    if (isProfileSynced == true && Actived.IsReadOnly == true)
                                    {
                                        @Html.ActivedRadioButton(p => p.Actived, true)
                                        @Html.HiddenFor(p => p.Actived)
                                    }
                                    else
                                    {
                                        @Html.ActivedRadioButton(p => p.Actived)
                                    }
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(p => p.Actived)
                    }
                </div>
            </div>

        </div>
    </div>

    <div class="row profileB">
        <!--Liên hệ-->
        @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.Contact)))
        {
            <div class="col-md-6">
                <div class="box box-success">
                    <div class="box-header with-border">
                        <h3 class="box-title">@LanguageResource.Profile_Contact</h3>
                    </div>
                    <div class="box-body">
                        @if (Model.ProfileId == null || Model.ProfileId == Guid.Empty)
                        {
                            <!--Thông tin liên hệ-->
                            <div class="form-group col-md-12 profileB">
                                @Html.TooltipLabelFor(p => p.ContactName)
                                <div class="input-group input-group-required">
                                    <input class="form-control text-box single-line valid" id="ContactName" name="ContactName" type="text" value="@Model.ContactName" placeholder="" aria-describedby="ContactName-error">
                                    <div class="required-icon" data-original-title="" title=""><div class="text">*</div></div><span class="validation-text field-validation-valid" data-valmsg-for="ContactName" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                            <div class="form-group col-md-6 profileB">
                                @Html.TooltipLabelFor(p => p.Phone)
                                <div class="input-group input-group-required">
                                    <input class="form-control text-box single-line valid" id="PhoneBusiness" name="PhoneBusiness" type="text" value="@Model.PhoneBusiness" placeholder="" aria-describedby="PhoneBusiness-error">
                                    <div class="required-icon" data-original-title="" title=""><div class="text">*</div></div><span class="validation-text field-validation-valid" data-valmsg-for="PhoneBusiness" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                            <div class="form-group col-md-6 profileB">
                                @Html.TooltipLabelFor(p => p.Email)
                                <div class="input-group input-group-required">
                                    <input class="form-control text-box single-line valid" id="EmailBusiness" name="EmailBusiness" type="text" value="@Model.EmailBusiness" placeholder="">
                                </div>
                            </div>
                            <!--Phòng ban-->
                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.DepartmentCode)))
                            {
                                <div class="form-group col-md-6 profileB">
                                    @Html.LabelByPropertyNameFor(p => p.DepartmentCode, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.DepartmentCode)).Select(p => p.Note).FirstOrDefault())
                                    @Html.DropDownList("DepartmentCode", null, LanguageResource.Dropdownlist_Choose, new { @class = " form-control with-search" })
                                </div>
                            }
                            <!--Chức vụ-->
                            if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.PositionB)))
                            {
                                <div class="form-group col-md-6 profileB">
                                    @Html.LabelByPropertyNameFor(p => p.PositionB, configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(p1 => p1.PositionB)).Select(p => p.Note).FirstOrDefault())
                                    @Html.DropDownList("PositionB", null, LanguageResource.Dropdownlist_Choose, new { @class = " form-control with-search" })
                                </div>
                            }
                        }
                        else
                        {
                            @Html.Action("_List", "ProfileContact", Model.CompanyId)
                        }
                    </div>
                </div>
            </div>
        }

        <!--Nhóm doanh nghiệp-->
        @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CustomerGroupCode)) ||
             fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CustomerCareerCode)))
        {
            <div class="col-md-6">
                <div class="box box-success">
                    <div class="box-header with-border">
                        <h3 class="box-title">@LanguageResource.Profile_Group</h3>
                    </div>
                    <div class="box-body">
                        <!--Nhóm khách hàng-->
                        @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CustomerGroupCode)))
                        {
                            <div class="form-group col-md-6 profileB">
                                @Html.TooltipLabelFor(p => p.CustomerGroupCode)
                                @{var CustomerGroupCode = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>
                                                                                                                            (e => e.CustomerGroupCode)).FirstOrDefault();
                                }
                                @if (isProfileSynced == true && CustomerGroupCode.IsReadOnly == true)
                                {
                                    if (Model.profileGroupList != null && Model.profileGroupList.Count > 0)
                                    {
                                        int index = 0;
                                        foreach (var item in Model.profileGroupList)
                                        {
                                            @Html.RequiredExDropDownList_RequiredFor(p => profileGroupList[index].ProfileGroupCode, new SelectList(profileGroupCodeList, "CatalogCode", "CatalogText_vi", item.ProfileGroupCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search profilegroupcode", @data_row = index, @disabled = "disabled" })
                                            @Html.HiddenFor(p => profileGroupList[index].ProfileGroupCode)

                                            index++;
                                        }
                                    }
                                    else
                                    {
                                        @Html.RequiredExDropDownList_RequiredFor(p => profileGroupList[0].ProfileGroupCode, new SelectList(profileGroupCodeList, "CatalogCode", "CatalogText_vi"), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search profilegroupcode", @data_row = 0, @disabled = "disabled" })
                                    }

                                }
                                else
                                {
                                    <div class="profileGroupControls">
                                        @if (Model.profileGroupList != null && Model.profileGroupList.Count > 0)
                                        {
                                            int index = 0;
                                            foreach (var item in Model.profileGroupList)
                                            {
                                                <div class="input-group profileGroup">
                                                    @Html.RequiredExDropDownList_RequiredFor(p => profileGroupList[index].ProfileGroupCode, new SelectList(profileGroupCodeList, "CatalogCode", "CatalogText_vi", item.ProfileGroupCode), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search profilegroupcode", @data_row = index })
                                                    <span class="input-group-btn">
                                                        @if (index == 0)
                                                        {
                                                            <button class="btn btn-default btn-addProfileGroup" type="button">
                                                                <span class="glyphicon glyphicon-plus"></span>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-default btn-removeProfileGroup btn-danger" type="button">
                                                                <span class="glyphicon glyphicon-minus"></span>
                                                            </button>
                                                        }
                                                    </span>
                                                </div>
                                                index++;
                                            }
                                        }
                                        else
                                        {
                                            <div class="input-group profileGroup">
                                                @Html.RequiredExDropDownList_RequiredFor(p => profileGroupList[0].ProfileGroupCode, new SelectList(profileGroupCodeList, "CatalogCode", "CatalogText_vi"), LanguageResource.Dropdownlist_Choose, new { @class = "form-control with-search profilegroupcode", @data_row = 0 })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default btn-addProfileGroup" type="button">
                                                        <span class="glyphicon glyphicon-plus"></span>
                                                    </button>
                                                </span>
                                            </div>
                                        }
                                    </div>
                                }


                            </div>
                        }
                        <!--Ngành nghề-->
                        @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CustomerCareerCode)))
                        {
                            <div class="form-group col-md-6 profileB">
                                @Html.TooltipLabelFor(p => p.CustomerCareerCode)
                                @{
                                    var CustomerCareerCode = configList.Where(p => p.FieldCode == PropertyHelper.GetPropertyName<ProfileViewModel, string>(e => e.CustomerCareerCode)).FirstOrDefault();

                                    if (isProfileSynced == true && CustomerCareerCode.IsReadOnly == true)
                                    {
                                        @Html.RequiredIfDropDownListFor(p => p.CustomerCareerCode, null, LanguageResource.Dropdownlist_Choose, new { @disabled = "disabled" })
                                        @Html.HiddenFor(p => p.CustomerCareerCode)
                                    }
                                    else
                                    {
                                        @Html.RequiredIfDropDownListFor(p => p.CustomerCareerCode, null, LanguageResource.Dropdownlist_Choose)
                                    }
                                }

                            </div>
                        }
                    </div>
                    @if (ViewBag.ViewExtens == "Mode_2")
                    {
                        <div class="box-body">
                            <!--Nhóm khách hàng-->
                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>
                                (p => p.CustomerGroupCode)))
                            {
                                <div class="form-group col-md-6 profileB">
                                    <div class="label-wrapper">
                                        <label class="control-label" for="CustomerGroupCode">@string.Format("{0}_{1}", LanguageResource.Profile_ProfileGroup, "Công ty khác")</label>
                                    </div>

                                    <div class="profileGroupControls">
                                        @if (Model.profileGroupOtherCompanyList != null && Model.profileGroupOtherCompanyList.Count > 0)
                                        {
                                            foreach (var item in Model.profileGroupOtherCompanyList)
                                            {
                                                <div class="input-group profileGroup">
                                                    @Html.DisplayFor(p => item)
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            }
                            <!--Ngành nghề-->
                            @if (fieldCodeList.Contains(PropertyHelper.GetPropertyName<ProfileViewModel, string>(p => p.CustomerCareerCode)))
                            {
                                <div class="form-group col-md-6 profileB">
                                    <div class="label-wrapper">
                                        <label class="control-label" for="CustomerCareerCode">@string.Format("{0}_{1}", LanguageResource.Profile_CustomerCareerCode, "Công ty khác")</label>
                                    </div>
                                    @if (Model.profileCareerOtherCompanyList != null && Model.profileCareerOtherCompanyList.Count > 0)
                                    {
                                        foreach (var item in Model.profileCareerOtherCompanyList)
                                        {
                                            <div>@Html.DisplayFor(p => item)</div>
                                        }
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            //Nhóm khách hàng
            if (Model.profileGroupList != null && Model.profileGroupList.Count > 0)
            {
                int index = 0;
                foreach (var item in Model.profileGroupList)
                {
                    <span>
                        @Html.HiddenFor(p => profileGroupList[index].ProfileGroupCode, new { @data_row = index })

                    </span>
                    index++;
                }
            }
            //Ngành nghề
            <span>
                @Html.HiddenFor(p => p.CustomerCareerCode)
            </span>
        }
    </div>
</div>
