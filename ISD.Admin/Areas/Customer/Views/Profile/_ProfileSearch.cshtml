@model ProfileSearchViewModel

<div id="divProfileSearch" class="modal fade profileSearch" role="dialog">
    <div class="modal-dialog modal-dialog-md">
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="btn-cancel-delete"><span aria-hidden="true">&times;</span></button>
                @if (ViewBag.PopupTitle != null)
                {
                    <h4 class="modal-title">@ViewBag.PopupTitle</h4>
                }
                else
                {
                    <h4 class="modal-title">TÌM KIẾM THÔNG TIN KHÁCH HÀNG</h4>
                }
            </div>
            <div class="alert alert-warning alert-dismissable modalAlert" style="display: none">
                <button type="button" class="alert-close close" aria-hidden="true">×</button>
                <div class="modal-alert-message">
                </div>
            </div>
            <form id="frmProfileSearchPopup">
                @Html.HiddenFor(p => p.ProfileId, new { @id = "SearchProfileId" })
                @Html.HiddenFor(p => p.hasNoContact)
                @Html.HiddenFor(p => p.ProfileType)
                @Html.HiddenFor(p => p.ProfileType2)
                @Html.HiddenFor(p => p.CustomerGroupCode)
                @Html.HiddenFor(p => p.CustomerGroupCode2)
                @Html.Hidden("IsProfile", true)
                @Html.Hidden("ProfileField")
                @Html.Hidden("ProfileFieldRow")
                @Html.AntiForgeryToken()
                <div class="form-horizontal">
                    <div class="modal-body">

                        <div class="content">
                            <div class="form-horizontal">
                                <div class="panel-group">
                                    <div class="panel panel-default panel-search">
                                        <div class="panel-body">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <div class="col-md-2">
                                                            @Html.TooltipLabelFor(p => p.ProfileCode)
                                                        </div>
                                                        <div class="col-md-4">
                                                            @Html.TextBoxFor(p => p.ProfileCode, new { @class = "form-control text-box single-line" })
                                                        </div>
                                                        @if (Model.ProfileType != ConstProfileType.Competitor && (Model.CustomerGroupCode == null || Model.CustomerGroupCode.Count() == 0))
                                                        {
                                                            <div class="col-md-2">
                                                                @Html.TooltipLabelFor(p => p.ProfileForeignCode)
                                                            </div>
                                                            <div class="col-md-4">
                                                                @Html.TextBoxFor(p => p.ProfileForeignCode, new { @class = "form-control text-box single-line" })
                                                            </div>
                                                        }
                                                    </div>

                                                    <div class="form-group">
                                                        <div class="col-md-2">
                                                            @Html.TooltipLabelFor(p => p.ProfileName)
                                                        </div>
                                                        <div class="col-md-4">
                                                            @Html.TextBoxFor(p => p.ProfileName, new { @id = "SearchProfileName", @class = "form-control text-box single-line" })
                                                        </div>

                                                        <div class="col-md-2">
                                                            @Html.TooltipLabelFor(p => p.Phone)
                                                        </div>
                                                        <div class="col-md-4">
                                                            @Html.TextBoxFor(p => p.Phone, new { @id = "SearchPhone", @class = "form-control text-box single-line" })
                                                        </div>
                                                    </div>
                                                    <div class="form-group">
                                                        @if (Model.ProfileType != ConstProfileType.Competitor && (Model.CustomerGroupCode == null || Model.CustomerGroupCode.Count() == 0))
                                                        {
                                                            if (Model.hasNoContact == true)
                                                            {
                                                                <div class="col-md-2">
                                                                    @Html.TooltipLabelFor(p => p.CustomerTypeCode)
                                                                </div>
                                                                <div class="col-md-4">
                                                                    @Html.DropDownList("CustomerTypeCode", null, LanguageResource.Dropdownlist_All, new { @class = "form-control with-search" })
                                                                    @Html.Hidden("ProfileType", ConstProfileType.Account)
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                @Html.Hidden("ProfileType", ConstProfileType.Contact)
                                                            }
                                                        }

                                                        <div class="col-md-2">
                                                            @Html.TooltipLabelFor(p => p.Actived)
                                                        </div>
                                                        <div class="col-md-4">
                                                            @Html.DropDownList("Actived", new List<SelectListItem>()
                                                               {
                                                                   new SelectListItem(){Text = LanguageResource.Dropdownlist_All, Value = ""},
                                                                   new SelectListItem(){Text = LanguageResource.Actived_True, Value = "true", Selected = true},
                                                                   new SelectListItem(){Text = LanguageResource.Actived_False, Value = "false"}
                                                               }, new { @id = "SearchProfileActived", @class = "form-control with-search" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-md-12">
                                                <div class="form-group">
                                                    <div class="col-md-8 col-md-offset-5">
                                                        <a class="btn btn-primary" id="btn-profile-search">
                                                            <i class="fa fa-search"></i> @LanguageResource.Btn_Search
                                                        </a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="panel panel-default">
                                        <div class="panel-body">
                                            <div id="divSearchPopupResult">
                                                <table class="table table-bordered table-striped table-hover searchTable no-footer">
                                                    <thead class="isd-table-header">
                                                        <tr>
                                                            <th class="text-center isd-table-th-stt">@LanguageResource.NumberIndex</th>
                                                            <th>@Html.DisplayNameFor(p => p.ProfileCode)</th>
                                                            <th>@Html.DisplayNameFor(p => p.ProfileForeignCode)</th>
                                                            <th>@Html.DisplayNameFor(p => p.ProfileName)</th>
                                                            <th>@LanguageResource.Profile_CustomerId</th>
                                                            <th>@LanguageResource.Profile_CustomerTypeCode</th>
                                                            <th>@Html.DisplayNameFor(p => p.Phone)</th>
                                                            <th>@Html.DisplayNameFor(p => p.Email)</th>
                                                            <th>@Html.DisplayNameFor(p => p.Address)</th>
                                                            <th>@Html.DisplayNameFor(p => p.CreateUser)</th>
                                                            <th class="text-center">@Html.DisplayNameFor(p => p.CreateTime)</th>
                                                            <th class="text-center">@Html.DisplayNameFor(p => p.Actived)</th>
                                                        </tr>
                                                    </thead>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        //$("#btn-profile-search").trigger("click");
    });

    $(document).on("click", "#btn-profile-search", function () {
        var $btn = $(this);
        $btn.button('loading');
        var frmElement = $(this).closest('form').attr('id');
        PaggingServerSide_ProfileSearch("/Customer/Profile/_ProfileSearchResult", frmElement);
        //setTimeout(function () {
        //    $btn.button('reset');
        //}, 5000);
    });

    $(document).ajaxComplete(function () {
        //$("#btn-profile-search").trigger("click");
        $(".btn").button('reset');
    });

    //trigger enter click when fill in search form
    //$(document).on("keyup", "#frmProfileSearchPopup", function (evt) {
    //    if (evt.keyCode == 13) {
    //        $("#btn-profile-search").trigger("click");
    //    }
    //});

    function PaggingServerSide_ProfileSearch(url, frm) {
        $("#" + frm + " .searchTable").DataTable().clear().destroy();
        $("#" + frm + " .searchTable")
            .on('processing.dt', function (e, settings, processing) {
                ISD.LoadingDataTable(processing, '#' + frm + ' .searchTable');
            })
            .DataTable({
            proccessing: true,
            serverSide: true,
            paging: true,
            scrollX: true,
            //scrollCollapse: true,
            //fixedColumns: {
            //    leftColumns: 3
            //},
            ajax: {
                type: 'POST',
                url: url,
                contentType: 'application/json',
                data: function (d) {
                    var arr = {};
                    //data search
                    var data = $("#" + frm).serializeArray();
                    $.each(data, function (index, val) {
                        var obj = {};
                        obj[val.name] = val.value;
                        $.extend(true, arr, obj);
                    });
                    //data datatable (draw, start, length,...)
                    $.extend(true, arr, d);

                    return JSON.stringify(arr);
                }
            },
            columns: [
                //1. STT
                {
                    "data": "STT",
                    "className": "text-center"
                },
                //2. ProfileCode
                {
                    "data": "ProfileCode",
                    "className": "text-center",
                    "orderable": true,
                    "render": function (data, type, row) {
                        if (type === "display" || type === "filter") {
                            return "<a class=\"btn-profile-choose\" data-id='" + row["ProfileId"] + "' data-code='" + row["ProfileCode"] + "' data-name='" + row["ProfileName"] + "'>" + data + "</a>";
                        }
                        return "";
                    }
                },
                //3. ProfileForeignCode
                {
                    "data": "ProfileForeignCode",
                    "className": "text-center",
                    "orderable": true,
                    "visible": ("@Model.hasNoContact" == "True") ? true : false
                },
                //4. ProfileName
                {
                    "data": "ProfileName",
                    "orderable": true
                },
                //5. CompanyName
                {
                    "data": "CompanyName",
                    "orderable": true,
                    "visible": ("@Model.hasNoContact" == "True") ? false : true
                },
                //6. CustomerTypeName
                {
                    "data": "CustomerTypeName",
                    "orderable": true,
                    "visible": ("@Model.hasNoContact" == "True") ? true : false
                },
                //7. Phone
                {
                    "data": "Phone", "className": "text-right", "orderable": false
                },
                //8. Email
                {
                    "data": "Email", "orderable": false
                },
                //9. Address
                {
                    "data": "Address", "orderable": false
                },
                //10. CreateUser
                {
                    "data": "CreateUser"
                },
                //11. CreateTime
                {
                    "data": "CreateTime",
                    "orderable": true,
                    "className": "text-center",
                    "render": function (data, type, row) {
                        // If display or filter data is requested, format the date
                        if (type === "display" || type === "filter") {
                            return moment(data).format("DD/MM/YYYY HH:mm:ss");
                        }
                        return data;
                    }
                },
                //12. Actived
                {
                    "data": "Actived",
                    "orderable": false,
                    "className": "text-center",
                    "render": function (data, type, row) {
                        if (type === "display" || type === "filter") {
                            if (data == true) {
                                return "<i class='fa fa-check true-icon'></i>";
                            }
                            else {
                                return "<i class='fa fa-close false-icon'></i>";
                            }
                        }
                        return data;
                    }
                }
            ],
            destroy: true,
            language: {
                sProcessing: "Đang xử lý...",
                sLengthMenu: "Xem _MENU_ mục",
                sZeroRecords: "Không tìm thấy dòng nào phù hợp",
                sInfo: "Đang xem _START_ đến _END_ trong tổng số _TOTAL_ mục",
                sInfoEmpty: "Đang xem 0 đến 0 trong tổng số 0 mục",
                sInfoFiltered: "(được lọc từ _MAX_ mục)",
                sInfoPostFix: "",
                sSearch: "Tìm nội dung:",
                sUrl: "",
                oPaginate: {
                    sFirst: "Đầu",
                    sPrevious: "&laquo;",
                    sNext: "&raquo;",
                    sLast: "Cuối"
                }
            },
            columnDefs: [
                { targets: [0, 1], visible: true },
                { targets: 'no-sort', visible: false }
            ],
            "sDom": '<"top"flp>rt<"bottom"ip><"clear">',
        });
        //var $btn = $("#btn-profile-search");

        //var $btn = $("#" + frmElement + " #btn-profile-search");
        //$btn.button('reset');
    }

    $(document).on("click", ".btn-profile-choose", function () {
        var id = $(this).data("id");
        var name = $(this).data("name");
        var IsProfile = $("input[name='IsProfile']").val();
        var frm = $(this).closest('form').attr('id');

        if (IsProfile == true || IsProfile == "True" || IsProfile == "true") {
            var CustomerTypeCode = $("input[name='CustomerTypeCode']").val();
            if (CustomerTypeCode != "@ConstProfileType.Account") {
                var field = $("#" + frm + " #ProfileField").val();
                if (field === "ReferenceProfileId2") {
                    $("#ReferenceProfileId2").val(id);
                    $("#ConsultingAndDesign").val(name);
                }
                else if (field === "InternalId") {
                    var row = $("#" + frm + " #ProfileFieldRow").val();
                    $('input[name="internalList[' + row + '].ConstructionId"]').val(id);
                    $('input[name="internalList[' + row + '].ConstructionName"]').val(name);
                }
                else if (field === "CompetitorId") {
                    var row = $("#" + frm + " #ProfileFieldRow").val();
                    $('input[name="competitorList[' + row + '].ConstructionId"]').val(id);
                    $('input[name="competitorList[' + row + '].ConstructionName"]').val(name);
                }
                else if (field === "SpecList") {
                    var row = $("#" + frm + " #ProfileFieldRow").val();
                    $('input[name="SpecList[' + row + '].CompetitorId"]').val(id);
                    $('input[name="SpecList[' + row + '].CompetitorName"]').val(name);
                }
                else if (field === "ConstructionList") {
                    var row = $("#" + frm + " #ProfileFieldRow").val();
                    $('input[name="ConstructionList[' + row + '].CompetitorId"]').val(id);
                    $('input[name="ConstructionList[' + row + '].CompetitorName"]').val(name);
                }
                else if (field === "Investor") {
                    $("#Investor").val(id);
                    $("#InvestorName").val(name);
                }
                else if (field === "Designer") {
                    $("#Designer").val(id);
                    $("#DesignerName").val(name);
                }
                else {
                    if ($("#ContactId").length > 0) {
                        $("#ContactId").val(id);
                        $("#ContactName").val(name);
                    }
                    else {
                        $("#CompanyId").val(id);
                        $("#CompanyName").val(name);
                    }

                    if ($("#ReferenceProfileId").length > 0) {
                        $("#ReferenceProfileId").val(id);
                    }
                }
            }
            else {
                $("#ProfileId").val(id);
                $("#ProfileName").val(name);
            }
        }
        //close popup
        $("#divProfileSearch").modal("hide");
        $(".profileSearch").modal("hide");
    });

    $(document).on("click", ".btn-del-profile", function () {
       var CustomerTypeCode = $("input[name='CustomerTypeCode']").val();
            if (CustomerTypeCode != "@ConstProfileType.Account") {
                var field = $(this).data('field');
                if (field === "ReferenceProfileId2") {
                    $("#ReferenceProfileId2").val("");
                    $("#ConsultingAndDesign").val("");
                }
                else if (field === "InternalId") {
                    var row = $(this).data('row');
                    $('input[name="internalList[' + row + '].ConstructionId"]').val("");
                    $('input[name="internalList[' + row + '].ConstructionName"]').val("");
                }
                else if (field === "CompetitorId") {
                    var row = $(this).data('row');
                    $('input[name="competitorList[' + row + '].ConstructionId"]').val("");
                    $('input[name="competitorList[' + row + '].ConstructionName"]').val("");
                }
                else {
                    if ($("#ContactId").length > 0) {
                        $("#ContactId").val("");
                        $("#ContactName").val("");
                    }
                    else {
                        $("#CompanyId").val("");
                        $("#CompanyName").val("");
                    }

                    if ($("#ReferenceProfileId").length > 0) {
                        $("#ReferenceProfileId").val("");
                    }
                }
            }
            else {
                $("#ProfileId").val("");
                $("#ProfileName").val("");
            }
    });

    $(document).on("change", "#ProvinceIdSearchList", function () {
        var ProvinceId = $(this).val();

        $.ajax({
            type: "POST",
            url: "/Customer/Profile/GetDistrict",
            data: {
                ProvinceId: ProvinceId
            },
            success: function (jsonData) {
                $("#DistrictIdSearchList").html("");
                $("#DistrictIdSearchList").append("<option value=''>-- Tất cả --</option>");
                $.each(jsonData, function (index, value) {
                    $("#DistrictIdSearchList").append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                });

                $("#DistrictIdSearchList").trigger("change");
            }
        });
    });
</script>