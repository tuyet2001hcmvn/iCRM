@using Newtonsoft.Json;
@model IEnumerable<CustomerAmountByCRMViewModel>
@{
    var pivotSetting = (List<FieldSettingModel>)ViewBag.PivotSetting;
    var search = (CustomerAmountByCRMSearchViewModel)ViewBag.Search;
    var layoutConfigs = (string)ViewBag.LayoutConfigs;
}
@*@Html.DevExpress().PivotGrid(settings =>
    {
        settings.Name = "CustomerAmountByCRMPivotGrid";
        settings.CallbackRouteValues = new { Controller = "CustomerAmountByCRM", Action = "CustomerAmountByCRMGridPartial", jsonReq = JsonConvert.SerializeObject(search) };
        settings.Width = Unit.Percentage(100);
        settings.OptionsPager.RowsPerPage = 20;
        settings.OptionsPager.PageSizeItemSettings.Visible = true;
        settings.OptionsCustomization.AllowDrag = true;
        settings.OptionsCustomization.AllowDragInCustomizationForm = true;
        settings.CustomizationFieldsLeft = 600;
        settings.CustomizationFieldsTop = 400;
        settings.OptionsCustomization.AllowSort = true;
        settings.OptionsView.ShowRowGrandTotals = false;


        if (string.IsNullOrEmpty(layoutConfigs))
        {
            settings.AfterPerformCallback = (sender, e) =>
            {
                List<FieldSettingModel> fieldSettingList = new List<FieldSettingModel>();
                ASPxPivotGrid PivotGrid = sender as ASPxPivotGrid;
                var listField = PivotGrid.Fields;
                foreach (PivotGridField field in listField)
                {
                    FieldSettingModel fieldSetting = new FieldSettingModel();
                    fieldSetting.Caption = field.Caption;
                    fieldSetting.AreaIndex = field.AreaIndex;
                    fieldSetting.FieldName = field.FieldName;
                    if (field.Area == PivotArea.RowArea)
                    {
                        fieldSetting.PivotArea = 0;

                    }
                    else
                    {
                        if (field.Area == PivotArea.ColumnArea)
                        {
                            fieldSetting.PivotArea = 1;
                        }
                        else
                        {
                            if (field.Area == PivotArea.FilterArea)
                            {
                                fieldSetting.PivotArea = 2;
                            }
                            else
                            {
                                fieldSetting.PivotArea = 3;
                            }
                        }
                    }
                    if (field.ValueFormat.FormatType == FormatType.Numeric || field.ValueFormat.FormatType == FormatType.DateTime)
                    {
                        fieldSetting.CellFormat_FormatString = field.ValueFormat.FormatString;
                        fieldSetting.CellFormat_FormatType = field.ValueFormat.FormatType.ToString();
                    }
                    fieldSetting.Visible = field.Visible;
                    fieldSettingList.Add(fieldSetting);
                }
                Session[CurrentUser.AccountId + "Layout"] = fieldSettingList;
                Session[CurrentUser.AccountId + "LayoutConfigs"] = PivotGrid.SaveLayoutToString();
            };
        }
        else
        {
            settings.PreRender = (sender, e) =>
            {
                MVCxPivotGrid PivotGrid = sender as MVCxPivotGrid;
                //PivotGrid.LoadLayoutFromString(layoutConfigs);
                Session[CurrentUser.AccountId + "LayoutConfigs"] = PivotGrid.SaveLayoutToString();
            };
        }

        if (pivotSetting != null && pivotSetting.Count > 0)
        {
            foreach (var fieldSetting in pivotSetting)
            {
                settings.Fields.Add(field =>
                {
                    if (fieldSetting.PivotArea == 0)
                    {
                        field.Area = PivotArea.RowArea;
                    }
                    if (fieldSetting.PivotArea == 1)
                    {
                        field.Area = PivotArea.ColumnArea;
                    }
                    if (fieldSetting.PivotArea == 2)
                    {
                        if (fieldSetting.AreaIndex > 10)
                        {
                            field.Visible = false;
                        }
                        field.Area = PivotArea.FilterArea;
                    }
                    if (fieldSetting.PivotArea == 3)
                    {
                        field.Area = PivotArea.DataArea;
                    }
                    field.FieldName = fieldSetting.FieldName;
                    field.Caption = fieldSetting.Caption;
                    field.AreaIndex = fieldSetting.AreaIndex.Value;
                    if (fieldSetting.CellFormat_FormatType == "DateTime")
                    {
                        field.ValueFormat.FormatType = FormatType.DateTime;
                        field.ValueFormat.FormatString = fieldSetting.CellFormat_FormatString;
                        field.CellFormat.FormatType = FormatType.DateTime;
                        field.CellFormat.FormatString = fieldSetting.CellFormat_FormatString;
                    }
                    if (fieldSetting.CellFormat_FormatType == "Numeric")
                    {
                        field.ValueFormat.FormatType = FormatType.Numeric;
                        field.ValueFormat.FormatString = fieldSetting.CellFormat_FormatString;
                        field.CellFormat.FormatType = FormatType.Numeric;
                        field.CellFormat.FormatString = fieldSetting.CellFormat_FormatString;
                        field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
                        field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                    }
                    field.Visible = fieldSetting.Visible.Value;
                });
            }
        }
        else // default
        {
            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.RowArea;
                field.FieldName = "CustomerGroupName";
                field.Caption = "Nhóm khách hàng";
                field.AreaIndex = 0;
            });

            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.ColumnArea;
                field.FieldName = "CustomerTypeName";
                field.Caption = "Phân loại KH";
                field.AreaIndex = 0;
            });

            //Data Area

            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.DataArea;
                field.FieldName = "QtyECC";
                field.Caption = "Khách có mã SAP";
                field.CellFormat.FormatType = FormatType.Numeric;
                field.CellFormat.FormatString = "{0:##,##}";
                field.ValueFormat.FormatType = FormatType.Numeric;
                field.ValueFormat.FormatString = "{0:##,###}";
                field.AreaIndex = 0;
                field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
                field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
            });
            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.DataArea;
                field.FieldName = "QtyCRM";
                field.Caption = "Khách không có mã SAP";
                field.CellFormat.FormatType = FormatType.Numeric;
                field.CellFormat.FormatString = "{0:##,###}";
                field.ValueFormat.FormatType = FormatType.Numeric;
                field.ValueFormat.FormatString = "{0:##,###}";
                field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
                field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                field.AreaIndex = 1;
            });
            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.DataArea;
                field.FieldName = "Total";
                field.Caption = "Tổng";
                field.CellFormat.FormatType = FormatType.Numeric;
                field.CellFormat.FormatString = "{0:##,###}";
                field.ValueFormat.FormatType = FormatType.Numeric;
                field.ValueFormat.FormatString = "{0:##,###}";
                field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
                field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                field.AreaIndex = 2;

            });
        }

    }).Bind(Model).GetHtml()*@



@if (Model != null && Model.Count() > 0)
{
    <table class="table table-bordered table-striped table-hover dataTable">
        <thead class="isd-table-header">
            <tr>
                <th rowspan="2" width="18%" class="text-center">@LanguageResource.Profile_CustomerCategoryCode</th>
                <th colspan="3" class="text-center">Doanh nghiệp</th>
                <th colspan="3" class="text-center">Tiêu dùng</th>
                <th colspan="3" class="text-center">Tổng</th>
            </tr>
            <tr>

                <th class="text-center">
                    Khách có mã SAP
                </th>
                <th class="text-center">
                    Khách không có mã SAP
                </th>
                <th class="text-center">
                    Tổng
                </th>

                <th class="text-center">
                    Khách có mã SAP
                </th>
                <th class="text-center">
                    Khách không có mã SAP
                </th>
                <th class="text-center">
                    Tổng
                </th>

                <th class="text-center">
                    Khách có mã SAP
                </th>
                <th class="text-center">
                    Khách không có mã SAP
                </th>
                <th class="text-center">
                    Tổng
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.CustomerGroupName</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyECCB))</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyCRMB))</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyTotalB))</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyECCC))</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyCRMC))</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyTotalC))</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyECC))</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyCRM))</td>
                    <td class="text-right">@(string.Format("{0:n0}", item.QtyTotal))</td>
                </tr>
            }
        </tbody>
        <thead class="isd-table-header">
            @{
                decimal? sumQtyEccB = Model.Sum(x => x.QtyECCB);
                decimal? sumQtyCRMB = Model.Sum(x => x.QtyCRMB);
                decimal? sumQtyTotalB = Model.Sum(x => x.QtyTotalB);
                decimal? sumQtyEccC = Model.Sum(x => x.QtyECCC);
                decimal? sumQtyCRMC = Model.Sum(x => x.QtyCRMC);
                decimal? sumQtyTotalC = Model.Sum(x => x.QtyTotalC);
                decimal? sumQtyEcc = Model.Sum(x => x.QtyECC);
                decimal? sumQtyCRM = Model.Sum(x => x.QtyCRM);
                decimal? sumQtyTotal = Model.Sum(x => x.QtyTotal);
            }
            <tr>
                <th class="text-right">Tổng: </th>
                <th class="text-right">@(string.Format("{0:n0}", sumQtyEccB))</th>
                <th class="text-right">@(string.Format("{0:n0}", sumQtyCRMB))</th>
                <th class="text-right">@(string.Format("{0:n0}", sumQtyTotalB))</th>
                <th class="text-right">@(string.Format("{0:n0}", sumQtyEccC))</th>
                <th class="text-right">@(string.Format("{0:n0}", sumQtyCRMC))</th>
                <th class="text-right">@(string.Format("{0:n0}", sumQtyTotalC))</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyEcc))</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyCRM))</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotal))</th>
            </tr>
            <tr>
                <th class="text-right">Tỷ lệ: </th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotalB != 0 ? (sumQtyEccB * 100) / sumQtyTotalB : 0)) %</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotalB != 0 ? (sumQtyCRMB * 100) / sumQtyTotalB : 0)) %</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotalB != 0 ? (sumQtyTotalB * 100) / sumQtyTotalB : 0)) %</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotalC != 0 ? (sumQtyEccC * 100) / sumQtyTotalC : 0)) %</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotalC != 0 ? (sumQtyCRMC * 100) / sumQtyTotalC : 0)) %</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotalC != 0 ? (sumQtyTotalC * 100) / sumQtyTotalC : 0)) %</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotal != 0 ? (sumQtyEcc * 100) / sumQtyTotal : 0)) %</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotal != 0 ? (sumQtyCRM * 100) / sumQtyTotal : 0)) %</th>
                <th class="text-right">@(string.Format("{0:##,##}", sumQtyTotal != 0 ? (sumQtyTotal * 100) / sumQtyTotal : 0)) %</th>
            </tr>
        </thead>
    </table>
}
else
{
    <p>Không có dữ liệu!</p>
}