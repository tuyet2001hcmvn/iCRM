@model IEnumerable<RDCatalogueDetailViewModel>
@{
    //var pivotSetting = (List<FieldSettingModel>)ViewBag.PivotSetting;
    var search = (RDCatalogueDetailSearchViewModel)ViewBag.Search;
    //var layoutConfigs = (string)ViewBag.LayoutConfigs;
}

<table class="table table-bordered table-striped table-hover dataTable">
    <thead class="isd-table-header">
        <tr>
            <th class="text-center">@LanguageResource.NumberIndex</th>
            @*<th rowspan="3" width="8%" class="text-center">@LanguageResource.Catalogue_ProductCode</th>*@
            <th class="text-center">@Html.DisplayNameFor(p => p.DocumentType)</th>
            <th class="text-center">@Html.DisplayNameFor(p => p.DocumentCode)</th>
            <th class="text-center">@Html.DisplayNameFor(p => p.DocumentDate)</th>
            <th class="text-center" width="30%">@Html.DisplayNameFor(p => p.Note)</th>
            <th class="text-center">@Html.DisplayNameFor(p => p.TonDauKi)</th>
            <th class="text-center">@Html.DisplayNameFor(p => p.ReceiveQty)</th>
            <th class="text-center">@Html.DisplayNameFor(p => p.DeliveryQty)</th>
            <th class="text-center">@Html.DisplayNameFor(p => p.TonCuoiKi)</th>
        </tr>
    </thead>
    <tbody>
        @if (Model != null && Model.Count() > 0)
        {
            foreach (var item in Model)
            {
                <tr>
                    <td class="text-center">@Html.DisplayFor(x => item.STT)</td>
                    <td class="text-left">@Html.DisplayFor(x => item.DocumentType)</td>
                    <td class="text-left">@Html.DisplayFor(x => item.DocumentCode)</td>
                    <td class="text-center">@Html.DisplayFor(x => item.DocumentDate)</td>
                    <td class="text-left">@Html.DisplayFor(x => item.Note)</td>
                    <td class="text-right">@Html.DisplayFor(x => item.TonDauKi)</td>
                    <td class="text-right">@Html.DisplayFor(x => item.ReceiveQty)</td>
                    <td class="text-right">@Html.DisplayFor(x => item.DeliveryQty)</td>
                    <td class="text-right">@Html.DisplayFor(x => item.TonCuoiKi)</td>
                </tr>
            }

        }
    </tbody>
    </table>

@*@Html.DevExpress().PivotGrid(settings =>
    {
        settings.Name = "CustomerCertificateACPivotGrid";
        settings.CallbackRouteValues = new { Controller = "CustomerCertificateACReport", Action = "CustomerCertificateACGridPartial", jsonReq = JsonConvert.SerializeObject(search) };
        settings.Width = Unit.Percentage(100);
        settings.OptionsPager.RowsPerPage = 20;
        settings.OptionsPager.PageSizeItemSettings.Visible = true;
        settings.OptionsCustomization.AllowDrag = true;
        settings.OptionsCustomization.AllowDragInCustomizationForm = true;
        settings.CustomizationFieldsLeft = 600;
        settings.CustomizationFieldsTop = 400;
        settings.OptionsCustomization.AllowSort = true;
        settings.OptionsView.ShowColumnGrandTotals = false;
        settings.OptionsView.ShowColumnGrandTotalHeader = false;

        if (string.IsNullOrEmpty(layoutConfigs))
        {
            settings.AfterPerformCallback = (sender, e) =>
            {
                List<FieldSettingModel> fieldSettingList = new List<FieldSettingModel>();
                ASPxPivotGrid PivotGrid = sender as ASPxPivotGrid;
                var listField = PivotGrid.Fields;
                foreach (PivotGridField field in listField)
                {
                    FieldSettingModel fieldSetting = new FieldSettingModel();
                    fieldSetting.Caption = field.Caption;
                    fieldSetting.AreaIndex = field.AreaIndex;
                    fieldSetting.FieldName = field.FieldName;
                    if (field.Area == PivotArea.RowArea)
                    {
                        fieldSetting.PivotArea = 0;

                    }
                    else
                    {
                        if (field.Area == PivotArea.ColumnArea)
                        {
                            fieldSetting.PivotArea = 1;
                        }
                        else
                        {
                            if (field.Area == PivotArea.FilterArea)
                            {
                                fieldSetting.PivotArea = 2;
                            }
                            else
                            {
                                fieldSetting.PivotArea = 3;
                            }
                        }
                    }
                    if (field.ValueFormat.FormatType == FormatType.Numeric || field.ValueFormat.FormatType == FormatType.DateTime)
                    {
                        fieldSetting.CellFormat_FormatString = field.ValueFormat.FormatString;
                        fieldSetting.CellFormat_FormatType = field.ValueFormat.FormatType.ToString();
                    }
                    fieldSetting.Visible = field.Visible;
                    fieldSettingList.Add(fieldSetting);
                }
                Session[CurrentUser.AccountId + "Layout"] = fieldSettingList;
                Session[CurrentUser.AccountId + "LayoutConfigs"] = PivotGrid.SaveLayoutToString();
            };
        }
        else
        {
            settings.PreRender = (sender, e) =>
            {
                MVCxPivotGrid PivotGrid = sender as MVCxPivotGrid;
                //PivotGrid.LoadLayoutFromString(layoutConfigs);
                Session[CurrentUser.AccountId + "LayoutConfigs"] = PivotGrid.SaveLayoutToString();
            };
        }

        if (pivotSetting != null && pivotSetting.Count > 0)
        {
            foreach (var fieldSetting in pivotSetting)
            {
                settings.Fields.Add(field =>
                {
                    if (fieldSetting.PivotArea == 0)
                    {
                        field.Area = PivotArea.RowArea;
                    }
                    if (fieldSetting.PivotArea == 1)
                    {
                        field.Area = PivotArea.ColumnArea;
                    }
                    if (fieldSetting.PivotArea == 2)
                    {
                        if (fieldSetting.AreaIndex > 10)
                        {
                            field.Visible = false;
                        }
                        field.Area = PivotArea.FilterArea;

                    }
                    if (fieldSetting.PivotArea == 3)
                    {
                        field.Area = PivotArea.DataArea;
                    }
                    field.FieldName = fieldSetting.FieldName;
                    field.Caption = fieldSetting.Caption;
                    field.AreaIndex = fieldSetting.AreaIndex.Value;
                    if (fieldSetting.CellFormat_FormatType == "DateTime")
                    {
                        field.ValueFormat.FormatType = FormatType.DateTime;
                        field.ValueFormat.FormatString = fieldSetting.CellFormat_FormatString;
                        field.CellFormat.FormatType = FormatType.DateTime;
                        field.CellFormat.FormatString = fieldSetting.CellFormat_FormatString;
                    }
                    if (fieldSetting.CellFormat_FormatType == "Numeric")
                    {
                        field.ValueFormat.FormatType = FormatType.Numeric;
                        field.ValueFormat.FormatString = fieldSetting.CellFormat_FormatString;
                        field.CellFormat.FormatType = FormatType.Numeric;
                        field.CellFormat.FormatString = fieldSetting.CellFormat_FormatString;
                        field.ValueStyle.HorizontalAlign = HorizontalAlign.Right;
                        field.CellStyle.HorizontalAlign = HorizontalAlign.Right;
                    }
                    field.Visible = fieldSetting.Visible.Value;
                });
            }
        }
        else // default
        {
            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.RowArea;
                field.FieldName = "NumberIndex";
                field.Caption = "STT";
                field.AreaIndex = 0;
            });
            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.RowArea;
                field.FieldName = "ProfileCode";
                field.Caption = "Mã Khách hàng";
                field.AreaIndex = 1;
            });
            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.RowArea;
                field.FieldName = "ProfileName";
                field.Caption = "Tên khách hàng";
                field.AreaIndex = 2;
            });
            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.RowArea;
                field.FieldName = "StartDate";
                field.Caption = "Ngày hiệu lực";
                field.ValueFormat.FormatString = "dd-MM-yyyy";
                field.ValueFormat.FormatType = FormatType.DateTime;
                field.AreaIndex = 3;
            });
            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.RowArea;
                field.FieldName = "EndDate";
                field.Caption = "Ngày đến hạn";
                field.ValueFormat.FormatString = "dd-MM-yyyy";
                field.ValueFormat.FormatType = FormatType.DateTime;
                field.AreaIndex = 4;
            });

            settings.Fields.Add(field =>
            {
                field.Area = PivotArea.RowArea;
                field.FieldName = "SalesEmployeeName";
                field.Caption = "Nhân viên kinh doanh";
                field.AreaIndex = 2;
            });
        }

    }).Bind(Model).GetHtml()*@


